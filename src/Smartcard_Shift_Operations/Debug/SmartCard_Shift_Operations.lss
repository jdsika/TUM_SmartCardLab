
SmartCard_Shift_Operations.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000076  00800100  00003028  000030bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003028  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000005a8  00800176  00800176  00003132  2**0
                  ALLOC
  3 .stab         00007584  00000000  00000000  00003134  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002d25  00000000  00000000  0000a6b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000d3dd  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__ctors_end>
       4:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
       8:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
       c:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      10:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      14:	0c 94 25 0f 	jmp	0x1e4a	; 0x1e4a <__vector_5>
      18:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      1c:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      20:	0c 94 d2 10 	jmp	0x21a4	; 0x21a4 <__vector_8>
      24:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      28:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      2c:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      30:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      34:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <__vector_13>
      38:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      3c:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      40:	0c 94 cd 11 	jmp	0x239a	; 0x239a <__vector_16>
      44:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      48:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      4c:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      50:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      54:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      58:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      5c:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      60:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      64:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      68:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      6c:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>

00000070 <skein_default_iv>:
      70:	1d ef ee d4 a9 90 42 16 15 cd b0 b1 44 af 7e 8e     ......B.....D.~.
      80:	ae 09 9d f6 22 08 ba a8 68 64 4a 36 5e 5c f2 0a     ...."...hdJ6^\..

00000090 <aes_invsbox>:
      90:	52 09 6a d5 30 36 a5 38 bf 40 a3 9e 81 f3 d7 fb     R.j.06.8.@......
      a0:	7c e3 39 82 9b 2f ff 87 34 8e 43 44 c4 de e9 cb     |.9../..4.CD....
      b0:	54 7b 94 32 a6 c2 23 3d ee 4c 95 0b 42 fa c3 4e     T{.2..#=.L..B..N
      c0:	08 2e a1 66 28 d9 24 b2 76 5b a2 49 6d 8b d1 25     ...f(.$.v[.Im..%
      d0:	72 f8 f6 64 86 68 98 16 d4 a4 5c cc 5d 65 b6 92     r..d.h....\.]e..
      e0:	6c 70 48 50 fd ed b9 da 5e 15 46 57 a7 8d 9d 84     lpHP....^.FW....
      f0:	90 d8 ab 00 8c bc d3 0a f7 e4 58 05 b8 b3 45 06     ..........X...E.
     100:	d0 2c 1e 8f ca 3f 0f 02 c1 af bd 03 01 13 8a 6b     .,...?.........k
     110:	3a 91 11 41 4f 67 dc ea 97 f2 cf ce f0 b4 e6 73     :..AOg.........s
     120:	96 ac 74 22 e7 ad 35 85 e2 f9 37 e8 1c 75 df 6e     ..t"..5...7..u.n
     130:	47 f1 1a 71 1d 29 c5 89 6f b7 62 0e aa 18 be 1b     G..q.)..o.b.....
     140:	fc 56 3e 4b c6 d2 79 20 9a db c0 fe 78 cd 5a f4     .V>K..y ....x.Z.
     150:	1f dd a8 33 88 07 c7 31 b1 12 10 59 27 80 ec 5f     ...3...1...Y'.._
     160:	60 51 7f a9 19 b5 4a 0d 2d e5 7a 9f 93 c9 9c ef     `Q....J.-.z.....
     170:	a0 e0 3b 4d ae 2a f5 b0 c8 eb bb 3c 83 53 99 61     ..;M.*.....<.S.a
     180:	17 2b 04 7e ba 77 d6 26 e1 69 14 63 55 21 0c 7d     .+.~.w.&.i.cU!.}

00000190 <rc_tab>:
     190:	01 02 04 08 10 20 40 80 1b 36                       ..... @..6

0000019a <aes_sbox>:
     19a:	63 7c 77 7b f2 6b 6f c5 30 01 67 2b fe d7 ab 76     c|w{.ko.0.g+...v
     1aa:	ca 82 c9 7d fa 59 47 f0 ad d4 a2 af 9c a4 72 c0     ...}.YG.......r.
     1ba:	b7 fd 93 26 36 3f f7 cc 34 a5 e5 f1 71 d8 31 15     ...&6?..4...q.1.
     1ca:	04 c7 23 c3 18 96 05 9a 07 12 80 e2 eb 27 b2 75     ..#..........'.u
     1da:	09 83 2c 1a 1b 6e 5a a0 52 3b d6 b3 29 e3 2f 84     ..,..nZ.R;..)./.
     1ea:	53 d1 00 ed 20 fc b1 5b 6a cb be 39 4a 4c 58 cf     S... ..[j..9JLX.
     1fa:	d0 ef aa fb 43 4d 33 85 45 f9 02 7f 50 3c 9f a8     ....CM3.E...P<..
     20a:	51 a3 40 8f 92 9d 38 f5 bc b6 da 21 10 ff f3 d2     Q.@...8....!....
     21a:	cd 0c 13 ec 5f 97 44 17 c4 a7 7e 3d 64 5d 19 73     ...._.D...~=d].s
     22a:	60 81 4f dc 22 2a 90 88 46 ee b8 14 de 5e 0b db     `.O."*..F....^..
     23a:	e0 32 3a 0a 49 06 24 5c c2 d3 ac 62 91 95 e4 79     .2:.I.$\...b...y
     24a:	e7 c8 37 6d 8d d5 4e a9 6c 56 f4 ea 65 7a ae 08     ..7m..N.lV..ez..
     25a:	ba 78 25 2e 1c a6 b4 c6 e8 dd 74 1f 4b bd 8b 8a     .x%.......t.K...
     26a:	70 3e b5 66 48 03 f6 0e 61 35 57 b9 86 c1 1d 9e     p>.fH...a5W.....
     27a:	e1 f8 98 11 69 d9 8e 94 9b 1e 87 e9 ce 55 28 df     ....i........U(.
     28a:	8c a1 89 0d bf e6 42 68 41 99 2d 0f b0 54 bb 16     ......BhA.-..T..

0000029a <__ctors_end>:
     29a:	11 24       	eor	r1, r1
     29c:	1f be       	out	0x3f, r1	; 63
     29e:	cf ef       	ldi	r28, 0xFF	; 255
     2a0:	d0 e1       	ldi	r29, 0x10	; 16
     2a2:	de bf       	out	0x3e, r29	; 62
     2a4:	cd bf       	out	0x3d, r28	; 61

000002a6 <__do_copy_data>:
     2a6:	11 e0       	ldi	r17, 0x01	; 1
     2a8:	a0 e0       	ldi	r26, 0x00	; 0
     2aa:	b1 e0       	ldi	r27, 0x01	; 1
     2ac:	e8 e2       	ldi	r30, 0x28	; 40
     2ae:	f0 e3       	ldi	r31, 0x30	; 48
     2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <__do_copy_data+0x10>
     2b2:	05 90       	lpm	r0, Z+
     2b4:	0d 92       	st	X+, r0
     2b6:	a6 37       	cpi	r26, 0x76	; 118
     2b8:	b1 07       	cpc	r27, r17
     2ba:	d9 f7       	brne	.-10     	; 0x2b2 <__do_copy_data+0xc>

000002bc <__do_clear_bss>:
     2bc:	17 e0       	ldi	r17, 0x07	; 7
     2be:	a6 e7       	ldi	r26, 0x76	; 118
     2c0:	b1 e0       	ldi	r27, 0x01	; 1
     2c2:	01 c0       	rjmp	.+2      	; 0x2c6 <.do_clear_bss_start>

000002c4 <.do_clear_bss_loop>:
     2c4:	1d 92       	st	X+, r1

000002c6 <.do_clear_bss_start>:
     2c6:	ae 31       	cpi	r26, 0x1E	; 30
     2c8:	b1 07       	cpc	r27, r17
     2ca:	e1 f7       	brne	.-8      	; 0x2c4 <.do_clear_bss_loop>
     2cc:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <main>
     2d0:	0c 94 12 18 	jmp	0x3024	; 0x3024 <_exit>

000002d4 <__bad_interrupt>:
     2d4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002d8 <threefish_setup>:
     2d8:	ef 91       	pop	r30
     2da:	ff 91       	pop	r31
     2dc:	2f 92       	push	r2
     2de:	3f 92       	push	r3
     2e0:	4f 92       	push	r4
     2e2:	5f 92       	push	r5
     2e4:	6f 92       	push	r6
     2e6:	7f 92       	push	r7
     2e8:	8f 92       	push	r8
     2ea:	9f 92       	push	r9
     2ec:	af 92       	push	r10
     2ee:	bf 92       	push	r11
     2f0:	cf 92       	push	r12
     2f2:	df 92       	push	r13
     2f4:	ef 92       	push	r14
     2f6:	ff 92       	push	r15
     2f8:	0f 93       	push	r16
     2fa:	1f 93       	push	r17
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	df b7       	in	r29, 0x3f	; 63
     302:	d7 fb       	bst	r29, 7
     304:	f8 94       	cli
     306:	ad b7       	in	r26, 0x3d	; 61
     308:	be b7       	in	r27, 0x3e	; 62
     30a:	9e bf       	out	0x3e, r25	; 62
     30c:	87 e0       	ldi	r24, 0x07	; 7
     30e:	8d bf       	out	0x3d, r24	; 61
     310:	bf 93       	push	r27
     312:	af 93       	push	r26
     314:	ff 93       	push	r31
     316:	ef 93       	push	r30
     318:	55 96       	adiw	r26, 0x15	; 21
     31a:	cd 91       	ld	r28, X+
     31c:	dc 91       	ld	r29, X
     31e:	68 96       	adiw	r28, 0x18	; 24
     320:	7a 90       	ld	r7, -Y
     322:	6a 90       	ld	r6, -Y
     324:	5a 90       	ld	r5, -Y
     326:	4a 90       	ld	r4, -Y
     328:	3a 90       	ld	r3, -Y
     32a:	2a 90       	ld	r2, -Y
     32c:	1a 90       	ld	r1, -Y
     32e:	0a 90       	ld	r0, -Y
     330:	fa 91       	ld	r31, -Y
     332:	ea 91       	ld	r30, -Y
     334:	e0 93 e6 01 	sts	0x01E6, r30
     338:	f0 93 e8 01 	sts	0x01E8, r31
     33c:	fe 01       	movw	r30, r28
     33e:	d2 91       	ld	r29, -Z
     340:	c2 91       	ld	r28, -Z
     342:	b2 91       	ld	r27, -Z
     344:	a2 91       	ld	r26, -Z
     346:	92 91       	ld	r25, -Z
     348:	82 91       	ld	r24, -Z
     34a:	80 93 e7 01 	sts	0x01E7, r24
     34e:	8f e3       	ldi	r24, 0x3F	; 63
     350:	8d bf       	out	0x3d, r24	; 61
     352:	7f 93       	push	r23
     354:	6f 93       	push	r22
     356:	5f 93       	push	r21
     358:	4f 93       	push	r20
     35a:	3f 93       	push	r19
     35c:	2f 93       	push	r18
     35e:	1f 93       	push	r17
     360:	0f 93       	push	r16
     362:	ff 92       	push	r15
     364:	ef 92       	push	r14
     366:	df 92       	push	r13
     368:	cf 92       	push	r12
     36a:	bf 92       	push	r11
     36c:	af 92       	push	r10
     36e:	9f 92       	push	r9
     370:	8f 92       	push	r8
     372:	08 25       	eor	r16, r8
     374:	19 25       	eor	r17, r9
     376:	2a 25       	eor	r18, r10
     378:	3b 25       	eor	r19, r11
     37a:	4c 25       	eor	r20, r12
     37c:	5d 25       	eor	r21, r13
     37e:	6e 25       	eor	r22, r14
     380:	7f 25       	eor	r23, r15
     382:	70 96       	adiw	r30, 0x10	; 16
     384:	81 90       	ld	r8, Z+
     386:	91 90       	ld	r9, Z+
     388:	a1 90       	ld	r10, Z+
     38a:	b1 90       	ld	r11, Z+
     38c:	c1 90       	ld	r12, Z+
     38e:	d1 90       	ld	r13, Z+
     390:	e1 90       	ld	r14, Z+
     392:	f1 90       	ld	r15, Z+
     394:	87 e4       	ldi	r24, 0x47	; 71
     396:	8d bf       	out	0x3d, r24	; 61
     398:	7f 93       	push	r23
     39a:	6f 93       	push	r22
     39c:	5f 93       	push	r21
     39e:	4f 93       	push	r20
     3a0:	3f 93       	push	r19
     3a2:	2f 93       	push	r18
     3a4:	1f 93       	push	r17
     3a6:	0f 93       	push	r16
     3a8:	05 e5       	ldi	r16, 0x55	; 85
     3aa:	15 e5       	ldi	r17, 0x55	; 85
     3ac:	98 01       	movw	r18, r16
     3ae:	a8 01       	movw	r20, r16
     3b0:	b8 01       	movw	r22, r16
     3b2:	87 e0       	ldi	r24, 0x07	; 7
     3b4:	8d bf       	out	0x3d, r24	; 61
     3b6:	8f 91       	pop	r24
     3b8:	08 27       	eor	r16, r24
     3ba:	8f 91       	pop	r24
     3bc:	18 27       	eor	r17, r24
     3be:	8f 91       	pop	r24
     3c0:	28 27       	eor	r18, r24
     3c2:	8f 91       	pop	r24
     3c4:	38 27       	eor	r19, r24
     3c6:	8f 91       	pop	r24
     3c8:	48 27       	eor	r20, r24
     3ca:	8f 91       	pop	r24
     3cc:	58 27       	eor	r21, r24
     3ce:	8f 91       	pop	r24
     3d0:	68 27       	eor	r22, r24
     3d2:	8f 91       	pop	r24
     3d4:	78 27       	eor	r23, r24
     3d6:	8f 91       	pop	r24
     3d8:	08 27       	eor	r16, r24
     3da:	8f 91       	pop	r24
     3dc:	18 27       	eor	r17, r24
     3de:	8f 91       	pop	r24
     3e0:	28 27       	eor	r18, r24
     3e2:	8f 91       	pop	r24
     3e4:	38 27       	eor	r19, r24
     3e6:	8f 91       	pop	r24
     3e8:	48 27       	eor	r20, r24
     3ea:	8f 91       	pop	r24
     3ec:	58 27       	eor	r21, r24
     3ee:	8f 91       	pop	r24
     3f0:	68 27       	eor	r22, r24
     3f2:	8f 91       	pop	r24
     3f4:	78 27       	eor	r23, r24
     3f6:	8f 91       	pop	r24
     3f8:	08 27       	eor	r16, r24
     3fa:	8f 91       	pop	r24
     3fc:	18 27       	eor	r17, r24
     3fe:	8f 91       	pop	r24
     400:	28 27       	eor	r18, r24
     402:	8f 91       	pop	r24
     404:	38 27       	eor	r19, r24
     406:	8f 91       	pop	r24
     408:	48 27       	eor	r20, r24
     40a:	8f 91       	pop	r24
     40c:	58 27       	eor	r21, r24
     40e:	8f 91       	pop	r24
     410:	68 27       	eor	r22, r24
     412:	8f 91       	pop	r24
     414:	78 27       	eor	r23, r24
     416:	8f 91       	pop	r24
     418:	08 27       	eor	r16, r24
     41a:	8f 91       	pop	r24
     41c:	18 27       	eor	r17, r24
     41e:	8f 91       	pop	r24
     420:	28 27       	eor	r18, r24
     422:	8f 91       	pop	r24
     424:	38 27       	eor	r19, r24
     426:	8f 91       	pop	r24
     428:	48 27       	eor	r20, r24
     42a:	8f 91       	pop	r24
     42c:	58 27       	eor	r21, r24
     42e:	8f 91       	pop	r24
     430:	68 27       	eor	r22, r24
     432:	8f 91       	pop	r24
     434:	78 27       	eor	r23, r24
     436:	78 97       	sbiw	r30, 0x18	; 24
     438:	8f e2       	ldi	r24, 0x2F	; 47
     43a:	8d bf       	out	0x3d, r24	; 61
     43c:	82 91       	ld	r24, -Z
     43e:	7f 93       	push	r23
     440:	78 2f       	mov	r23, r24
     442:	82 91       	ld	r24, -Z
     444:	6f 93       	push	r22
     446:	68 2f       	mov	r22, r24
     448:	82 91       	ld	r24, -Z
     44a:	5f 93       	push	r21
     44c:	58 2f       	mov	r21, r24
     44e:	82 91       	ld	r24, -Z
     450:	4f 93       	push	r20
     452:	48 2f       	mov	r20, r24
     454:	82 91       	ld	r24, -Z
     456:	3f 93       	push	r19
     458:	38 2f       	mov	r19, r24
     45a:	82 91       	ld	r24, -Z
     45c:	2f 93       	push	r18
     45e:	28 2f       	mov	r18, r24
     460:	82 91       	ld	r24, -Z
     462:	1f 93       	push	r17
     464:	18 2f       	mov	r17, r24
     466:	82 91       	ld	r24, -Z
     468:	0f 93       	push	r16
     46a:	08 2f       	mov	r16, r24
     46c:	e0 91 e6 01 	lds	r30, 0x01E6
     470:	80 91 e7 01 	lds	r24, 0x01E7
     474:	f3 e0       	ldi	r31, 0x03	; 3
     476:	fd bf       	out	0x3d, r31	; 61
     478:	08 95       	ret

0000047a <threefish_finish>:
     47a:	00 91 e8 01 	lds	r16, 0x01E8
     47e:	e0 93 e6 01 	sts	0x01E6, r30
     482:	f0 93 e8 01 	sts	0x01E8, r31
     486:	80 93 e7 01 	sts	0x01E7, r24
     48a:	f5 e0       	ldi	r31, 0x05	; 5
     48c:	fd bf       	out	0x3d, r31	; 61
     48e:	ef 91       	pop	r30
     490:	ff 91       	pop	r31
     492:	77 96       	adiw	r30, 0x17	; 23
     494:	81 91       	ld	r24, Z+
     496:	f0 81       	ld	r31, Z
     498:	e8 2f       	mov	r30, r24
     49a:	80 91 e7 01 	lds	r24, 0x01E7
     49e:	01 93       	st	Z+, r16
     4a0:	11 93       	st	Z+, r17
     4a2:	21 93       	st	Z+, r18
     4a4:	31 93       	st	Z+, r19
     4a6:	41 93       	st	Z+, r20
     4a8:	51 93       	st	Z+, r21
     4aa:	61 93       	st	Z+, r22
     4ac:	71 93       	st	Z+, r23
     4ae:	81 93       	st	Z+, r24
     4b0:	91 93       	st	Z+, r25
     4b2:	a1 93       	st	Z+, r26
     4b4:	b1 93       	st	Z+, r27
     4b6:	c1 93       	st	Z+, r28
     4b8:	d1 93       	st	Z+, r29
     4ba:	c0 91 e6 01 	lds	r28, 0x01E6
     4be:	d0 91 e8 01 	lds	r29, 0x01E8
     4c2:	c1 93       	st	Z+, r28
     4c4:	d1 93       	st	Z+, r29
     4c6:	01 92       	st	Z+, r0
     4c8:	11 92       	st	Z+, r1
     4ca:	21 92       	st	Z+, r2
     4cc:	31 92       	st	Z+, r3
     4ce:	41 92       	st	Z+, r4
     4d0:	51 92       	st	Z+, r5
     4d2:	61 92       	st	Z+, r6
     4d4:	71 92       	st	Z+, r7
     4d6:	81 92       	st	Z+, r8
     4d8:	91 92       	st	Z+, r9
     4da:	a1 92       	st	Z+, r10
     4dc:	b1 92       	st	Z+, r11
     4de:	c1 92       	st	Z+, r12
     4e0:	d1 92       	st	Z+, r13
     4e2:	e1 92       	st	Z+, r14
     4e4:	f1 92       	st	Z+, r15
     4e6:	05 e0       	ldi	r16, 0x05	; 5
     4e8:	0d bf       	out	0x3d, r16	; 61
     4ea:	af 91       	pop	r26
     4ec:	bf 91       	pop	r27
     4ee:	ad bf       	out	0x3d, r26	; 61
     4f0:	be bf       	out	0x3e, r27	; 62
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	1f 91       	pop	r17
     4f8:	0f 91       	pop	r16
     4fa:	ff 90       	pop	r15
     4fc:	ef 90       	pop	r14
     4fe:	df 90       	pop	r13
     500:	cf 90       	pop	r12
     502:	bf 90       	pop	r11
     504:	af 90       	pop	r10
     506:	9f 90       	pop	r9
     508:	8f 90       	pop	r8
     50a:	7f 90       	pop	r7
     50c:	6f 90       	pop	r6
     50e:	5f 90       	pop	r5
     510:	4f 90       	pop	r4
     512:	3f 90       	pop	r3
     514:	2f 90       	pop	r2
     516:	11 24       	eor	r1, r1
     518:	0e f4       	brtc	.+2      	; 0x51c <threefish_finish+0xa2>
     51a:	78 94       	sei
     51c:	08 95       	ret

0000051e <threefish_256_dec_8threefish_rounds>:
     51e:	f0 91 e7 01 	lds	r31, 0x01E7
     522:	fd bf       	out	0x3d, r31	; 61
     524:	ff 91       	pop	r31
     526:	0f 1b       	sub	r16, r31
     528:	ff 91       	pop	r31
     52a:	1f 0b       	sbc	r17, r31
     52c:	ff 91       	pop	r31
     52e:	2f 0b       	sbc	r18, r31
     530:	ff 91       	pop	r31
     532:	3f 0b       	sbc	r19, r31
     534:	ff 91       	pop	r31
     536:	4f 0b       	sbc	r20, r31
     538:	ff 91       	pop	r31
     53a:	5f 0b       	sbc	r21, r31
     53c:	ff 91       	pop	r31
     53e:	6f 0b       	sbc	r22, r31
     540:	ff 91       	pop	r31
     542:	7f 0b       	sbc	r23, r31
     544:	f0 91 e8 01 	lds	r31, 0x01E8
     548:	00 93 e8 01 	sts	0x01E8, r16
     54c:	0d b7       	in	r16, 0x3d	; 61
     54e:	0f 32       	cpi	r16, 0x2F	; 47
     550:	11 f4       	brne	.+4      	; 0x556 <threefish_256_dec_8threefish_rounds+0x38>
     552:	07 e0       	ldi	r16, 0x07	; 7
     554:	0d bf       	out	0x3d, r16	; 61
     556:	0f 91       	pop	r16
     558:	80 1b       	sub	r24, r16
     55a:	0f 91       	pop	r16
     55c:	90 0b       	sbc	r25, r16
     55e:	0f 91       	pop	r16
     560:	a0 0b       	sbc	r26, r16
     562:	0f 91       	pop	r16
     564:	b0 0b       	sbc	r27, r16
     566:	0f 91       	pop	r16
     568:	c0 0b       	sbc	r28, r16
     56a:	0f 91       	pop	r16
     56c:	d0 0b       	sbc	r29, r16
     56e:	0f 91       	pop	r16
     570:	e0 0b       	sbc	r30, r16
     572:	0f 91       	pop	r16
     574:	f0 0b       	sbc	r31, r16
     576:	0d b7       	in	r16, 0x3d	; 61
     578:	0f 32       	cpi	r16, 0x2F	; 47
     57a:	11 f4       	brne	.+4      	; 0x580 <threefish_256_dec_8threefish_rounds+0x62>
     57c:	07 e0       	ldi	r16, 0x07	; 7
     57e:	0d bf       	out	0x3d, r16	; 61
     580:	0f 91       	pop	r16
     582:	00 1a       	sub	r0, r16
     584:	0f 91       	pop	r16
     586:	10 0a       	sbc	r1, r16
     588:	0f 91       	pop	r16
     58a:	20 0a       	sbc	r2, r16
     58c:	0f 91       	pop	r16
     58e:	30 0a       	sbc	r3, r16
     590:	0f 91       	pop	r16
     592:	40 0a       	sbc	r4, r16
     594:	0f 91       	pop	r16
     596:	50 0a       	sbc	r5, r16
     598:	0f 91       	pop	r16
     59a:	60 0a       	sbc	r6, r16
     59c:	0f 91       	pop	r16
     59e:	70 0a       	sbc	r7, r16
     5a0:	0d b7       	in	r16, 0x3d	; 61
     5a2:	0f 32       	cpi	r16, 0x2F	; 47
     5a4:	11 f4       	brne	.+4      	; 0x5aa <threefish_256_dec_8threefish_rounds+0x8c>
     5a6:	07 e0       	ldi	r16, 0x07	; 7
     5a8:	0d bf       	out	0x3d, r16	; 61
     5aa:	0f 91       	pop	r16
     5ac:	80 1a       	sub	r8, r16
     5ae:	0f 91       	pop	r16
     5b0:	90 0a       	sbc	r9, r16
     5b2:	0f 91       	pop	r16
     5b4:	a0 0a       	sbc	r10, r16
     5b6:	0f 91       	pop	r16
     5b8:	b0 0a       	sbc	r11, r16
     5ba:	0f 91       	pop	r16
     5bc:	c0 0a       	sbc	r12, r16
     5be:	0f 91       	pop	r16
     5c0:	d0 0a       	sbc	r13, r16
     5c2:	0f 91       	pop	r16
     5c4:	e0 0a       	sbc	r14, r16
     5c6:	0f 91       	pop	r16
     5c8:	f0 0a       	sbc	r15, r16
     5ca:	0d b7       	in	r16, 0x3d	; 61
     5cc:	0f 32       	cpi	r16, 0x2F	; 47
     5ce:	09 f4       	brne	.+2      	; 0x5d2 <threefish_256_dec_8threefish_rounds+0xb4>
     5d0:	07 e0       	ldi	r16, 0x07	; 7
     5d2:	00 93 e7 01 	sts	0x01E7, r16
     5d6:	00 91 e9 01 	lds	r16, 0x01E9
     5da:	0d bf       	out	0x3d, r16	; 61
     5dc:	0f 91       	pop	r16
     5de:	80 1b       	sub	r24, r16
     5e0:	0f 91       	pop	r16
     5e2:	90 0b       	sbc	r25, r16
     5e4:	0f 91       	pop	r16
     5e6:	a0 0b       	sbc	r26, r16
     5e8:	0f 91       	pop	r16
     5ea:	b0 0b       	sbc	r27, r16
     5ec:	0f 91       	pop	r16
     5ee:	c0 0b       	sbc	r28, r16
     5f0:	0f 91       	pop	r16
     5f2:	d0 0b       	sbc	r29, r16
     5f4:	0f 91       	pop	r16
     5f6:	e0 0b       	sbc	r30, r16
     5f8:	0f 91       	pop	r16
     5fa:	f0 0b       	sbc	r31, r16
     5fc:	0d b7       	in	r16, 0x3d	; 61
     5fe:	07 34       	cpi	r16, 0x47	; 71
     600:	11 f4       	brne	.+4      	; 0x606 <threefish_256_dec_8threefish_rounds+0xe8>
     602:	0f e2       	ldi	r16, 0x2F	; 47
     604:	0d bf       	out	0x3d, r16	; 61
     606:	0f 91       	pop	r16
     608:	00 1a       	sub	r0, r16
     60a:	0f 91       	pop	r16
     60c:	10 0a       	sbc	r1, r16
     60e:	0f 91       	pop	r16
     610:	20 0a       	sbc	r2, r16
     612:	0f 91       	pop	r16
     614:	30 0a       	sbc	r3, r16
     616:	0f 91       	pop	r16
     618:	40 0a       	sbc	r4, r16
     61a:	0f 91       	pop	r16
     61c:	50 0a       	sbc	r5, r16
     61e:	0f 91       	pop	r16
     620:	60 0a       	sbc	r6, r16
     622:	0f 91       	pop	r16
     624:	70 0a       	sbc	r7, r16
     626:	0d b7       	in	r16, 0x3d	; 61
     628:	07 34       	cpi	r16, 0x47	; 71
     62a:	09 f4       	brne	.+2      	; 0x62e <threefish_256_dec_8threefish_rounds+0x110>
     62c:	0f e2       	ldi	r16, 0x2F	; 47
     62e:	00 93 e9 01 	sts	0x01E9, r16
     632:	00 91 e6 01 	lds	r16, 0x01E6
     636:	0a 95       	dec	r16
     638:	00 93 e6 01 	sts	0x01E6, r16
     63c:	80 1a       	sub	r8, r16
     63e:	00 27       	eor	r16, r16
     640:	90 0a       	sbc	r9, r16
     642:	a0 0a       	sbc	r10, r16
     644:	b0 0a       	sbc	r11, r16
     646:	c0 0a       	sbc	r12, r16
     648:	d0 0a       	sbc	r13, r16
     64a:	e0 0a       	sbc	r14, r16
     64c:	f0 0a       	sbc	r15, r16
     64e:	00 91 e8 01 	lds	r16, 0x01E8
     652:	0e f4       	brtc	.+2      	; 0x656 <threefish_256_dec_8threefish_rounds+0x138>
     654:	78 94       	sei
     656:	80 26       	eor	r8, r16
     658:	91 26       	eor	r9, r17
     65a:	a2 26       	eor	r10, r18
     65c:	b3 26       	eor	r11, r19
     65e:	c4 26       	eor	r12, r20
     660:	d5 26       	eor	r13, r21
     662:	e6 26       	eor	r14, r22
     664:	f7 26       	eor	r15, r23
     666:	0c 19       	sub	r16, r12
     668:	1d 09       	sbc	r17, r13
     66a:	2e 09       	sbc	r18, r14
     66c:	3f 09       	sbc	r19, r15
     66e:	48 09       	sbc	r20, r8
     670:	59 09       	sbc	r21, r9
     672:	6a 09       	sbc	r22, r10
     674:	7b 09       	sbc	r23, r11
     676:	80 25       	eor	r24, r0
     678:	91 25       	eor	r25, r1
     67a:	a2 25       	eor	r26, r2
     67c:	b3 25       	eor	r27, r3
     67e:	c4 25       	eor	r28, r4
     680:	d5 25       	eor	r29, r5
     682:	e6 25       	eor	r30, r6
     684:	f7 25       	eor	r31, r7
     686:	0c 1a       	sub	r0, r28
     688:	1d 0a       	sbc	r1, r29
     68a:	2e 0a       	sbc	r2, r30
     68c:	3f 0a       	sbc	r3, r31
     68e:	48 0a       	sbc	r4, r24
     690:	59 0a       	sbc	r5, r25
     692:	6a 0a       	sbc	r6, r26
     694:	7b 0a       	sbc	r7, r27
     696:	c0 27       	eor	r28, r16
     698:	d1 27       	eor	r29, r17
     69a:	e2 27       	eor	r30, r18
     69c:	f3 27       	eor	r31, r19
     69e:	84 27       	eor	r24, r20
     6a0:	95 27       	eor	r25, r21
     6a2:	a6 27       	eor	r26, r22
     6a4:	b7 27       	eor	r27, r23
     6a6:	b0 fb       	bst	r27, 0
     6a8:	a6 95       	lsr	r26
     6aa:	97 95       	ror	r25
     6ac:	87 95       	ror	r24
     6ae:	f7 95       	ror	r31
     6b0:	e7 95       	ror	r30
     6b2:	d7 95       	ror	r29
     6b4:	c7 95       	ror	r28
     6b6:	b7 95       	ror	r27
     6b8:	a7 f9       	bld	r26, 7
     6ba:	b0 fb       	bst	r27, 0
     6bc:	a6 95       	lsr	r26
     6be:	97 95       	ror	r25
     6c0:	87 95       	ror	r24
     6c2:	f7 95       	ror	r31
     6c4:	e7 95       	ror	r30
     6c6:	d7 95       	ror	r29
     6c8:	c7 95       	ror	r28
     6ca:	b7 95       	ror	r27
     6cc:	a7 f9       	bld	r26, 7
     6ce:	0b 1b       	sub	r16, r27
     6d0:	1c 0b       	sbc	r17, r28
     6d2:	2d 0b       	sbc	r18, r29
     6d4:	3e 0b       	sbc	r19, r30
     6d6:	4f 0b       	sbc	r20, r31
     6d8:	58 0b       	sbc	r21, r24
     6da:	69 0b       	sbc	r22, r25
     6dc:	7a 0b       	sbc	r23, r26
     6de:	c0 24       	eor	r12, r0
     6e0:	d1 24       	eor	r13, r1
     6e2:	e2 24       	eor	r14, r2
     6e4:	f3 24       	eor	r15, r3
     6e6:	84 24       	eor	r8, r4
     6e8:	95 24       	eor	r9, r5
     6ea:	a6 24       	eor	r10, r6
     6ec:	b7 24       	eor	r11, r7
     6ee:	e7 fa       	bst	r14, 7
     6f0:	ff 0c       	add	r15, r15
     6f2:	88 1c       	adc	r8, r8
     6f4:	99 1c       	adc	r9, r9
     6f6:	aa 1c       	adc	r10, r10
     6f8:	bb 1c       	adc	r11, r11
     6fa:	cc 1c       	adc	r12, r12
     6fc:	dd 1c       	adc	r13, r13
     6fe:	ee 1c       	adc	r14, r14
     700:	f0 f8       	bld	r15, 0
     702:	e7 fa       	bst	r14, 7
     704:	ff 0c       	add	r15, r15
     706:	88 1c       	adc	r8, r8
     708:	99 1c       	adc	r9, r9
     70a:	aa 1c       	adc	r10, r10
     70c:	bb 1c       	adc	r11, r11
     70e:	cc 1c       	adc	r12, r12
     710:	dd 1c       	adc	r13, r13
     712:	ee 1c       	adc	r14, r14
     714:	f0 f8       	bld	r15, 0
     716:	0f 18       	sub	r0, r15
     718:	18 08       	sbc	r1, r8
     71a:	29 08       	sbc	r2, r9
     71c:	3a 08       	sbc	r3, r10
     71e:	4b 08       	sbc	r4, r11
     720:	5c 08       	sbc	r5, r12
     722:	6d 08       	sbc	r6, r13
     724:	7e 08       	sbc	r7, r14
     726:	f0 26       	eor	r15, r16
     728:	81 26       	eor	r8, r17
     72a:	92 26       	eor	r9, r18
     72c:	a3 26       	eor	r10, r19
     72e:	b4 26       	eor	r11, r20
     730:	c5 26       	eor	r12, r21
     732:	d6 26       	eor	r13, r22
     734:	e7 26       	eor	r14, r23
     736:	c7 fa       	bst	r12, 7
     738:	dd 0c       	add	r13, r13
     73a:	ee 1c       	adc	r14, r14
     73c:	ff 1c       	adc	r15, r15
     73e:	88 1c       	adc	r8, r8
     740:	99 1c       	adc	r9, r9
     742:	aa 1c       	adc	r10, r10
     744:	bb 1c       	adc	r11, r11
     746:	cc 1c       	adc	r12, r12
     748:	d0 f8       	bld	r13, 0
     74a:	c7 fa       	bst	r12, 7
     74c:	dd 0c       	add	r13, r13
     74e:	ee 1c       	adc	r14, r14
     750:	ff 1c       	adc	r15, r15
     752:	88 1c       	adc	r8, r8
     754:	99 1c       	adc	r9, r9
     756:	aa 1c       	adc	r10, r10
     758:	bb 1c       	adc	r11, r11
     75a:	cc 1c       	adc	r12, r12
     75c:	d0 f8       	bld	r13, 0
     75e:	0d 19       	sub	r16, r13
     760:	1e 09       	sbc	r17, r14
     762:	2f 09       	sbc	r18, r15
     764:	38 09       	sbc	r19, r8
     766:	49 09       	sbc	r20, r9
     768:	5a 09       	sbc	r21, r10
     76a:	6b 09       	sbc	r22, r11
     76c:	7c 09       	sbc	r23, r12
     76e:	b0 25       	eor	r27, r0
     770:	c1 25       	eor	r28, r1
     772:	d2 25       	eor	r29, r2
     774:	e3 25       	eor	r30, r3
     776:	f4 25       	eor	r31, r4
     778:	85 25       	eor	r24, r5
     77a:	96 25       	eor	r25, r6
     77c:	a7 25       	eor	r26, r7
     77e:	c0 fb       	bst	r28, 0
     780:	b6 95       	lsr	r27
     782:	a7 95       	ror	r26
     784:	97 95       	ror	r25
     786:	87 95       	ror	r24
     788:	f7 95       	ror	r31
     78a:	e7 95       	ror	r30
     78c:	d7 95       	ror	r29
     78e:	c7 95       	ror	r28
     790:	b7 f9       	bld	r27, 7
     792:	c0 fb       	bst	r28, 0
     794:	b6 95       	lsr	r27
     796:	a7 95       	ror	r26
     798:	97 95       	ror	r25
     79a:	87 95       	ror	r24
     79c:	f7 95       	ror	r31
     79e:	e7 95       	ror	r30
     7a0:	d7 95       	ror	r29
     7a2:	c7 95       	ror	r28
     7a4:	b7 f9       	bld	r27, 7
     7a6:	c0 fb       	bst	r28, 0
     7a8:	b6 95       	lsr	r27
     7aa:	a7 95       	ror	r26
     7ac:	97 95       	ror	r25
     7ae:	87 95       	ror	r24
     7b0:	f7 95       	ror	r31
     7b2:	e7 95       	ror	r30
     7b4:	d7 95       	ror	r29
     7b6:	c7 95       	ror	r28
     7b8:	b7 f9       	bld	r27, 7
     7ba:	c0 fb       	bst	r28, 0
     7bc:	b6 95       	lsr	r27
     7be:	a7 95       	ror	r26
     7c0:	97 95       	ror	r25
     7c2:	87 95       	ror	r24
     7c4:	f7 95       	ror	r31
     7c6:	e7 95       	ror	r30
     7c8:	d7 95       	ror	r29
     7ca:	c7 95       	ror	r28
     7cc:	b7 f9       	bld	r27, 7
     7ce:	0c 1a       	sub	r0, r28
     7d0:	1d 0a       	sbc	r1, r29
     7d2:	2e 0a       	sbc	r2, r30
     7d4:	3f 0a       	sbc	r3, r31
     7d6:	48 0a       	sbc	r4, r24
     7d8:	59 0a       	sbc	r5, r25
     7da:	6a 0a       	sbc	r6, r26
     7dc:	7b 0a       	sbc	r7, r27
     7de:	c0 27       	eor	r28, r16
     7e0:	d1 27       	eor	r29, r17
     7e2:	e2 27       	eor	r30, r18
     7e4:	f3 27       	eor	r31, r19
     7e6:	84 27       	eor	r24, r20
     7e8:	95 27       	eor	r25, r21
     7ea:	a6 27       	eor	r26, r22
     7ec:	b7 27       	eor	r27, r23
     7ee:	f0 fb       	bst	r31, 0
     7f0:	e6 95       	lsr	r30
     7f2:	d7 95       	ror	r29
     7f4:	c7 95       	ror	r28
     7f6:	b7 95       	ror	r27
     7f8:	a7 95       	ror	r26
     7fa:	97 95       	ror	r25
     7fc:	87 95       	ror	r24
     7fe:	f7 95       	ror	r31
     800:	e7 f9       	bld	r30, 7
     802:	0f 1b       	sub	r16, r31
     804:	18 0b       	sbc	r17, r24
     806:	29 0b       	sbc	r18, r25
     808:	3a 0b       	sbc	r19, r26
     80a:	4b 0b       	sbc	r20, r27
     80c:	5c 0b       	sbc	r21, r28
     80e:	6d 0b       	sbc	r22, r29
     810:	7e 0b       	sbc	r23, r30
     812:	d0 24       	eor	r13, r0
     814:	e1 24       	eor	r14, r1
     816:	f2 24       	eor	r15, r2
     818:	83 24       	eor	r8, r3
     81a:	94 24       	eor	r9, r4
     81c:	a5 24       	eor	r10, r5
     81e:	b6 24       	eor	r11, r6
     820:	c7 24       	eor	r12, r7
     822:	90 fa       	bst	r9, 0
     824:	86 94       	lsr	r8
     826:	f7 94       	ror	r15
     828:	e7 94       	ror	r14
     82a:	d7 94       	ror	r13
     82c:	c7 94       	ror	r12
     82e:	b7 94       	ror	r11
     830:	a7 94       	ror	r10
     832:	97 94       	ror	r9
     834:	87 f8       	bld	r8, 7
     836:	09 18       	sub	r0, r9
     838:	1a 08       	sbc	r1, r10
     83a:	2b 08       	sbc	r2, r11
     83c:	3c 08       	sbc	r3, r12
     83e:	4d 08       	sbc	r4, r13
     840:	5e 08       	sbc	r5, r14
     842:	6f 08       	sbc	r6, r15
     844:	78 08       	sbc	r7, r8
     846:	f0 93 e8 01 	sts	0x01E8, r31
     84a:	ff b7       	in	r31, 0x3f	; 63
     84c:	f7 fb       	bst	r31, 7
     84e:	f8 94       	cli
     850:	f0 91 e7 01 	lds	r31, 0x01E7
     854:	fd bf       	out	0x3d, r31	; 61
     856:	ff 91       	pop	r31
     858:	0f 1b       	sub	r16, r31
     85a:	ff 91       	pop	r31
     85c:	1f 0b       	sbc	r17, r31
     85e:	ff 91       	pop	r31
     860:	2f 0b       	sbc	r18, r31
     862:	ff 91       	pop	r31
     864:	3f 0b       	sbc	r19, r31
     866:	ff 91       	pop	r31
     868:	4f 0b       	sbc	r20, r31
     86a:	ff 91       	pop	r31
     86c:	5f 0b       	sbc	r21, r31
     86e:	ff 91       	pop	r31
     870:	6f 0b       	sbc	r22, r31
     872:	ff 91       	pop	r31
     874:	7f 0b       	sbc	r23, r31
     876:	f0 91 e8 01 	lds	r31, 0x01E8
     87a:	00 93 e8 01 	sts	0x01E8, r16
     87e:	0d b7       	in	r16, 0x3d	; 61
     880:	0f 32       	cpi	r16, 0x2F	; 47
     882:	11 f4       	brne	.+4      	; 0x888 <threefish_256_dec_8threefish_rounds+0x36a>
     884:	07 e0       	ldi	r16, 0x07	; 7
     886:	0d bf       	out	0x3d, r16	; 61
     888:	0f 91       	pop	r16
     88a:	f0 1b       	sub	r31, r16
     88c:	0f 91       	pop	r16
     88e:	80 0b       	sbc	r24, r16
     890:	0f 91       	pop	r16
     892:	90 0b       	sbc	r25, r16
     894:	0f 91       	pop	r16
     896:	a0 0b       	sbc	r26, r16
     898:	0f 91       	pop	r16
     89a:	b0 0b       	sbc	r27, r16
     89c:	0f 91       	pop	r16
     89e:	c0 0b       	sbc	r28, r16
     8a0:	0f 91       	pop	r16
     8a2:	d0 0b       	sbc	r29, r16
     8a4:	0f 91       	pop	r16
     8a6:	e0 0b       	sbc	r30, r16
     8a8:	0d b7       	in	r16, 0x3d	; 61
     8aa:	0f 32       	cpi	r16, 0x2F	; 47
     8ac:	11 f4       	brne	.+4      	; 0x8b2 <threefish_256_dec_8threefish_rounds+0x394>
     8ae:	07 e0       	ldi	r16, 0x07	; 7
     8b0:	0d bf       	out	0x3d, r16	; 61
     8b2:	0f 91       	pop	r16
     8b4:	00 1a       	sub	r0, r16
     8b6:	0f 91       	pop	r16
     8b8:	10 0a       	sbc	r1, r16
     8ba:	0f 91       	pop	r16
     8bc:	20 0a       	sbc	r2, r16
     8be:	0f 91       	pop	r16
     8c0:	30 0a       	sbc	r3, r16
     8c2:	0f 91       	pop	r16
     8c4:	40 0a       	sbc	r4, r16
     8c6:	0f 91       	pop	r16
     8c8:	50 0a       	sbc	r5, r16
     8ca:	0f 91       	pop	r16
     8cc:	60 0a       	sbc	r6, r16
     8ce:	0f 91       	pop	r16
     8d0:	70 0a       	sbc	r7, r16
     8d2:	0d b7       	in	r16, 0x3d	; 61
     8d4:	0f 32       	cpi	r16, 0x2F	; 47
     8d6:	11 f4       	brne	.+4      	; 0x8dc <threefish_256_dec_8threefish_rounds+0x3be>
     8d8:	07 e0       	ldi	r16, 0x07	; 7
     8da:	0d bf       	out	0x3d, r16	; 61
     8dc:	0f 91       	pop	r16
     8de:	90 1a       	sub	r9, r16
     8e0:	0f 91       	pop	r16
     8e2:	a0 0a       	sbc	r10, r16
     8e4:	0f 91       	pop	r16
     8e6:	b0 0a       	sbc	r11, r16
     8e8:	0f 91       	pop	r16
     8ea:	c0 0a       	sbc	r12, r16
     8ec:	0f 91       	pop	r16
     8ee:	d0 0a       	sbc	r13, r16
     8f0:	0f 91       	pop	r16
     8f2:	e0 0a       	sbc	r14, r16
     8f4:	0f 91       	pop	r16
     8f6:	f0 0a       	sbc	r15, r16
     8f8:	0f 91       	pop	r16
     8fa:	80 0a       	sbc	r8, r16
     8fc:	0d b7       	in	r16, 0x3d	; 61
     8fe:	0f 32       	cpi	r16, 0x2F	; 47
     900:	09 f4       	brne	.+2      	; 0x904 <threefish_256_dec_8threefish_rounds+0x3e6>
     902:	07 e0       	ldi	r16, 0x07	; 7
     904:	00 93 e7 01 	sts	0x01E7, r16
     908:	00 91 e9 01 	lds	r16, 0x01E9
     90c:	0d bf       	out	0x3d, r16	; 61
     90e:	0f 91       	pop	r16
     910:	f0 1b       	sub	r31, r16
     912:	0f 91       	pop	r16
     914:	80 0b       	sbc	r24, r16
     916:	0f 91       	pop	r16
     918:	90 0b       	sbc	r25, r16
     91a:	0f 91       	pop	r16
     91c:	a0 0b       	sbc	r26, r16
     91e:	0f 91       	pop	r16
     920:	b0 0b       	sbc	r27, r16
     922:	0f 91       	pop	r16
     924:	c0 0b       	sbc	r28, r16
     926:	0f 91       	pop	r16
     928:	d0 0b       	sbc	r29, r16
     92a:	0f 91       	pop	r16
     92c:	e0 0b       	sbc	r30, r16
     92e:	0d b7       	in	r16, 0x3d	; 61
     930:	07 34       	cpi	r16, 0x47	; 71
     932:	11 f4       	brne	.+4      	; 0x938 <threefish_256_dec_8threefish_rounds+0x41a>
     934:	0f e2       	ldi	r16, 0x2F	; 47
     936:	0d bf       	out	0x3d, r16	; 61
     938:	0f 91       	pop	r16
     93a:	00 1a       	sub	r0, r16
     93c:	0f 91       	pop	r16
     93e:	10 0a       	sbc	r1, r16
     940:	0f 91       	pop	r16
     942:	20 0a       	sbc	r2, r16
     944:	0f 91       	pop	r16
     946:	30 0a       	sbc	r3, r16
     948:	0f 91       	pop	r16
     94a:	40 0a       	sbc	r4, r16
     94c:	0f 91       	pop	r16
     94e:	50 0a       	sbc	r5, r16
     950:	0f 91       	pop	r16
     952:	60 0a       	sbc	r6, r16
     954:	0f 91       	pop	r16
     956:	70 0a       	sbc	r7, r16
     958:	0d b7       	in	r16, 0x3d	; 61
     95a:	07 34       	cpi	r16, 0x47	; 71
     95c:	09 f4       	brne	.+2      	; 0x960 <threefish_256_dec_8threefish_rounds+0x442>
     95e:	0f e2       	ldi	r16, 0x2F	; 47
     960:	00 93 e9 01 	sts	0x01E9, r16
     964:	00 91 e6 01 	lds	r16, 0x01E6
     968:	0a 95       	dec	r16
     96a:	00 93 e6 01 	sts	0x01E6, r16
     96e:	90 1a       	sub	r9, r16
     970:	00 27       	eor	r16, r16
     972:	a0 0a       	sbc	r10, r16
     974:	b0 0a       	sbc	r11, r16
     976:	c0 0a       	sbc	r12, r16
     978:	d0 0a       	sbc	r13, r16
     97a:	e0 0a       	sbc	r14, r16
     97c:	f0 0a       	sbc	r15, r16
     97e:	80 0a       	sbc	r8, r16
     980:	00 91 e8 01 	lds	r16, 0x01E8
     984:	0e f4       	brtc	.+2      	; 0x988 <threefish_256_dec_8threefish_rounds+0x46a>
     986:	78 94       	sei
     988:	90 26       	eor	r9, r16
     98a:	a1 26       	eor	r10, r17
     98c:	b2 26       	eor	r11, r18
     98e:	c3 26       	eor	r12, r19
     990:	d4 26       	eor	r13, r20
     992:	e5 26       	eor	r14, r21
     994:	f6 26       	eor	r15, r22
     996:	87 26       	eor	r8, r23
     998:	97 fa       	bst	r9, 7
     99a:	aa 0c       	add	r10, r10
     99c:	bb 1c       	adc	r11, r11
     99e:	cc 1c       	adc	r12, r12
     9a0:	dd 1c       	adc	r13, r13
     9a2:	ee 1c       	adc	r14, r14
     9a4:	ff 1c       	adc	r15, r15
     9a6:	88 1c       	adc	r8, r8
     9a8:	99 1c       	adc	r9, r9
     9aa:	a0 f8       	bld	r10, 0
     9ac:	97 fa       	bst	r9, 7
     9ae:	aa 0c       	add	r10, r10
     9b0:	bb 1c       	adc	r11, r11
     9b2:	cc 1c       	adc	r12, r12
     9b4:	dd 1c       	adc	r13, r13
     9b6:	ee 1c       	adc	r14, r14
     9b8:	ff 1c       	adc	r15, r15
     9ba:	88 1c       	adc	r8, r8
     9bc:	99 1c       	adc	r9, r9
     9be:	a0 f8       	bld	r10, 0
     9c0:	97 fa       	bst	r9, 7
     9c2:	aa 0c       	add	r10, r10
     9c4:	bb 1c       	adc	r11, r11
     9c6:	cc 1c       	adc	r12, r12
     9c8:	dd 1c       	adc	r13, r13
     9ca:	ee 1c       	adc	r14, r14
     9cc:	ff 1c       	adc	r15, r15
     9ce:	88 1c       	adc	r8, r8
     9d0:	99 1c       	adc	r9, r9
     9d2:	a0 f8       	bld	r10, 0
     9d4:	0a 19       	sub	r16, r10
     9d6:	1b 09       	sbc	r17, r11
     9d8:	2c 09       	sbc	r18, r12
     9da:	3d 09       	sbc	r19, r13
     9dc:	4e 09       	sbc	r20, r14
     9de:	5f 09       	sbc	r21, r15
     9e0:	68 09       	sbc	r22, r8
     9e2:	79 09       	sbc	r23, r9
     9e4:	f0 25       	eor	r31, r0
     9e6:	81 25       	eor	r24, r1
     9e8:	92 25       	eor	r25, r2
     9ea:	a3 25       	eor	r26, r3
     9ec:	b4 25       	eor	r27, r4
     9ee:	c5 25       	eor	r28, r5
     9f0:	d6 25       	eor	r29, r6
     9f2:	e7 25       	eor	r30, r7
     9f4:	b7 fb       	bst	r27, 7
     9f6:	cc 0f       	add	r28, r28
     9f8:	dd 1f       	adc	r29, r29
     9fa:	ee 1f       	adc	r30, r30
     9fc:	ff 1f       	adc	r31, r31
     9fe:	88 1f       	adc	r24, r24
     a00:	99 1f       	adc	r25, r25
     a02:	aa 1f       	adc	r26, r26
     a04:	bb 1f       	adc	r27, r27
     a06:	c0 f9       	bld	r28, 0
     a08:	b7 fb       	bst	r27, 7
     a0a:	cc 0f       	add	r28, r28
     a0c:	dd 1f       	adc	r29, r29
     a0e:	ee 1f       	adc	r30, r30
     a10:	ff 1f       	adc	r31, r31
     a12:	88 1f       	adc	r24, r24
     a14:	99 1f       	adc	r25, r25
     a16:	aa 1f       	adc	r26, r26
     a18:	bb 1f       	adc	r27, r27
     a1a:	c0 f9       	bld	r28, 0
     a1c:	b7 fb       	bst	r27, 7
     a1e:	cc 0f       	add	r28, r28
     a20:	dd 1f       	adc	r29, r29
     a22:	ee 1f       	adc	r30, r30
     a24:	ff 1f       	adc	r31, r31
     a26:	88 1f       	adc	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	aa 1f       	adc	r26, r26
     a2c:	bb 1f       	adc	r27, r27
     a2e:	c0 f9       	bld	r28, 0
     a30:	0c 1a       	sub	r0, r28
     a32:	1d 0a       	sbc	r1, r29
     a34:	2e 0a       	sbc	r2, r30
     a36:	3f 0a       	sbc	r3, r31
     a38:	48 0a       	sbc	r4, r24
     a3a:	59 0a       	sbc	r5, r25
     a3c:	6a 0a       	sbc	r6, r26
     a3e:	7b 0a       	sbc	r7, r27
     a40:	c0 27       	eor	r28, r16
     a42:	d1 27       	eor	r29, r17
     a44:	e2 27       	eor	r30, r18
     a46:	f3 27       	eor	r31, r19
     a48:	84 27       	eor	r24, r20
     a4a:	95 27       	eor	r25, r21
     a4c:	a6 27       	eor	r26, r22
     a4e:	b7 27       	eor	r27, r23
     a50:	e7 fb       	bst	r30, 7
     a52:	ff 0f       	add	r31, r31
     a54:	88 1f       	adc	r24, r24
     a56:	99 1f       	adc	r25, r25
     a58:	aa 1f       	adc	r26, r26
     a5a:	bb 1f       	adc	r27, r27
     a5c:	cc 1f       	adc	r28, r28
     a5e:	dd 1f       	adc	r29, r29
     a60:	ee 1f       	adc	r30, r30
     a62:	f0 f9       	bld	r31, 0
     a64:	0f 1b       	sub	r16, r31
     a66:	18 0b       	sbc	r17, r24
     a68:	29 0b       	sbc	r18, r25
     a6a:	3a 0b       	sbc	r19, r26
     a6c:	4b 0b       	sbc	r20, r27
     a6e:	5c 0b       	sbc	r21, r28
     a70:	6d 0b       	sbc	r22, r29
     a72:	7e 0b       	sbc	r23, r30
     a74:	a0 24       	eor	r10, r0
     a76:	b1 24       	eor	r11, r1
     a78:	c2 24       	eor	r12, r2
     a7a:	d3 24       	eor	r13, r3
     a7c:	e4 24       	eor	r14, r4
     a7e:	f5 24       	eor	r15, r5
     a80:	86 24       	eor	r8, r6
     a82:	97 24       	eor	r9, r7
     a84:	0f 18       	sub	r0, r15
     a86:	18 08       	sbc	r1, r8
     a88:	29 08       	sbc	r2, r9
     a8a:	3a 08       	sbc	r3, r10
     a8c:	4b 08       	sbc	r4, r11
     a8e:	5c 08       	sbc	r5, r12
     a90:	6d 08       	sbc	r6, r13
     a92:	7e 08       	sbc	r7, r14
     a94:	f0 26       	eor	r15, r16
     a96:	81 26       	eor	r8, r17
     a98:	92 26       	eor	r9, r18
     a9a:	a3 26       	eor	r10, r19
     a9c:	b4 26       	eor	r11, r20
     a9e:	c5 26       	eor	r12, r21
     aa0:	d6 26       	eor	r13, r22
     aa2:	e7 26       	eor	r14, r23
     aa4:	d7 fa       	bst	r13, 7
     aa6:	ee 0c       	add	r14, r14
     aa8:	ff 1c       	adc	r15, r15
     aaa:	88 1c       	adc	r8, r8
     aac:	99 1c       	adc	r9, r9
     aae:	aa 1c       	adc	r10, r10
     ab0:	bb 1c       	adc	r11, r11
     ab2:	cc 1c       	adc	r12, r12
     ab4:	dd 1c       	adc	r13, r13
     ab6:	e0 f8       	bld	r14, 0
     ab8:	d7 fa       	bst	r13, 7
     aba:	ee 0c       	add	r14, r14
     abc:	ff 1c       	adc	r15, r15
     abe:	88 1c       	adc	r8, r8
     ac0:	99 1c       	adc	r9, r9
     ac2:	aa 1c       	adc	r10, r10
     ac4:	bb 1c       	adc	r11, r11
     ac6:	cc 1c       	adc	r12, r12
     ac8:	dd 1c       	adc	r13, r13
     aca:	e0 f8       	bld	r14, 0
     acc:	d7 fa       	bst	r13, 7
     ace:	ee 0c       	add	r14, r14
     ad0:	ff 1c       	adc	r15, r15
     ad2:	88 1c       	adc	r8, r8
     ad4:	99 1c       	adc	r9, r9
     ad6:	aa 1c       	adc	r10, r10
     ad8:	bb 1c       	adc	r11, r11
     ada:	cc 1c       	adc	r12, r12
     adc:	dd 1c       	adc	r13, r13
     ade:	e0 f8       	bld	r14, 0
     ae0:	d7 fa       	bst	r13, 7
     ae2:	ee 0c       	add	r14, r14
     ae4:	ff 1c       	adc	r15, r15
     ae6:	88 1c       	adc	r8, r8
     ae8:	99 1c       	adc	r9, r9
     aea:	aa 1c       	adc	r10, r10
     aec:	bb 1c       	adc	r11, r11
     aee:	cc 1c       	adc	r12, r12
     af0:	dd 1c       	adc	r13, r13
     af2:	e0 f8       	bld	r14, 0
     af4:	0e 19       	sub	r16, r14
     af6:	1f 09       	sbc	r17, r15
     af8:	28 09       	sbc	r18, r8
     afa:	39 09       	sbc	r19, r9
     afc:	4a 09       	sbc	r20, r10
     afe:	5b 09       	sbc	r21, r11
     b00:	6c 09       	sbc	r22, r12
     b02:	7d 09       	sbc	r23, r13
     b04:	f0 25       	eor	r31, r0
     b06:	81 25       	eor	r24, r1
     b08:	92 25       	eor	r25, r2
     b0a:	a3 25       	eor	r26, r3
     b0c:	b4 25       	eor	r27, r4
     b0e:	c5 25       	eor	r28, r5
     b10:	d6 25       	eor	r29, r6
     b12:	e7 25       	eor	r30, r7
     b14:	e0 fb       	bst	r30, 0
     b16:	d6 95       	lsr	r29
     b18:	c7 95       	ror	r28
     b1a:	b7 95       	ror	r27
     b1c:	a7 95       	ror	r26
     b1e:	97 95       	ror	r25
     b20:	87 95       	ror	r24
     b22:	f7 95       	ror	r31
     b24:	e7 95       	ror	r30
     b26:	d7 f9       	bld	r29, 7
     b28:	0e 1a       	sub	r0, r30
     b2a:	1f 0a       	sbc	r1, r31
     b2c:	28 0a       	sbc	r2, r24
     b2e:	39 0a       	sbc	r3, r25
     b30:	4a 0a       	sbc	r4, r26
     b32:	5b 0a       	sbc	r5, r27
     b34:	6c 0a       	sbc	r6, r28
     b36:	7d 0a       	sbc	r7, r29
     b38:	e0 27       	eor	r30, r16
     b3a:	f1 27       	eor	r31, r17
     b3c:	82 27       	eor	r24, r18
     b3e:	93 27       	eor	r25, r19
     b40:	a4 27       	eor	r26, r20
     b42:	b5 27       	eor	r27, r21
     b44:	c6 27       	eor	r28, r22
     b46:	d7 27       	eor	r29, r23
     b48:	f7 fb       	bst	r31, 7
     b4a:	88 0f       	add	r24, r24
     b4c:	99 1f       	adc	r25, r25
     b4e:	aa 1f       	adc	r26, r26
     b50:	bb 1f       	adc	r27, r27
     b52:	cc 1f       	adc	r28, r28
     b54:	dd 1f       	adc	r29, r29
     b56:	ee 1f       	adc	r30, r30
     b58:	ff 1f       	adc	r31, r31
     b5a:	80 f9       	bld	r24, 0
     b5c:	f7 fb       	bst	r31, 7
     b5e:	88 0f       	add	r24, r24
     b60:	99 1f       	adc	r25, r25
     b62:	aa 1f       	adc	r26, r26
     b64:	bb 1f       	adc	r27, r27
     b66:	cc 1f       	adc	r28, r28
     b68:	dd 1f       	adc	r29, r29
     b6a:	ee 1f       	adc	r30, r30
     b6c:	ff 1f       	adc	r31, r31
     b6e:	80 f9       	bld	r24, 0
     b70:	08 1b       	sub	r16, r24
     b72:	19 0b       	sbc	r17, r25
     b74:	2a 0b       	sbc	r18, r26
     b76:	3b 0b       	sbc	r19, r27
     b78:	4c 0b       	sbc	r20, r28
     b7a:	5d 0b       	sbc	r21, r29
     b7c:	6e 0b       	sbc	r22, r30
     b7e:	7f 0b       	sbc	r23, r31
     b80:	e0 24       	eor	r14, r0
     b82:	f1 24       	eor	r15, r1
     b84:	82 24       	eor	r8, r2
     b86:	93 24       	eor	r9, r3
     b88:	a4 24       	eor	r10, r4
     b8a:	b5 24       	eor	r11, r5
     b8c:	c6 24       	eor	r12, r6
     b8e:	d7 24       	eor	r13, r7
     b90:	08 18       	sub	r0, r8
     b92:	19 08       	sbc	r1, r9
     b94:	2a 08       	sbc	r2, r10
     b96:	3b 08       	sbc	r3, r11
     b98:	4c 08       	sbc	r4, r12
     b9a:	5d 08       	sbc	r5, r13
     b9c:	6e 08       	sbc	r6, r14
     b9e:	7f 08       	sbc	r7, r15
     ba0:	f0 93 e8 01 	sts	0x01E8, r31
     ba4:	ff b7       	in	r31, 0x3f	; 63
     ba6:	f7 fb       	bst	r31, 7
     ba8:	f8 94       	cli
     baa:	f3 e0       	ldi	r31, 0x03	; 3
     bac:	fd bf       	out	0x3d, r31	; 61
     bae:	08 95       	ret

00000bb0 <threefish_256_dec>:
     bb0:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <threefish_setup>
     bb4:	f3 e1       	ldi	r31, 0x13	; 19
     bb6:	f0 93 e6 01 	sts	0x01E6, r31
     bba:	ff e1       	ldi	r31, 0x1F	; 31
     bbc:	f0 93 e7 01 	sts	0x01E7, r31
     bc0:	ff e2       	ldi	r31, 0x2F	; 47
     bc2:	f0 93 e9 01 	sts	0x01E9, r31
     bc6:	0e 94 8f 02 	call	0x51e	; 0x51e <threefish_256_dec_8threefish_rounds>
     bca:	0e 94 8f 02 	call	0x51e	; 0x51e <threefish_256_dec_8threefish_rounds>
     bce:	0e 94 8f 02 	call	0x51e	; 0x51e <threefish_256_dec_8threefish_rounds>
     bd2:	0e 94 8f 02 	call	0x51e	; 0x51e <threefish_256_dec_8threefish_rounds>
     bd6:	0e 94 8f 02 	call	0x51e	; 0x51e <threefish_256_dec_8threefish_rounds>
     bda:	0e 94 8f 02 	call	0x51e	; 0x51e <threefish_256_dec_8threefish_rounds>
     bde:	0e 94 8f 02 	call	0x51e	; 0x51e <threefish_256_dec_8threefish_rounds>
     be2:	0e 94 8f 02 	call	0x51e	; 0x51e <threefish_256_dec_8threefish_rounds>
     be6:	0e 94 8f 02 	call	0x51e	; 0x51e <threefish_256_dec_8threefish_rounds>
     bea:	f0 91 e7 01 	lds	r31, 0x01E7
     bee:	fd bf       	out	0x3d, r31	; 61
     bf0:	ff 91       	pop	r31
     bf2:	0f 1b       	sub	r16, r31
     bf4:	ff 91       	pop	r31
     bf6:	1f 0b       	sbc	r17, r31
     bf8:	ff 91       	pop	r31
     bfa:	2f 0b       	sbc	r18, r31
     bfc:	ff 91       	pop	r31
     bfe:	3f 0b       	sbc	r19, r31
     c00:	ff 91       	pop	r31
     c02:	4f 0b       	sbc	r20, r31
     c04:	ff 91       	pop	r31
     c06:	5f 0b       	sbc	r21, r31
     c08:	ff 91       	pop	r31
     c0a:	6f 0b       	sbc	r22, r31
     c0c:	ff 91       	pop	r31
     c0e:	7f 0b       	sbc	r23, r31
     c10:	f0 91 e8 01 	lds	r31, 0x01E8
     c14:	00 93 e8 01 	sts	0x01E8, r16
     c18:	0d b7       	in	r16, 0x3d	; 61
     c1a:	0f 32       	cpi	r16, 0x2F	; 47
     c1c:	11 f4       	brne	.+4      	; 0xc22 <threefish_256_dec+0x72>
     c1e:	07 e0       	ldi	r16, 0x07	; 7
     c20:	0d bf       	out	0x3d, r16	; 61
     c22:	0f 91       	pop	r16
     c24:	80 1b       	sub	r24, r16
     c26:	0f 91       	pop	r16
     c28:	90 0b       	sbc	r25, r16
     c2a:	0f 91       	pop	r16
     c2c:	a0 0b       	sbc	r26, r16
     c2e:	0f 91       	pop	r16
     c30:	b0 0b       	sbc	r27, r16
     c32:	0f 91       	pop	r16
     c34:	c0 0b       	sbc	r28, r16
     c36:	0f 91       	pop	r16
     c38:	d0 0b       	sbc	r29, r16
     c3a:	0f 91       	pop	r16
     c3c:	e0 0b       	sbc	r30, r16
     c3e:	0f 91       	pop	r16
     c40:	f0 0b       	sbc	r31, r16
     c42:	0d b7       	in	r16, 0x3d	; 61
     c44:	0f 32       	cpi	r16, 0x2F	; 47
     c46:	11 f4       	brne	.+4      	; 0xc4c <threefish_256_dec+0x9c>
     c48:	07 e0       	ldi	r16, 0x07	; 7
     c4a:	0d bf       	out	0x3d, r16	; 61
     c4c:	0f 91       	pop	r16
     c4e:	00 1a       	sub	r0, r16
     c50:	0f 91       	pop	r16
     c52:	10 0a       	sbc	r1, r16
     c54:	0f 91       	pop	r16
     c56:	20 0a       	sbc	r2, r16
     c58:	0f 91       	pop	r16
     c5a:	30 0a       	sbc	r3, r16
     c5c:	0f 91       	pop	r16
     c5e:	40 0a       	sbc	r4, r16
     c60:	0f 91       	pop	r16
     c62:	50 0a       	sbc	r5, r16
     c64:	0f 91       	pop	r16
     c66:	60 0a       	sbc	r6, r16
     c68:	0f 91       	pop	r16
     c6a:	70 0a       	sbc	r7, r16
     c6c:	0d b7       	in	r16, 0x3d	; 61
     c6e:	0f 32       	cpi	r16, 0x2F	; 47
     c70:	11 f4       	brne	.+4      	; 0xc76 <threefish_256_dec+0xc6>
     c72:	07 e0       	ldi	r16, 0x07	; 7
     c74:	0d bf       	out	0x3d, r16	; 61
     c76:	0f 91       	pop	r16
     c78:	80 1a       	sub	r8, r16
     c7a:	0f 91       	pop	r16
     c7c:	90 0a       	sbc	r9, r16
     c7e:	0f 91       	pop	r16
     c80:	a0 0a       	sbc	r10, r16
     c82:	0f 91       	pop	r16
     c84:	b0 0a       	sbc	r11, r16
     c86:	0f 91       	pop	r16
     c88:	c0 0a       	sbc	r12, r16
     c8a:	0f 91       	pop	r16
     c8c:	d0 0a       	sbc	r13, r16
     c8e:	0f 91       	pop	r16
     c90:	e0 0a       	sbc	r14, r16
     c92:	0f 91       	pop	r16
     c94:	f0 0a       	sbc	r15, r16
     c96:	00 91 e9 01 	lds	r16, 0x01E9
     c9a:	0d bf       	out	0x3d, r16	; 61
     c9c:	0f 91       	pop	r16
     c9e:	80 1b       	sub	r24, r16
     ca0:	0f 91       	pop	r16
     ca2:	90 0b       	sbc	r25, r16
     ca4:	0f 91       	pop	r16
     ca6:	a0 0b       	sbc	r26, r16
     ca8:	0f 91       	pop	r16
     caa:	b0 0b       	sbc	r27, r16
     cac:	0f 91       	pop	r16
     cae:	c0 0b       	sbc	r28, r16
     cb0:	0f 91       	pop	r16
     cb2:	d0 0b       	sbc	r29, r16
     cb4:	0f 91       	pop	r16
     cb6:	e0 0b       	sbc	r30, r16
     cb8:	0f 91       	pop	r16
     cba:	f0 0b       	sbc	r31, r16
     cbc:	0d b7       	in	r16, 0x3d	; 61
     cbe:	07 34       	cpi	r16, 0x47	; 71
     cc0:	11 f4       	brne	.+4      	; 0xcc6 <threefish_256_dec+0x116>
     cc2:	0f e2       	ldi	r16, 0x2F	; 47
     cc4:	0d bf       	out	0x3d, r16	; 61
     cc6:	0f 91       	pop	r16
     cc8:	00 1a       	sub	r0, r16
     cca:	0f 91       	pop	r16
     ccc:	10 0a       	sbc	r1, r16
     cce:	0f 91       	pop	r16
     cd0:	20 0a       	sbc	r2, r16
     cd2:	0f 91       	pop	r16
     cd4:	30 0a       	sbc	r3, r16
     cd6:	0f 91       	pop	r16
     cd8:	40 0a       	sbc	r4, r16
     cda:	0f 91       	pop	r16
     cdc:	50 0a       	sbc	r5, r16
     cde:	0f 91       	pop	r16
     ce0:	60 0a       	sbc	r6, r16
     ce2:	0f 91       	pop	r16
     ce4:	70 0a       	sbc	r7, r16
     ce6:	00 91 e6 01 	lds	r16, 0x01E6
     cea:	0a 95       	dec	r16
     cec:	80 1a       	sub	r8, r16
     cee:	00 27       	eor	r16, r16
     cf0:	90 0a       	sbc	r9, r16
     cf2:	a0 0a       	sbc	r10, r16
     cf4:	b0 0a       	sbc	r11, r16
     cf6:	c0 0a       	sbc	r12, r16
     cf8:	d0 0a       	sbc	r13, r16
     cfa:	e0 0a       	sbc	r14, r16
     cfc:	f0 0a       	sbc	r15, r16
     cfe:	0c 94 3d 02 	jmp	0x47a	; 0x47a <threefish_finish>

00000d02 <threefish_256_enc_8threefish_rounds>:
     d02:	f0 91 e7 01 	lds	r31, 0x01E7
     d06:	fd bf       	out	0x3d, r31	; 61
     d08:	ff 91       	pop	r31
     d0a:	0f 0f       	add	r16, r31
     d0c:	ff 91       	pop	r31
     d0e:	1f 1f       	adc	r17, r31
     d10:	ff 91       	pop	r31
     d12:	2f 1f       	adc	r18, r31
     d14:	ff 91       	pop	r31
     d16:	3f 1f       	adc	r19, r31
     d18:	ff 91       	pop	r31
     d1a:	4f 1f       	adc	r20, r31
     d1c:	ff 91       	pop	r31
     d1e:	5f 1f       	adc	r21, r31
     d20:	ff 91       	pop	r31
     d22:	6f 1f       	adc	r22, r31
     d24:	ff 91       	pop	r31
     d26:	7f 1f       	adc	r23, r31
     d28:	f0 91 e8 01 	lds	r31, 0x01E8
     d2c:	00 93 e8 01 	sts	0x01E8, r16
     d30:	0d b7       	in	r16, 0x3d	; 61
     d32:	0f 32       	cpi	r16, 0x2F	; 47
     d34:	11 f4       	brne	.+4      	; 0xd3a <threefish_256_enc_8threefish_rounds+0x38>
     d36:	07 e0       	ldi	r16, 0x07	; 7
     d38:	0d bf       	out	0x3d, r16	; 61
     d3a:	00 93 e7 01 	sts	0x01E7, r16
     d3e:	0f 91       	pop	r16
     d40:	80 0f       	add	r24, r16
     d42:	0f 91       	pop	r16
     d44:	90 1f       	adc	r25, r16
     d46:	0f 91       	pop	r16
     d48:	a0 1f       	adc	r26, r16
     d4a:	0f 91       	pop	r16
     d4c:	b0 1f       	adc	r27, r16
     d4e:	0f 91       	pop	r16
     d50:	c0 1f       	adc	r28, r16
     d52:	0f 91       	pop	r16
     d54:	d0 1f       	adc	r29, r16
     d56:	0f 91       	pop	r16
     d58:	e0 1f       	adc	r30, r16
     d5a:	0f 91       	pop	r16
     d5c:	f0 1f       	adc	r31, r16
     d5e:	0d b7       	in	r16, 0x3d	; 61
     d60:	0f 32       	cpi	r16, 0x2F	; 47
     d62:	11 f4       	brne	.+4      	; 0xd68 <threefish_256_enc_8threefish_rounds+0x66>
     d64:	07 e0       	ldi	r16, 0x07	; 7
     d66:	0d bf       	out	0x3d, r16	; 61
     d68:	0f 91       	pop	r16
     d6a:	00 0e       	add	r0, r16
     d6c:	0f 91       	pop	r16
     d6e:	10 1e       	adc	r1, r16
     d70:	0f 91       	pop	r16
     d72:	20 1e       	adc	r2, r16
     d74:	0f 91       	pop	r16
     d76:	30 1e       	adc	r3, r16
     d78:	0f 91       	pop	r16
     d7a:	40 1e       	adc	r4, r16
     d7c:	0f 91       	pop	r16
     d7e:	50 1e       	adc	r5, r16
     d80:	0f 91       	pop	r16
     d82:	60 1e       	adc	r6, r16
     d84:	0f 91       	pop	r16
     d86:	70 1e       	adc	r7, r16
     d88:	0d b7       	in	r16, 0x3d	; 61
     d8a:	0f 32       	cpi	r16, 0x2F	; 47
     d8c:	11 f4       	brne	.+4      	; 0xd92 <threefish_256_enc_8threefish_rounds+0x90>
     d8e:	07 e0       	ldi	r16, 0x07	; 7
     d90:	0d bf       	out	0x3d, r16	; 61
     d92:	0f 91       	pop	r16
     d94:	80 0e       	add	r8, r16
     d96:	0f 91       	pop	r16
     d98:	90 1e       	adc	r9, r16
     d9a:	0f 91       	pop	r16
     d9c:	a0 1e       	adc	r10, r16
     d9e:	0f 91       	pop	r16
     da0:	b0 1e       	adc	r11, r16
     da2:	0f 91       	pop	r16
     da4:	c0 1e       	adc	r12, r16
     da6:	0f 91       	pop	r16
     da8:	d0 1e       	adc	r13, r16
     daa:	0f 91       	pop	r16
     dac:	e0 1e       	adc	r14, r16
     dae:	0f 91       	pop	r16
     db0:	f0 1e       	adc	r15, r16
     db2:	00 91 e9 01 	lds	r16, 0x01E9
     db6:	0d bf       	out	0x3d, r16	; 61
     db8:	0f 91       	pop	r16
     dba:	80 0f       	add	r24, r16
     dbc:	0f 91       	pop	r16
     dbe:	90 1f       	adc	r25, r16
     dc0:	0f 91       	pop	r16
     dc2:	a0 1f       	adc	r26, r16
     dc4:	0f 91       	pop	r16
     dc6:	b0 1f       	adc	r27, r16
     dc8:	0f 91       	pop	r16
     dca:	c0 1f       	adc	r28, r16
     dcc:	0f 91       	pop	r16
     dce:	d0 1f       	adc	r29, r16
     dd0:	0f 91       	pop	r16
     dd2:	e0 1f       	adc	r30, r16
     dd4:	0f 91       	pop	r16
     dd6:	f0 1f       	adc	r31, r16
     dd8:	0d b7       	in	r16, 0x3d	; 61
     dda:	07 34       	cpi	r16, 0x47	; 71
     ddc:	11 f4       	brne	.+4      	; 0xde2 <threefish_256_enc_8threefish_rounds+0xe0>
     dde:	0f e2       	ldi	r16, 0x2F	; 47
     de0:	0d bf       	out	0x3d, r16	; 61
     de2:	00 93 e9 01 	sts	0x01E9, r16
     de6:	0f 91       	pop	r16
     de8:	00 0e       	add	r0, r16
     dea:	0f 91       	pop	r16
     dec:	10 1e       	adc	r1, r16
     dee:	0f 91       	pop	r16
     df0:	20 1e       	adc	r2, r16
     df2:	0f 91       	pop	r16
     df4:	30 1e       	adc	r3, r16
     df6:	0f 91       	pop	r16
     df8:	40 1e       	adc	r4, r16
     dfa:	0f 91       	pop	r16
     dfc:	50 1e       	adc	r5, r16
     dfe:	0f 91       	pop	r16
     e00:	60 1e       	adc	r6, r16
     e02:	0f 91       	pop	r16
     e04:	70 1e       	adc	r7, r16
     e06:	00 91 e6 01 	lds	r16, 0x01E6
     e0a:	03 95       	inc	r16
     e0c:	00 93 e6 01 	sts	0x01E6, r16
     e10:	80 0e       	add	r8, r16
     e12:	00 27       	eor	r16, r16
     e14:	90 1e       	adc	r9, r16
     e16:	a0 1e       	adc	r10, r16
     e18:	b0 1e       	adc	r11, r16
     e1a:	c0 1e       	adc	r12, r16
     e1c:	d0 1e       	adc	r13, r16
     e1e:	e0 1e       	adc	r14, r16
     e20:	f0 1e       	adc	r15, r16
     e22:	03 e0       	ldi	r16, 0x03	; 3
     e24:	0d bf       	out	0x3d, r16	; 61
     e26:	00 91 e8 01 	lds	r16, 0x01E8
     e2a:	0e f4       	brtc	.+2      	; 0xe2e <threefish_256_enc_8threefish_rounds+0x12c>
     e2c:	78 94       	sei
     e2e:	08 0f       	add	r16, r24
     e30:	19 1f       	adc	r17, r25
     e32:	2a 1f       	adc	r18, r26
     e34:	3b 1f       	adc	r19, r27
     e36:	4c 1f       	adc	r20, r28
     e38:	5d 1f       	adc	r21, r29
     e3a:	6e 1f       	adc	r22, r30
     e3c:	7f 1f       	adc	r23, r31
     e3e:	e0 fb       	bst	r30, 0
     e40:	d6 95       	lsr	r29
     e42:	c7 95       	ror	r28
     e44:	b7 95       	ror	r27
     e46:	a7 95       	ror	r26
     e48:	97 95       	ror	r25
     e4a:	87 95       	ror	r24
     e4c:	f7 95       	ror	r31
     e4e:	e7 95       	ror	r30
     e50:	d7 f9       	bld	r29, 7
     e52:	e0 fb       	bst	r30, 0
     e54:	d6 95       	lsr	r29
     e56:	c7 95       	ror	r28
     e58:	b7 95       	ror	r27
     e5a:	a7 95       	ror	r26
     e5c:	97 95       	ror	r25
     e5e:	87 95       	ror	r24
     e60:	f7 95       	ror	r31
     e62:	e7 95       	ror	r30
     e64:	d7 f9       	bld	r29, 7
     e66:	e0 27       	eor	r30, r16
     e68:	f1 27       	eor	r31, r17
     e6a:	82 27       	eor	r24, r18
     e6c:	93 27       	eor	r25, r19
     e6e:	a4 27       	eor	r26, r20
     e70:	b5 27       	eor	r27, r21
     e72:	c6 27       	eor	r28, r22
     e74:	d7 27       	eor	r29, r23
     e76:	08 0c       	add	r0, r8
     e78:	19 1c       	adc	r1, r9
     e7a:	2a 1c       	adc	r2, r10
     e7c:	3b 1c       	adc	r3, r11
     e7e:	4c 1c       	adc	r4, r12
     e80:	5d 1c       	adc	r5, r13
     e82:	6e 1c       	adc	r6, r14
     e84:	7f 1c       	adc	r7, r15
     e86:	e0 24       	eor	r14, r0
     e88:	f1 24       	eor	r15, r1
     e8a:	82 24       	eor	r8, r2
     e8c:	93 24       	eor	r9, r3
     e8e:	a4 24       	eor	r10, r4
     e90:	b5 24       	eor	r11, r5
     e92:	c6 24       	eor	r12, r6
     e94:	d7 24       	eor	r13, r7
     e96:	0e 0d       	add	r16, r14
     e98:	1f 1d       	adc	r17, r15
     e9a:	28 1d       	adc	r18, r8
     e9c:	39 1d       	adc	r19, r9
     e9e:	4a 1d       	adc	r20, r10
     ea0:	5b 1d       	adc	r21, r11
     ea2:	6c 1d       	adc	r22, r12
     ea4:	7d 1d       	adc	r23, r13
     ea6:	f0 fa       	bst	r15, 0
     ea8:	e6 94       	lsr	r14
     eaa:	d7 94       	ror	r13
     eac:	c7 94       	ror	r12
     eae:	b7 94       	ror	r11
     eb0:	a7 94       	ror	r10
     eb2:	97 94       	ror	r9
     eb4:	87 94       	ror	r8
     eb6:	f7 94       	ror	r15
     eb8:	e7 f8       	bld	r14, 7
     eba:	f0 fa       	bst	r15, 0
     ebc:	e6 94       	lsr	r14
     ebe:	d7 94       	ror	r13
     ec0:	c7 94       	ror	r12
     ec2:	b7 94       	ror	r11
     ec4:	a7 94       	ror	r10
     ec6:	97 94       	ror	r9
     ec8:	87 94       	ror	r8
     eca:	f7 94       	ror	r15
     ecc:	e7 f8       	bld	r14, 7
     ece:	f0 fa       	bst	r15, 0
     ed0:	e6 94       	lsr	r14
     ed2:	d7 94       	ror	r13
     ed4:	c7 94       	ror	r12
     ed6:	b7 94       	ror	r11
     ed8:	a7 94       	ror	r10
     eda:	97 94       	ror	r9
     edc:	87 94       	ror	r8
     ede:	f7 94       	ror	r15
     ee0:	e7 f8       	bld	r14, 7
     ee2:	f0 fa       	bst	r15, 0
     ee4:	e6 94       	lsr	r14
     ee6:	d7 94       	ror	r13
     ee8:	c7 94       	ror	r12
     eea:	b7 94       	ror	r11
     eec:	a7 94       	ror	r10
     eee:	97 94       	ror	r9
     ef0:	87 94       	ror	r8
     ef2:	f7 94       	ror	r15
     ef4:	e7 f8       	bld	r14, 7
     ef6:	f0 26       	eor	r15, r16
     ef8:	81 26       	eor	r8, r17
     efa:	92 26       	eor	r9, r18
     efc:	a3 26       	eor	r10, r19
     efe:	b4 26       	eor	r11, r20
     f00:	c5 26       	eor	r12, r21
     f02:	d6 26       	eor	r13, r22
     f04:	e7 26       	eor	r14, r23
     f06:	0e 0e       	add	r0, r30
     f08:	1f 1e       	adc	r1, r31
     f0a:	28 1e       	adc	r2, r24
     f0c:	39 1e       	adc	r3, r25
     f0e:	4a 1e       	adc	r4, r26
     f10:	5b 1e       	adc	r5, r27
     f12:	6c 1e       	adc	r6, r28
     f14:	7d 1e       	adc	r7, r29
     f16:	e7 fb       	bst	r30, 7
     f18:	ff 0f       	add	r31, r31
     f1a:	88 1f       	adc	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	aa 1f       	adc	r26, r26
     f20:	bb 1f       	adc	r27, r27
     f22:	cc 1f       	adc	r28, r28
     f24:	dd 1f       	adc	r29, r29
     f26:	ee 1f       	adc	r30, r30
     f28:	f0 f9       	bld	r31, 0
     f2a:	f0 25       	eor	r31, r0
     f2c:	81 25       	eor	r24, r1
     f2e:	92 25       	eor	r25, r2
     f30:	a3 25       	eor	r26, r3
     f32:	b4 25       	eor	r27, r4
     f34:	c5 25       	eor	r28, r5
     f36:	d6 25       	eor	r29, r6
     f38:	e7 25       	eor	r30, r7
     f3a:	0f 0f       	add	r16, r31
     f3c:	18 1f       	adc	r17, r24
     f3e:	29 1f       	adc	r18, r25
     f40:	3a 1f       	adc	r19, r26
     f42:	4b 1f       	adc	r20, r27
     f44:	5c 1f       	adc	r21, r28
     f46:	6d 1f       	adc	r22, r29
     f48:	7e 1f       	adc	r23, r30
     f4a:	c0 fb       	bst	r28, 0
     f4c:	b6 95       	lsr	r27
     f4e:	a7 95       	ror	r26
     f50:	97 95       	ror	r25
     f52:	87 95       	ror	r24
     f54:	f7 95       	ror	r31
     f56:	e7 95       	ror	r30
     f58:	d7 95       	ror	r29
     f5a:	c7 95       	ror	r28
     f5c:	b7 f9       	bld	r27, 7
     f5e:	c0 27       	eor	r28, r16
     f60:	d1 27       	eor	r29, r17
     f62:	e2 27       	eor	r30, r18
     f64:	f3 27       	eor	r31, r19
     f66:	84 27       	eor	r24, r20
     f68:	95 27       	eor	r25, r21
     f6a:	a6 27       	eor	r26, r22
     f6c:	b7 27       	eor	r27, r23
     f6e:	0f 0c       	add	r0, r15
     f70:	18 1c       	adc	r1, r8
     f72:	29 1c       	adc	r2, r9
     f74:	3a 1c       	adc	r3, r10
     f76:	4b 1c       	adc	r4, r11
     f78:	5c 1c       	adc	r5, r12
     f7a:	6d 1c       	adc	r6, r13
     f7c:	7e 1c       	adc	r7, r14
     f7e:	a0 24       	eor	r10, r0
     f80:	b1 24       	eor	r11, r1
     f82:	c2 24       	eor	r12, r2
     f84:	d3 24       	eor	r13, r3
     f86:	e4 24       	eor	r14, r4
     f88:	f5 24       	eor	r15, r5
     f8a:	86 24       	eor	r8, r6
     f8c:	97 24       	eor	r9, r7
     f8e:	0a 0d       	add	r16, r10
     f90:	1b 1d       	adc	r17, r11
     f92:	2c 1d       	adc	r18, r12
     f94:	3d 1d       	adc	r19, r13
     f96:	4e 1d       	adc	r20, r14
     f98:	5f 1d       	adc	r21, r15
     f9a:	68 1d       	adc	r22, r8
     f9c:	79 1d       	adc	r23, r9
     f9e:	90 fa       	bst	r9, 0
     fa0:	86 94       	lsr	r8
     fa2:	f7 94       	ror	r15
     fa4:	e7 94       	ror	r14
     fa6:	d7 94       	ror	r13
     fa8:	c7 94       	ror	r12
     faa:	b7 94       	ror	r11
     fac:	a7 94       	ror	r10
     fae:	97 94       	ror	r9
     fb0:	87 f8       	bld	r8, 7
     fb2:	90 fa       	bst	r9, 0
     fb4:	86 94       	lsr	r8
     fb6:	f7 94       	ror	r15
     fb8:	e7 94       	ror	r14
     fba:	d7 94       	ror	r13
     fbc:	c7 94       	ror	r12
     fbe:	b7 94       	ror	r11
     fc0:	a7 94       	ror	r10
     fc2:	97 94       	ror	r9
     fc4:	87 f8       	bld	r8, 7
     fc6:	90 fa       	bst	r9, 0
     fc8:	86 94       	lsr	r8
     fca:	f7 94       	ror	r15
     fcc:	e7 94       	ror	r14
     fce:	d7 94       	ror	r13
     fd0:	c7 94       	ror	r12
     fd2:	b7 94       	ror	r11
     fd4:	a7 94       	ror	r10
     fd6:	97 94       	ror	r9
     fd8:	87 f8       	bld	r8, 7
     fda:	90 26       	eor	r9, r16
     fdc:	a1 26       	eor	r10, r17
     fde:	b2 26       	eor	r11, r18
     fe0:	c3 26       	eor	r12, r19
     fe2:	d4 26       	eor	r13, r20
     fe4:	e5 26       	eor	r14, r21
     fe6:	f6 26       	eor	r15, r22
     fe8:	87 26       	eor	r8, r23
     fea:	0c 0e       	add	r0, r28
     fec:	1d 1e       	adc	r1, r29
     fee:	2e 1e       	adc	r2, r30
     ff0:	3f 1e       	adc	r3, r31
     ff2:	48 1e       	adc	r4, r24
     ff4:	59 1e       	adc	r5, r25
     ff6:	6a 1e       	adc	r6, r26
     ff8:	7b 1e       	adc	r7, r27
     ffa:	f0 fb       	bst	r31, 0
     ffc:	e6 95       	lsr	r30
     ffe:	d7 95       	ror	r29
    1000:	c7 95       	ror	r28
    1002:	b7 95       	ror	r27
    1004:	a7 95       	ror	r26
    1006:	97 95       	ror	r25
    1008:	87 95       	ror	r24
    100a:	f7 95       	ror	r31
    100c:	e7 f9       	bld	r30, 7
    100e:	f0 fb       	bst	r31, 0
    1010:	e6 95       	lsr	r30
    1012:	d7 95       	ror	r29
    1014:	c7 95       	ror	r28
    1016:	b7 95       	ror	r27
    1018:	a7 95       	ror	r26
    101a:	97 95       	ror	r25
    101c:	87 95       	ror	r24
    101e:	f7 95       	ror	r31
    1020:	e7 f9       	bld	r30, 7
    1022:	f0 fb       	bst	r31, 0
    1024:	e6 95       	lsr	r30
    1026:	d7 95       	ror	r29
    1028:	c7 95       	ror	r28
    102a:	b7 95       	ror	r27
    102c:	a7 95       	ror	r26
    102e:	97 95       	ror	r25
    1030:	87 95       	ror	r24
    1032:	f7 95       	ror	r31
    1034:	e7 f9       	bld	r30, 7
    1036:	f0 25       	eor	r31, r0
    1038:	81 25       	eor	r24, r1
    103a:	92 25       	eor	r25, r2
    103c:	a3 25       	eor	r26, r3
    103e:	b4 25       	eor	r27, r4
    1040:	c5 25       	eor	r28, r5
    1042:	d6 25       	eor	r29, r6
    1044:	e7 25       	eor	r30, r7
    1046:	f0 93 e8 01 	sts	0x01E8, r31
    104a:	ff b7       	in	r31, 0x3f	; 63
    104c:	f7 fb       	bst	r31, 7
    104e:	f8 94       	cli
    1050:	f0 91 e7 01 	lds	r31, 0x01E7
    1054:	fd bf       	out	0x3d, r31	; 61
    1056:	ff 91       	pop	r31
    1058:	0f 0f       	add	r16, r31
    105a:	ff 91       	pop	r31
    105c:	1f 1f       	adc	r17, r31
    105e:	ff 91       	pop	r31
    1060:	2f 1f       	adc	r18, r31
    1062:	ff 91       	pop	r31
    1064:	3f 1f       	adc	r19, r31
    1066:	ff 91       	pop	r31
    1068:	4f 1f       	adc	r20, r31
    106a:	ff 91       	pop	r31
    106c:	5f 1f       	adc	r21, r31
    106e:	ff 91       	pop	r31
    1070:	6f 1f       	adc	r22, r31
    1072:	ff 91       	pop	r31
    1074:	7f 1f       	adc	r23, r31
    1076:	f0 91 e8 01 	lds	r31, 0x01E8
    107a:	00 93 e8 01 	sts	0x01E8, r16
    107e:	0d b7       	in	r16, 0x3d	; 61
    1080:	0f 32       	cpi	r16, 0x2F	; 47
    1082:	11 f4       	brne	.+4      	; 0x1088 <threefish_256_enc_8threefish_rounds+0x386>
    1084:	07 e0       	ldi	r16, 0x07	; 7
    1086:	0d bf       	out	0x3d, r16	; 61
    1088:	00 93 e7 01 	sts	0x01E7, r16
    108c:	0f 91       	pop	r16
    108e:	f0 0f       	add	r31, r16
    1090:	0f 91       	pop	r16
    1092:	80 1f       	adc	r24, r16
    1094:	0f 91       	pop	r16
    1096:	90 1f       	adc	r25, r16
    1098:	0f 91       	pop	r16
    109a:	a0 1f       	adc	r26, r16
    109c:	0f 91       	pop	r16
    109e:	b0 1f       	adc	r27, r16
    10a0:	0f 91       	pop	r16
    10a2:	c0 1f       	adc	r28, r16
    10a4:	0f 91       	pop	r16
    10a6:	d0 1f       	adc	r29, r16
    10a8:	0f 91       	pop	r16
    10aa:	e0 1f       	adc	r30, r16
    10ac:	0d b7       	in	r16, 0x3d	; 61
    10ae:	0f 32       	cpi	r16, 0x2F	; 47
    10b0:	11 f4       	brne	.+4      	; 0x10b6 <threefish_256_enc_8threefish_rounds+0x3b4>
    10b2:	07 e0       	ldi	r16, 0x07	; 7
    10b4:	0d bf       	out	0x3d, r16	; 61
    10b6:	0f 91       	pop	r16
    10b8:	00 0e       	add	r0, r16
    10ba:	0f 91       	pop	r16
    10bc:	10 1e       	adc	r1, r16
    10be:	0f 91       	pop	r16
    10c0:	20 1e       	adc	r2, r16
    10c2:	0f 91       	pop	r16
    10c4:	30 1e       	adc	r3, r16
    10c6:	0f 91       	pop	r16
    10c8:	40 1e       	adc	r4, r16
    10ca:	0f 91       	pop	r16
    10cc:	50 1e       	adc	r5, r16
    10ce:	0f 91       	pop	r16
    10d0:	60 1e       	adc	r6, r16
    10d2:	0f 91       	pop	r16
    10d4:	70 1e       	adc	r7, r16
    10d6:	0d b7       	in	r16, 0x3d	; 61
    10d8:	0f 32       	cpi	r16, 0x2F	; 47
    10da:	11 f4       	brne	.+4      	; 0x10e0 <threefish_256_enc_8threefish_rounds+0x3de>
    10dc:	07 e0       	ldi	r16, 0x07	; 7
    10de:	0d bf       	out	0x3d, r16	; 61
    10e0:	0f 91       	pop	r16
    10e2:	90 0e       	add	r9, r16
    10e4:	0f 91       	pop	r16
    10e6:	a0 1e       	adc	r10, r16
    10e8:	0f 91       	pop	r16
    10ea:	b0 1e       	adc	r11, r16
    10ec:	0f 91       	pop	r16
    10ee:	c0 1e       	adc	r12, r16
    10f0:	0f 91       	pop	r16
    10f2:	d0 1e       	adc	r13, r16
    10f4:	0f 91       	pop	r16
    10f6:	e0 1e       	adc	r14, r16
    10f8:	0f 91       	pop	r16
    10fa:	f0 1e       	adc	r15, r16
    10fc:	0f 91       	pop	r16
    10fe:	80 1e       	adc	r8, r16
    1100:	00 91 e9 01 	lds	r16, 0x01E9
    1104:	0d bf       	out	0x3d, r16	; 61
    1106:	0f 91       	pop	r16
    1108:	f0 0f       	add	r31, r16
    110a:	0f 91       	pop	r16
    110c:	80 1f       	adc	r24, r16
    110e:	0f 91       	pop	r16
    1110:	90 1f       	adc	r25, r16
    1112:	0f 91       	pop	r16
    1114:	a0 1f       	adc	r26, r16
    1116:	0f 91       	pop	r16
    1118:	b0 1f       	adc	r27, r16
    111a:	0f 91       	pop	r16
    111c:	c0 1f       	adc	r28, r16
    111e:	0f 91       	pop	r16
    1120:	d0 1f       	adc	r29, r16
    1122:	0f 91       	pop	r16
    1124:	e0 1f       	adc	r30, r16
    1126:	0d b7       	in	r16, 0x3d	; 61
    1128:	07 34       	cpi	r16, 0x47	; 71
    112a:	11 f4       	brne	.+4      	; 0x1130 <__stack+0x31>
    112c:	0f e2       	ldi	r16, 0x2F	; 47
    112e:	0d bf       	out	0x3d, r16	; 61
    1130:	00 93 e9 01 	sts	0x01E9, r16
    1134:	0f 91       	pop	r16
    1136:	00 0e       	add	r0, r16
    1138:	0f 91       	pop	r16
    113a:	10 1e       	adc	r1, r16
    113c:	0f 91       	pop	r16
    113e:	20 1e       	adc	r2, r16
    1140:	0f 91       	pop	r16
    1142:	30 1e       	adc	r3, r16
    1144:	0f 91       	pop	r16
    1146:	40 1e       	adc	r4, r16
    1148:	0f 91       	pop	r16
    114a:	50 1e       	adc	r5, r16
    114c:	0f 91       	pop	r16
    114e:	60 1e       	adc	r6, r16
    1150:	0f 91       	pop	r16
    1152:	70 1e       	adc	r7, r16
    1154:	00 91 e6 01 	lds	r16, 0x01E6
    1158:	03 95       	inc	r16
    115a:	00 93 e6 01 	sts	0x01E6, r16
    115e:	90 0e       	add	r9, r16
    1160:	00 27       	eor	r16, r16
    1162:	a0 1e       	adc	r10, r16
    1164:	b0 1e       	adc	r11, r16
    1166:	c0 1e       	adc	r12, r16
    1168:	d0 1e       	adc	r13, r16
    116a:	e0 1e       	adc	r14, r16
    116c:	f0 1e       	adc	r15, r16
    116e:	80 1e       	adc	r8, r16
    1170:	03 e0       	ldi	r16, 0x03	; 3
    1172:	0d bf       	out	0x3d, r16	; 61
    1174:	00 91 e8 01 	lds	r16, 0x01E8
    1178:	0e f4       	brtc	.+2      	; 0x117c <__stack+0x7d>
    117a:	78 94       	sei
    117c:	0f 0f       	add	r16, r31
    117e:	18 1f       	adc	r17, r24
    1180:	29 1f       	adc	r18, r25
    1182:	3a 1f       	adc	r19, r26
    1184:	4b 1f       	adc	r20, r27
    1186:	5c 1f       	adc	r21, r28
    1188:	6d 1f       	adc	r22, r29
    118a:	7e 1f       	adc	r23, r30
    118c:	b7 fb       	bst	r27, 7
    118e:	cc 0f       	add	r28, r28
    1190:	dd 1f       	adc	r29, r29
    1192:	ee 1f       	adc	r30, r30
    1194:	ff 1f       	adc	r31, r31
    1196:	88 1f       	adc	r24, r24
    1198:	99 1f       	adc	r25, r25
    119a:	aa 1f       	adc	r26, r26
    119c:	bb 1f       	adc	r27, r27
    119e:	c0 f9       	bld	r28, 0
    11a0:	c0 27       	eor	r28, r16
    11a2:	d1 27       	eor	r29, r17
    11a4:	e2 27       	eor	r30, r18
    11a6:	f3 27       	eor	r31, r19
    11a8:	84 27       	eor	r24, r20
    11aa:	95 27       	eor	r25, r21
    11ac:	a6 27       	eor	r26, r22
    11ae:	b7 27       	eor	r27, r23
    11b0:	09 0c       	add	r0, r9
    11b2:	1a 1c       	adc	r1, r10
    11b4:	2b 1c       	adc	r2, r11
    11b6:	3c 1c       	adc	r3, r12
    11b8:	4d 1c       	adc	r4, r13
    11ba:	5e 1c       	adc	r5, r14
    11bc:	6f 1c       	adc	r6, r15
    11be:	78 1c       	adc	r7, r8
    11c0:	c7 fa       	bst	r12, 7
    11c2:	dd 0c       	add	r13, r13
    11c4:	ee 1c       	adc	r14, r14
    11c6:	ff 1c       	adc	r15, r15
    11c8:	88 1c       	adc	r8, r8
    11ca:	99 1c       	adc	r9, r9
    11cc:	aa 1c       	adc	r10, r10
    11ce:	bb 1c       	adc	r11, r11
    11d0:	cc 1c       	adc	r12, r12
    11d2:	d0 f8       	bld	r13, 0
    11d4:	d0 24       	eor	r13, r0
    11d6:	e1 24       	eor	r14, r1
    11d8:	f2 24       	eor	r15, r2
    11da:	83 24       	eor	r8, r3
    11dc:	94 24       	eor	r9, r4
    11de:	a5 24       	eor	r10, r5
    11e0:	b6 24       	eor	r11, r6
    11e2:	c7 24       	eor	r12, r7
    11e4:	0d 0d       	add	r16, r13
    11e6:	1e 1d       	adc	r17, r14
    11e8:	2f 1d       	adc	r18, r15
    11ea:	38 1d       	adc	r19, r8
    11ec:	49 1d       	adc	r20, r9
    11ee:	5a 1d       	adc	r21, r10
    11f0:	6b 1d       	adc	r22, r11
    11f2:	7c 1d       	adc	r23, r12
    11f4:	f0 fa       	bst	r15, 0
    11f6:	e6 94       	lsr	r14
    11f8:	d7 94       	ror	r13
    11fa:	c7 94       	ror	r12
    11fc:	b7 94       	ror	r11
    11fe:	a7 94       	ror	r10
    1200:	97 94       	ror	r9
    1202:	87 94       	ror	r8
    1204:	f7 94       	ror	r15
    1206:	e7 f8       	bld	r14, 7
    1208:	f0 fa       	bst	r15, 0
    120a:	e6 94       	lsr	r14
    120c:	d7 94       	ror	r13
    120e:	c7 94       	ror	r12
    1210:	b7 94       	ror	r11
    1212:	a7 94       	ror	r10
    1214:	97 94       	ror	r9
    1216:	87 94       	ror	r8
    1218:	f7 94       	ror	r15
    121a:	e7 f8       	bld	r14, 7
    121c:	f0 26       	eor	r15, r16
    121e:	81 26       	eor	r8, r17
    1220:	92 26       	eor	r9, r18
    1222:	a3 26       	eor	r10, r19
    1224:	b4 26       	eor	r11, r20
    1226:	c5 26       	eor	r12, r21
    1228:	d6 26       	eor	r13, r22
    122a:	e7 26       	eor	r14, r23
    122c:	0c 0e       	add	r0, r28
    122e:	1d 1e       	adc	r1, r29
    1230:	2e 1e       	adc	r2, r30
    1232:	3f 1e       	adc	r3, r31
    1234:	48 1e       	adc	r4, r24
    1236:	59 1e       	adc	r5, r25
    1238:	6a 1e       	adc	r6, r26
    123a:	7b 1e       	adc	r7, r27
    123c:	a7 fb       	bst	r26, 7
    123e:	bb 0f       	add	r27, r27
    1240:	cc 1f       	adc	r28, r28
    1242:	dd 1f       	adc	r29, r29
    1244:	ee 1f       	adc	r30, r30
    1246:	ff 1f       	adc	r31, r31
    1248:	88 1f       	adc	r24, r24
    124a:	99 1f       	adc	r25, r25
    124c:	aa 1f       	adc	r26, r26
    124e:	b0 f9       	bld	r27, 0
    1250:	a7 fb       	bst	r26, 7
    1252:	bb 0f       	add	r27, r27
    1254:	cc 1f       	adc	r28, r28
    1256:	dd 1f       	adc	r29, r29
    1258:	ee 1f       	adc	r30, r30
    125a:	ff 1f       	adc	r31, r31
    125c:	88 1f       	adc	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	aa 1f       	adc	r26, r26
    1262:	b0 f9       	bld	r27, 0
    1264:	a7 fb       	bst	r26, 7
    1266:	bb 0f       	add	r27, r27
    1268:	cc 1f       	adc	r28, r28
    126a:	dd 1f       	adc	r29, r29
    126c:	ee 1f       	adc	r30, r30
    126e:	ff 1f       	adc	r31, r31
    1270:	88 1f       	adc	r24, r24
    1272:	99 1f       	adc	r25, r25
    1274:	aa 1f       	adc	r26, r26
    1276:	b0 f9       	bld	r27, 0
    1278:	a7 fb       	bst	r26, 7
    127a:	bb 0f       	add	r27, r27
    127c:	cc 1f       	adc	r28, r28
    127e:	dd 1f       	adc	r29, r29
    1280:	ee 1f       	adc	r30, r30
    1282:	ff 1f       	adc	r31, r31
    1284:	88 1f       	adc	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	aa 1f       	adc	r26, r26
    128a:	b0 f9       	bld	r27, 0
    128c:	b0 25       	eor	r27, r0
    128e:	c1 25       	eor	r28, r1
    1290:	d2 25       	eor	r29, r2
    1292:	e3 25       	eor	r30, r3
    1294:	f4 25       	eor	r31, r4
    1296:	85 25       	eor	r24, r5
    1298:	96 25       	eor	r25, r6
    129a:	a7 25       	eor	r26, r7
    129c:	0b 0f       	add	r16, r27
    129e:	1c 1f       	adc	r17, r28
    12a0:	2d 1f       	adc	r18, r29
    12a2:	3e 1f       	adc	r19, r30
    12a4:	4f 1f       	adc	r20, r31
    12a6:	58 1f       	adc	r21, r24
    12a8:	69 1f       	adc	r22, r25
    12aa:	7a 1f       	adc	r23, r26
    12ac:	b7 fb       	bst	r27, 7
    12ae:	cc 0f       	add	r28, r28
    12b0:	dd 1f       	adc	r29, r29
    12b2:	ee 1f       	adc	r30, r30
    12b4:	ff 1f       	adc	r31, r31
    12b6:	88 1f       	adc	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	aa 1f       	adc	r26, r26
    12bc:	bb 1f       	adc	r27, r27
    12be:	c0 f9       	bld	r28, 0
    12c0:	b7 fb       	bst	r27, 7
    12c2:	cc 0f       	add	r28, r28
    12c4:	dd 1f       	adc	r29, r29
    12c6:	ee 1f       	adc	r30, r30
    12c8:	ff 1f       	adc	r31, r31
    12ca:	88 1f       	adc	r24, r24
    12cc:	99 1f       	adc	r25, r25
    12ce:	aa 1f       	adc	r26, r26
    12d0:	bb 1f       	adc	r27, r27
    12d2:	c0 f9       	bld	r28, 0
    12d4:	c0 27       	eor	r28, r16
    12d6:	d1 27       	eor	r29, r17
    12d8:	e2 27       	eor	r30, r18
    12da:	f3 27       	eor	r31, r19
    12dc:	84 27       	eor	r24, r20
    12de:	95 27       	eor	r25, r21
    12e0:	a6 27       	eor	r26, r22
    12e2:	b7 27       	eor	r27, r23
    12e4:	0f 0c       	add	r0, r15
    12e6:	18 1c       	adc	r1, r8
    12e8:	29 1c       	adc	r2, r9
    12ea:	3a 1c       	adc	r3, r10
    12ec:	4b 1c       	adc	r4, r11
    12ee:	5c 1c       	adc	r5, r12
    12f0:	6d 1c       	adc	r6, r13
    12f2:	7e 1c       	adc	r7, r14
    12f4:	c0 fa       	bst	r12, 0
    12f6:	b6 94       	lsr	r11
    12f8:	a7 94       	ror	r10
    12fa:	97 94       	ror	r9
    12fc:	87 94       	ror	r8
    12fe:	f7 94       	ror	r15
    1300:	e7 94       	ror	r14
    1302:	d7 94       	ror	r13
    1304:	c7 94       	ror	r12
    1306:	b7 f8       	bld	r11, 7
    1308:	c0 fa       	bst	r12, 0
    130a:	b6 94       	lsr	r11
    130c:	a7 94       	ror	r10
    130e:	97 94       	ror	r9
    1310:	87 94       	ror	r8
    1312:	f7 94       	ror	r15
    1314:	e7 94       	ror	r14
    1316:	d7 94       	ror	r13
    1318:	c7 94       	ror	r12
    131a:	b7 f8       	bld	r11, 7
    131c:	c0 24       	eor	r12, r0
    131e:	d1 24       	eor	r13, r1
    1320:	e2 24       	eor	r14, r2
    1322:	f3 24       	eor	r15, r3
    1324:	84 24       	eor	r8, r4
    1326:	95 24       	eor	r9, r5
    1328:	a6 24       	eor	r10, r6
    132a:	b7 24       	eor	r11, r7
    132c:	0c 0d       	add	r16, r12
    132e:	1d 1d       	adc	r17, r13
    1330:	2e 1d       	adc	r18, r14
    1332:	3f 1d       	adc	r19, r15
    1334:	48 1d       	adc	r20, r8
    1336:	59 1d       	adc	r21, r9
    1338:	6a 1d       	adc	r22, r10
    133a:	7b 1d       	adc	r23, r11
    133c:	80 26       	eor	r8, r16
    133e:	91 26       	eor	r9, r17
    1340:	a2 26       	eor	r10, r18
    1342:	b3 26       	eor	r11, r19
    1344:	c4 26       	eor	r12, r20
    1346:	d5 26       	eor	r13, r21
    1348:	e6 26       	eor	r14, r22
    134a:	f7 26       	eor	r15, r23
    134c:	0c 0e       	add	r0, r28
    134e:	1d 1e       	adc	r1, r29
    1350:	2e 1e       	adc	r2, r30
    1352:	3f 1e       	adc	r3, r31
    1354:	48 1e       	adc	r4, r24
    1356:	59 1e       	adc	r5, r25
    1358:	6a 1e       	adc	r6, r26
    135a:	7b 1e       	adc	r7, r27
    135c:	80 25       	eor	r24, r0
    135e:	91 25       	eor	r25, r1
    1360:	a2 25       	eor	r26, r2
    1362:	b3 25       	eor	r27, r3
    1364:	c4 25       	eor	r28, r4
    1366:	d5 25       	eor	r29, r5
    1368:	e6 25       	eor	r30, r6
    136a:	f7 25       	eor	r31, r7
    136c:	f0 93 e8 01 	sts	0x01E8, r31
    1370:	ff b7       	in	r31, 0x3f	; 63
    1372:	f7 fb       	bst	r31, 7
    1374:	f8 94       	cli
    1376:	08 95       	ret

00001378 <threefish_256_enc>:
    1378:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <threefish_setup>
    137c:	ff ef       	ldi	r31, 0xFF	; 255
    137e:	f0 93 e6 01 	sts	0x01E6, r31
    1382:	f7 e0       	ldi	r31, 0x07	; 7
    1384:	f0 93 e7 01 	sts	0x01E7, r31
    1388:	ff e2       	ldi	r31, 0x2F	; 47
    138a:	f0 93 e9 01 	sts	0x01E9, r31
    138e:	0e 94 81 06 	call	0xd02	; 0xd02 <threefish_256_enc_8threefish_rounds>
    1392:	0e 94 81 06 	call	0xd02	; 0xd02 <threefish_256_enc_8threefish_rounds>
    1396:	0e 94 81 06 	call	0xd02	; 0xd02 <threefish_256_enc_8threefish_rounds>
    139a:	0e 94 81 06 	call	0xd02	; 0xd02 <threefish_256_enc_8threefish_rounds>
    139e:	0e 94 81 06 	call	0xd02	; 0xd02 <threefish_256_enc_8threefish_rounds>
    13a2:	0e 94 81 06 	call	0xd02	; 0xd02 <threefish_256_enc_8threefish_rounds>
    13a6:	0e 94 81 06 	call	0xd02	; 0xd02 <threefish_256_enc_8threefish_rounds>
    13aa:	0e 94 81 06 	call	0xd02	; 0xd02 <threefish_256_enc_8threefish_rounds>
    13ae:	0e 94 81 06 	call	0xd02	; 0xd02 <threefish_256_enc_8threefish_rounds>
    13b2:	f0 91 e7 01 	lds	r31, 0x01E7
    13b6:	fd bf       	out	0x3d, r31	; 61
    13b8:	ff 91       	pop	r31
    13ba:	0f 0f       	add	r16, r31
    13bc:	ff 91       	pop	r31
    13be:	1f 1f       	adc	r17, r31
    13c0:	ff 91       	pop	r31
    13c2:	2f 1f       	adc	r18, r31
    13c4:	ff 91       	pop	r31
    13c6:	3f 1f       	adc	r19, r31
    13c8:	ff 91       	pop	r31
    13ca:	4f 1f       	adc	r20, r31
    13cc:	ff 91       	pop	r31
    13ce:	5f 1f       	adc	r21, r31
    13d0:	ff 91       	pop	r31
    13d2:	6f 1f       	adc	r22, r31
    13d4:	ff 91       	pop	r31
    13d6:	7f 1f       	adc	r23, r31
    13d8:	f0 91 e8 01 	lds	r31, 0x01E8
    13dc:	00 93 e8 01 	sts	0x01E8, r16
    13e0:	0d b7       	in	r16, 0x3d	; 61
    13e2:	0f 32       	cpi	r16, 0x2F	; 47
    13e4:	11 f4       	brne	.+4      	; 0x13ea <threefish_256_enc+0x72>
    13e6:	07 e0       	ldi	r16, 0x07	; 7
    13e8:	0d bf       	out	0x3d, r16	; 61
    13ea:	0f 91       	pop	r16
    13ec:	80 0f       	add	r24, r16
    13ee:	0f 91       	pop	r16
    13f0:	90 1f       	adc	r25, r16
    13f2:	0f 91       	pop	r16
    13f4:	a0 1f       	adc	r26, r16
    13f6:	0f 91       	pop	r16
    13f8:	b0 1f       	adc	r27, r16
    13fa:	0f 91       	pop	r16
    13fc:	c0 1f       	adc	r28, r16
    13fe:	0f 91       	pop	r16
    1400:	d0 1f       	adc	r29, r16
    1402:	0f 91       	pop	r16
    1404:	e0 1f       	adc	r30, r16
    1406:	0f 91       	pop	r16
    1408:	f0 1f       	adc	r31, r16
    140a:	0d b7       	in	r16, 0x3d	; 61
    140c:	0f 32       	cpi	r16, 0x2F	; 47
    140e:	11 f4       	brne	.+4      	; 0x1414 <threefish_256_enc+0x9c>
    1410:	07 e0       	ldi	r16, 0x07	; 7
    1412:	0d bf       	out	0x3d, r16	; 61
    1414:	0f 91       	pop	r16
    1416:	00 0e       	add	r0, r16
    1418:	0f 91       	pop	r16
    141a:	10 1e       	adc	r1, r16
    141c:	0f 91       	pop	r16
    141e:	20 1e       	adc	r2, r16
    1420:	0f 91       	pop	r16
    1422:	30 1e       	adc	r3, r16
    1424:	0f 91       	pop	r16
    1426:	40 1e       	adc	r4, r16
    1428:	0f 91       	pop	r16
    142a:	50 1e       	adc	r5, r16
    142c:	0f 91       	pop	r16
    142e:	60 1e       	adc	r6, r16
    1430:	0f 91       	pop	r16
    1432:	70 1e       	adc	r7, r16
    1434:	0d b7       	in	r16, 0x3d	; 61
    1436:	0f 32       	cpi	r16, 0x2F	; 47
    1438:	11 f4       	brne	.+4      	; 0x143e <threefish_256_enc+0xc6>
    143a:	07 e0       	ldi	r16, 0x07	; 7
    143c:	0d bf       	out	0x3d, r16	; 61
    143e:	0f 91       	pop	r16
    1440:	80 0e       	add	r8, r16
    1442:	0f 91       	pop	r16
    1444:	90 1e       	adc	r9, r16
    1446:	0f 91       	pop	r16
    1448:	a0 1e       	adc	r10, r16
    144a:	0f 91       	pop	r16
    144c:	b0 1e       	adc	r11, r16
    144e:	0f 91       	pop	r16
    1450:	c0 1e       	adc	r12, r16
    1452:	0f 91       	pop	r16
    1454:	d0 1e       	adc	r13, r16
    1456:	0f 91       	pop	r16
    1458:	e0 1e       	adc	r14, r16
    145a:	0f 91       	pop	r16
    145c:	f0 1e       	adc	r15, r16
    145e:	00 91 e9 01 	lds	r16, 0x01E9
    1462:	0d bf       	out	0x3d, r16	; 61
    1464:	0f 91       	pop	r16
    1466:	80 0f       	add	r24, r16
    1468:	0f 91       	pop	r16
    146a:	90 1f       	adc	r25, r16
    146c:	0f 91       	pop	r16
    146e:	a0 1f       	adc	r26, r16
    1470:	0f 91       	pop	r16
    1472:	b0 1f       	adc	r27, r16
    1474:	0f 91       	pop	r16
    1476:	c0 1f       	adc	r28, r16
    1478:	0f 91       	pop	r16
    147a:	d0 1f       	adc	r29, r16
    147c:	0f 91       	pop	r16
    147e:	e0 1f       	adc	r30, r16
    1480:	0f 91       	pop	r16
    1482:	f0 1f       	adc	r31, r16
    1484:	0d b7       	in	r16, 0x3d	; 61
    1486:	07 34       	cpi	r16, 0x47	; 71
    1488:	11 f4       	brne	.+4      	; 0x148e <threefish_256_enc+0x116>
    148a:	0f e2       	ldi	r16, 0x2F	; 47
    148c:	0d bf       	out	0x3d, r16	; 61
    148e:	0f 91       	pop	r16
    1490:	00 0e       	add	r0, r16
    1492:	0f 91       	pop	r16
    1494:	10 1e       	adc	r1, r16
    1496:	0f 91       	pop	r16
    1498:	20 1e       	adc	r2, r16
    149a:	0f 91       	pop	r16
    149c:	30 1e       	adc	r3, r16
    149e:	0f 91       	pop	r16
    14a0:	40 1e       	adc	r4, r16
    14a2:	0f 91       	pop	r16
    14a4:	50 1e       	adc	r5, r16
    14a6:	0f 91       	pop	r16
    14a8:	60 1e       	adc	r6, r16
    14aa:	0f 91       	pop	r16
    14ac:	70 1e       	adc	r7, r16
    14ae:	00 91 e6 01 	lds	r16, 0x01E6
    14b2:	03 95       	inc	r16
    14b4:	80 0e       	add	r8, r16
    14b6:	00 27       	eor	r16, r16
    14b8:	90 1e       	adc	r9, r16
    14ba:	a0 1e       	adc	r10, r16
    14bc:	b0 1e       	adc	r11, r16
    14be:	c0 1e       	adc	r12, r16
    14c0:	d0 1e       	adc	r13, r16
    14c2:	e0 1e       	adc	r14, r16
    14c4:	f0 1e       	adc	r15, r16
    14c6:	03 e0       	ldi	r16, 0x03	; 3
    14c8:	0d bf       	out	0x3d, r16	; 61
    14ca:	0c 94 3d 02 	jmp	0x47a	; 0x47a <threefish_finish>

000014ce <gf256mul>:
    14ce:	78 2f       	mov	r23, r24
    14d0:	88 27       	eor	r24, r24
    14d2:	76 95       	lsr	r23
    14d4:	31 f0       	breq	.+12     	; 0x14e2 <gf256mul+0x14>
    14d6:	08 f4       	brcc	.+2      	; 0x14da <gf256mul+0xc>
    14d8:	86 27       	eor	r24, r22
    14da:	66 0f       	add	r22, r22
    14dc:	08 f4       	brcc	.+2      	; 0x14e0 <gf256mul+0x12>
    14de:	64 27       	eor	r22, r20
    14e0:	f8 cf       	rjmp	.-16     	; 0x14d2 <gf256mul+0x4>
    14e2:	08 f4       	brcc	.+2      	; 0x14e6 <gf256mul+0x18>
    14e4:	86 27       	eor	r24, r22
    14e6:	08 95       	ret

000014e8 <ubi_iterate.constprop.0>:
    14e8:	6f 92       	push	r6
    14ea:	7f 92       	push	r7
    14ec:	8f 92       	push	r8
    14ee:	9f 92       	push	r9
    14f0:	af 92       	push	r10
    14f2:	bf 92       	push	r11
    14f4:	cf 92       	push	r12
    14f6:	df 92       	push	r13
    14f8:	ef 92       	push	r14
    14fa:	ff 92       	push	r15
    14fc:	0f 93       	push	r16
    14fe:	1f 93       	push	r17
    1500:	cf 93       	push	r28
    1502:	df 93       	push	r29
    1504:	eb 01       	movw	r28, r22
    1506:	27 eb       	ldi	r18, 0xB7	; 183
    1508:	62 2e       	mov	r6, r18
    150a:	21 e0       	ldi	r18, 0x01	; 1
    150c:	72 2e       	mov	r7, r18
    150e:	d3 01       	movw	r26, r6
    1510:	2c 91       	ld	r18, X
    1512:	fc 01       	movw	r30, r24
    1514:	20 a7       	std	Z+40, r18	; 0x28
    1516:	b9 96       	adiw	r30, 0x29	; 41
    1518:	2f e1       	ldi	r18, 0x1F	; 31
    151a:	df 01       	movw	r26, r30
    151c:	1d 92       	st	X+, r1
    151e:	2a 95       	dec	r18
    1520:	e9 f7       	brne	.-6      	; 0x151c <ubi_iterate.constprop.0+0x34>
    1522:	df 93       	push	r29
    1524:	6f 93       	push	r22
    1526:	9c 01       	movw	r18, r24
    1528:	28 5d       	subi	r18, 0xD8	; 216
    152a:	3f 4f       	sbci	r19, 0xFF	; 255
    152c:	3f 93       	push	r19
    152e:	2f 93       	push	r18
    1530:	81 2c       	mov	r8, r1
    1532:	91 2c       	mov	r9, r1
    1534:	a1 2c       	mov	r10, r1
    1536:	b1 2c       	mov	r11, r1
    1538:	c1 2c       	mov	r12, r1
    153a:	d1 2c       	mov	r13, r1
    153c:	e1 2c       	mov	r14, r1
    153e:	f1 2c       	mov	r15, r1
    1540:	00 e0       	ldi	r16, 0x00	; 0
    1542:	10 e0       	ldi	r17, 0x00	; 0
    1544:	20 e0       	ldi	r18, 0x00	; 0
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	40 e0       	ldi	r20, 0x00	; 0
    154a:	50 e0       	ldi	r21, 0x00	; 0
    154c:	6f ef       	ldi	r22, 0xFF	; 255
    154e:	70 e0       	ldi	r23, 0x00	; 0
    1550:	0e 94 bc 09 	call	0x1378	; 0x1378 <threefish_256_enc>
    1554:	88 81       	ld	r24, Y
    1556:	d3 01       	movw	r26, r6
    1558:	9c 91       	ld	r25, X
    155a:	89 27       	eor	r24, r25
    155c:	88 83       	st	Y, r24
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	0f 90       	pop	r0
    1564:	0f 90       	pop	r0
    1566:	88 eb       	ldi	r24, 0xB8	; 184
    1568:	91 e0       	ldi	r25, 0x01	; 1
    156a:	df 91       	pop	r29
    156c:	cf 91       	pop	r28
    156e:	1f 91       	pop	r17
    1570:	0f 91       	pop	r16
    1572:	ff 90       	pop	r15
    1574:	ef 90       	pop	r14
    1576:	df 90       	pop	r13
    1578:	cf 90       	pop	r12
    157a:	bf 90       	pop	r11
    157c:	af 90       	pop	r10
    157e:	9f 90       	pop	r9
    1580:	8f 90       	pop	r8
    1582:	7f 90       	pop	r7
    1584:	6f 90       	pop	r6
    1586:	08 95       	ret

00001588 <skein_rand_reseed>:
	skein_rand_reseed(tparam, seed);
}

void skein_rand_reseed(threefish_param_t *tparam, char seed[32])
{
	memcpy(data.random, seed, 32);
    1588:	20 e2       	ldi	r18, 0x20	; 32
    158a:	fb 01       	movw	r30, r22
    158c:	a6 e9       	ldi	r26, 0x96	; 150
    158e:	b1 e0       	ldi	r27, 0x01	; 1
    1590:	01 90       	ld	r0, Z+
    1592:	0d 92       	st	X+, r0
    1594:	2a 95       	dec	r18
    1596:	e1 f7       	brne	.-8      	; 0x1590 <skein_rand_reseed+0x8>
	skein_256_256(tparam, data.state, 64, data.state);
    1598:	26 e7       	ldi	r18, 0x76	; 118
    159a:	31 e0       	ldi	r19, 0x01	; 1
    159c:	40 e4       	ldi	r20, 0x40	; 64
    159e:	50 e0       	ldi	r21, 0x00	; 0
    15a0:	b9 01       	movw	r22, r18
    15a2:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <skein_256_256>
	data.block = 255;
    15a6:	8f ef       	ldi	r24, 0xFF	; 255
    15a8:	80 93 b7 01 	sts	0x01B7, r24
	data.random_len = 0;
    15ac:	10 92 b6 01 	sts	0x01B6, r1
    15b0:	08 95       	ret

000015b2 <skein_rand_seed>:
	unsigned char block;
} data;

void skein_rand_seed(threefish_param_t *tparam, char seed[32])
{
	memset(data.state, 0, sizeof(data.state));
    15b2:	20 e2       	ldi	r18, 0x20	; 32
    15b4:	e6 e7       	ldi	r30, 0x76	; 118
    15b6:	f1 e0       	ldi	r31, 0x01	; 1
    15b8:	df 01       	movw	r26, r30
    15ba:	1d 92       	st	X+, r1
    15bc:	2a 95       	dec	r18
    15be:	e9 f7       	brne	.-6      	; 0x15ba <skein_rand_seed+0x8>
	skein_rand_reseed(tparam, seed);
    15c0:	0c 94 c4 0a 	jmp	0x1588	; 0x1588 <skein_rand_reseed>

000015c4 <skein_rand_next>:
	data.random_len = 0;
}

void skein_rand_next(threefish_param_t *tparam)
{
	memcpy(tparam->key, data.state, 32);
    15c4:	20 e2       	ldi	r18, 0x20	; 32
    15c6:	e6 e7       	ldi	r30, 0x76	; 118
    15c8:	f1 e0       	ldi	r31, 0x01	; 1
    15ca:	dc 01       	movw	r26, r24
    15cc:	18 96       	adiw	r26, 0x08	; 8
    15ce:	01 90       	ld	r0, Z+
    15d0:	0d 92       	st	X+, r0
    15d2:	2a 95       	dec	r18
    15d4:	e1 f7       	brne	.-8      	; 0x15ce <skein_rand_next+0xa>
	data.block = 0;
    15d6:	10 92 b7 01 	sts	0x01B7, r1
	ubi_iterate(tparam, &data.block, 1, Tout|SKEIN_SINGLE, 0, data.state);
    15da:	66 e7       	ldi	r22, 0x76	; 118
    15dc:	71 e0       	ldi	r23, 0x01	; 1
    15de:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <ubi_iterate.constprop.0>
	data.random_len = 0;
    15e2:	10 92 b6 01 	sts	0x01B6, r1
    15e6:	08 95       	ret

000015e8 <skein_rand>:
}

char skein_rand(threefish_param_t *tparam)
{
    15e8:	cf 93       	push	r28
    15ea:	df 93       	push	r29
    15ec:	ec 01       	movw	r28, r24
	if (!data.random_len) {
    15ee:	80 91 b6 01 	lds	r24, 0x01B6
    15f2:	81 11       	cpse	r24, r1
    15f4:	14 c0       	rjmp	.+40     	; 0x161e <skein_rand+0x36>
		if (data.block == 255) skein_rand_next(tparam);
    15f6:	80 91 b7 01 	lds	r24, 0x01B7
    15fa:	8f 3f       	cpi	r24, 0xFF	; 255
    15fc:	19 f4       	brne	.+6      	; 0x1604 <skein_rand+0x1c>
    15fe:	ce 01       	movw	r24, r28
    1600:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <skein_rand_next>
		data.block++;
    1604:	80 91 b7 01 	lds	r24, 0x01B7
    1608:	8f 5f       	subi	r24, 0xFF	; 255
    160a:	80 93 b7 01 	sts	0x01B7, r24
		ubi_iterate(tparam, &data.block, 1, Tout|SKEIN_SINGLE, 0, data.random);
    160e:	66 e9       	ldi	r22, 0x96	; 150
    1610:	71 e0       	ldi	r23, 0x01	; 1
    1612:	ce 01       	movw	r24, r28
    1614:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <ubi_iterate.constprop.0>
		data.random_len = 32;
    1618:	80 e2       	ldi	r24, 0x20	; 32
    161a:	80 93 b6 01 	sts	0x01B6, r24
	}
	return data.random[--data.random_len];
    161e:	e0 91 b6 01 	lds	r30, 0x01B6
    1622:	e1 50       	subi	r30, 0x01	; 1
    1624:	e0 93 b6 01 	sts	0x01B6, r30
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	ea 58       	subi	r30, 0x8A	; 138
    162c:	fe 4f       	sbci	r31, 0xFE	; 254
}
    162e:	80 a1       	ldd	r24, Z+32	; 0x20
    1630:	df 91       	pop	r29
    1632:	cf 91       	pop	r28
    1634:	08 95       	ret

00001636 <ubi_iterate>:
	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

inline static const char *ubi_iterate(threefish_param_t *tparam, const char *message, char message_len, short tweak7, unsigned long position_offset, char *out)
{
    1636:	2f 92       	push	r2
    1638:	3f 92       	push	r3
    163a:	4f 92       	push	r4
    163c:	5f 92       	push	r5
    163e:	6f 92       	push	r6
    1640:	7f 92       	push	r7
    1642:	8f 92       	push	r8
    1644:	9f 92       	push	r9
    1646:	af 92       	push	r10
    1648:	bf 92       	push	r11
    164a:	cf 92       	push	r12
    164c:	df 92       	push	r13
    164e:	ef 92       	push	r14
    1650:	ff 92       	push	r15
    1652:	0f 93       	push	r16
    1654:	1f 93       	push	r17
    1656:	cf 93       	push	r28
    1658:	df 93       	push	r29
    165a:	00 d0       	rcall	.+0      	; 0x165c <ubi_iterate+0x26>
    165c:	1f 92       	push	r1
    165e:	cd b7       	in	r28, 0x3d	; 61
    1660:	de b7       	in	r29, 0x3e	; 62
    1662:	3c 01       	movw	r6, r24
    1664:	7b 83       	std	Y+3, r23	; 0x03
    1666:	6a 83       	std	Y+2, r22	; 0x02
    1668:	34 2e       	mov	r3, r20
    166a:	29 01       	movw	r4, r18
    166c:	47 01       	movw	r8, r14
    166e:	58 01       	movw	r10, r16
    1670:	2c 2c       	mov	r2, r12
    1672:	d9 82       	std	Y+1, r13	; 0x01
	char i;
	const char *real_msg = message;

	if (message_len < 32) {
    1674:	2f e1       	ldi	r18, 0x1F	; 31
    1676:	24 17       	cp	r18, r20
    1678:	b0 f0       	brcs	.+44     	; 0x16a6 <ubi_iterate+0x70>
		memcpy(tparam->text, message, message_len);
    167a:	c4 2e       	mov	r12, r20
    167c:	d1 2c       	mov	r13, r1
    167e:	8c 01       	movw	r16, r24
    1680:	08 5d       	subi	r16, 0xD8	; 216
    1682:	1f 4f       	sbci	r17, 0xFF	; 255
    1684:	a6 01       	movw	r20, r12
    1686:	c8 01       	movw	r24, r16
    1688:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <memcpy>
		memset(tparam->text+message_len, 0, 32-message_len);
    168c:	40 e2       	ldi	r20, 0x20	; 32
    168e:	50 e0       	ldi	r21, 0x00	; 0
    1690:	4c 19       	sub	r20, r12
    1692:	5d 09       	sbc	r21, r13
    1694:	c6 01       	movw	r24, r12
    1696:	88 96       	adiw	r24, 0x28	; 40
    1698:	60 e0       	ldi	r22, 0x00	; 0
    169a:	70 e0       	ldi	r23, 0x00	; 0
    169c:	86 0d       	add	r24, r6
    169e:	97 1d       	adc	r25, r7
    16a0:	0e 94 db 14 	call	0x29b6	; 0x29b6 <memset>
    16a4:	02 c0       	rjmp	.+4      	; 0x16aa <ubi_iterate+0x74>
    16a6:	0a 81       	ldd	r16, Y+2	; 0x02
    16a8:	1b 81       	ldd	r17, Y+3	; 0x03
		message = tparam->text;
	}
	threefish_256_enc(tparam, tweak7, 0, 0, 0, 0, 0, position_offset >> 16, position_offset & 0xffff, message, out);
    16aa:	c5 01       	movw	r24, r10
    16ac:	aa 27       	eor	r26, r26
    16ae:	bb 27       	eor	r27, r27
    16b0:	e9 81       	ldd	r30, Y+1	; 0x01
    16b2:	ef 93       	push	r30
    16b4:	2f 92       	push	r2
    16b6:	1f 93       	push	r17
    16b8:	0f 93       	push	r16
    16ba:	5c 01       	movw	r10, r24
    16bc:	c1 2c       	mov	r12, r1
    16be:	d1 2c       	mov	r13, r1
    16c0:	e1 2c       	mov	r14, r1
    16c2:	f1 2c       	mov	r15, r1
    16c4:	00 e0       	ldi	r16, 0x00	; 0
    16c6:	10 e0       	ldi	r17, 0x00	; 0
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	40 e0       	ldi	r20, 0x00	; 0
    16ce:	50 e0       	ldi	r21, 0x00	; 0
    16d0:	b2 01       	movw	r22, r4
    16d2:	c3 01       	movw	r24, r6
    16d4:	0e 94 bc 09 	call	0x1378	; 0x1378 <threefish_256_enc>
    16d8:	9a 81       	ldd	r25, Y+2	; 0x02
    16da:	a2 2d       	mov	r26, r2
    16dc:	b9 81       	ldd	r27, Y+1	; 0x01
	for (i = 0; i < message_len; i++) out[i] ^= *real_msg++;
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	0f 90       	pop	r0
    16e4:	0f 90       	pop	r0
    16e6:	e9 2f       	mov	r30, r25
    16e8:	fb 81       	ldd	r31, Y+3	; 0x03
    16ea:	8e 2f       	mov	r24, r30
    16ec:	89 1b       	sub	r24, r25
    16ee:	83 15       	cp	r24, r3
    16f0:	28 f4       	brcc	.+10     	; 0x16fc <ubi_iterate+0xc6>
    16f2:	21 91       	ld	r18, Z+
    16f4:	8c 91       	ld	r24, X
    16f6:	82 27       	eor	r24, r18
    16f8:	8d 93       	st	X+, r24
    16fa:	f7 cf       	rjmp	.-18     	; 0x16ea <ubi_iterate+0xb4>
	return real_msg;
}
    16fc:	8a 81       	ldd	r24, Y+2	; 0x02
    16fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1700:	83 0d       	add	r24, r3
    1702:	91 1d       	adc	r25, r1
    1704:	0f 90       	pop	r0
    1706:	0f 90       	pop	r0
    1708:	0f 90       	pop	r0
    170a:	df 91       	pop	r29
    170c:	cf 91       	pop	r28
    170e:	1f 91       	pop	r17
    1710:	0f 91       	pop	r16
    1712:	ff 90       	pop	r15
    1714:	ef 90       	pop	r14
    1716:	df 90       	pop	r13
    1718:	cf 90       	pop	r12
    171a:	bf 90       	pop	r11
    171c:	af 90       	pop	r10
    171e:	9f 90       	pop	r9
    1720:	8f 90       	pop	r8
    1722:	7f 90       	pop	r7
    1724:	6f 90       	pop	r6
    1726:	5f 90       	pop	r5
    1728:	4f 90       	pop	r4
    172a:	3f 90       	pop	r3
    172c:	2f 90       	pop	r2
    172e:	08 95       	ret

00001730 <skein_256_256_default_iv>:

char skein_iv[32];

void skein_256_256_default_iv()
{
	memcpy_P(skein_iv, skein_default_iv, 32);
    1730:	40 e2       	ldi	r20, 0x20	; 32
    1732:	50 e0       	ldi	r21, 0x00	; 0
    1734:	60 e7       	ldi	r22, 0x70	; 112
    1736:	70 e0       	ldi	r23, 0x00	; 0
    1738:	86 ec       	ldi	r24, 0xC6	; 198
    173a:	91 e0       	ldi	r25, 0x01	; 1
    173c:	0c 94 c9 14 	jmp	0x2992	; 0x2992 <memcpy_P>

00001740 <skein_256_256_personalize_M>:
}

void skein_256_256_personalize_M(threefish_param_t *tparam)
{
    1740:	cf 92       	push	r12
    1742:	df 92       	push	r13
    1744:	ef 92       	push	r14
    1746:	ff 92       	push	r15
    1748:	0f 93       	push	r16
    174a:	1f 93       	push	r17
    174c:	cf 93       	push	r28
    174e:	df 93       	push	r29
    1750:	ec 01       	movw	r28, r24
	char len = 31;
	memcpy_P(tparam->key, skein_default_iv, 32);
    1752:	40 e2       	ldi	r20, 0x20	; 32
    1754:	50 e0       	ldi	r21, 0x00	; 0
    1756:	60 e7       	ldi	r22, 0x70	; 112
    1758:	70 e0       	ldi	r23, 0x00	; 0
    175a:	08 96       	adiw	r24, 0x08	; 8
    175c:	0e 94 c9 14 	call	0x2992	; 0x2992 <memcpy_P>
	memcpy_P(skein_iv, skein_default_iv, 32);
}

void skein_256_256_personalize_M(threefish_param_t *tparam)
{
	char len = 31;
    1760:	8f e1       	ldi	r24, 0x1F	; 31
	memcpy_P(tparam->key, skein_default_iv, 32);
	while (len >= 0 && !tparam->text[len]) len--;
    1762:	e8 2e       	mov	r14, r24
    1764:	f1 2c       	mov	r15, r1
    1766:	fe 01       	movw	r30, r28
    1768:	ee 0d       	add	r30, r14
    176a:	ff 1d       	adc	r31, r15
    176c:	90 a5       	ldd	r25, Z+40	; 0x28
    176e:	91 11       	cpse	r25, r1
    1770:	02 c0       	rjmp	.+4      	; 0x1776 <skein_256_256_personalize_M+0x36>
    1772:	81 50       	subi	r24, 0x01	; 1
    1774:	f6 cf       	rjmp	.-20     	; 0x1762 <skein_256_256_personalize_M+0x22>
	ubi_iterate(tparam, tparam->text, 32, (SKEIN_SINGLE | Tprs) << 8, len+1, skein_iv);
    1776:	8f ef       	ldi	r24, 0xFF	; 255
    1778:	e8 1a       	sub	r14, r24
    177a:	f8 0a       	sbc	r15, r24
    177c:	00 27       	eor	r16, r16
    177e:	f7 fc       	sbrc	r15, 7
    1780:	00 95       	com	r16
    1782:	10 2f       	mov	r17, r16
    1784:	be 01       	movw	r22, r28
    1786:	68 5d       	subi	r22, 0xD8	; 216
    1788:	7f 4f       	sbci	r23, 0xFF	; 255
    178a:	96 ec       	ldi	r25, 0xC6	; 198
    178c:	c9 2e       	mov	r12, r25
    178e:	91 e0       	ldi	r25, 0x01	; 1
    1790:	d9 2e       	mov	r13, r25
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	38 ec       	ldi	r19, 0xC8	; 200
    1796:	40 e2       	ldi	r20, 0x20	; 32
    1798:	ce 01       	movw	r24, r28
    179a:	0e 94 1b 0b 	call	0x1636	; 0x1636 <ubi_iterate>
}
    179e:	df 91       	pop	r29
    17a0:	cf 91       	pop	r28
    17a2:	1f 91       	pop	r17
    17a4:	0f 91       	pop	r16
    17a6:	ff 90       	pop	r15
    17a8:	ef 90       	pop	r14
    17aa:	df 90       	pop	r13
    17ac:	cf 90       	pop	r12
    17ae:	08 95       	ret

000017b0 <skein_256_256>:

void skein_256_256(threefish_param_t *tparam, const char *message, short message_len, char *out)
{
    17b0:	2f 92       	push	r2
    17b2:	3f 92       	push	r3
    17b4:	4f 92       	push	r4
    17b6:	5f 92       	push	r5
    17b8:	6f 92       	push	r6
    17ba:	7f 92       	push	r7
    17bc:	8f 92       	push	r8
    17be:	9f 92       	push	r9
    17c0:	af 92       	push	r10
    17c2:	bf 92       	push	r11
    17c4:	cf 92       	push	r12
    17c6:	df 92       	push	r13
    17c8:	ef 92       	push	r14
    17ca:	ff 92       	push	r15
    17cc:	0f 93       	push	r16
    17ce:	1f 93       	push	r17
    17d0:	cf 93       	push	r28
    17d2:	df 93       	push	r29
    17d4:	ec 01       	movw	r28, r24
    17d6:	3a 01       	movw	r6, r20
    17d8:	19 01       	movw	r2, r18
	char tweak7 = SKEIN_FIRST | Tmsg;
	short position_offset = 0;
	memcpy(tparam->key, skein_iv, 32);
    17da:	80 e2       	ldi	r24, 0x20	; 32
    17dc:	e6 ec       	ldi	r30, 0xC6	; 198
    17de:	f1 e0       	ldi	r31, 0x01	; 1
    17e0:	de 01       	movw	r26, r28
    17e2:	18 96       	adiw	r26, 0x08	; 8
    17e4:	01 90       	ld	r0, Z+
    17e6:	0d 92       	st	X+, r0
    17e8:	8a 95       	dec	r24
    17ea:	e1 f7       	brne	.-8      	; 0x17e4 <skein_256_256+0x34>

	while (message_len > 32) {
    17ec:	81 2c       	mov	r8, r1
    17ee:	91 2c       	mov	r9, r1
    17f0:	54 01       	movw	r10, r8
	ubi_iterate(tparam, tparam->text, 32, (SKEIN_SINGLE | Tprs) << 8, len+1, skein_iv);
}

void skein_256_256(threefish_param_t *tparam, const char *message, short message_len, char *out)
{
	char tweak7 = SKEIN_FIRST | Tmsg;
    17f2:	30 eb       	ldi	r19, 0xB0	; 176
    17f4:	ce 01       	movw	r24, r28
    17f6:	08 96       	adiw	r24, 0x08	; 8
    17f8:	2c 01       	movw	r4, r24
    17fa:	74 01       	movw	r14, r8
    17fc:	80 e2       	ldi	r24, 0x20	; 32
    17fe:	88 0e       	add	r8, r24
    1800:	91 1c       	adc	r9, r1
    1802:	a1 1c       	adc	r10, r1
    1804:	b1 1c       	adc	r11, r1
	short position_offset = 0;
	memcpy(tparam->key, skein_iv, 32);

	while (message_len > 32) {
    1806:	91 e2       	ldi	r25, 0x21	; 33
    1808:	69 16       	cp	r6, r25
    180a:	71 04       	cpc	r7, r1
    180c:	7c f0       	brlt	.+30     	; 0x182c <skein_256_256+0x7c>
		position_offset += 32;
		message = ubi_iterate(tparam, message, 32, tweak7, position_offset, tparam->key);
    180e:	23 2f       	mov	r18, r19
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	62 01       	movw	r12, r4
    1814:	85 01       	movw	r16, r10
    1816:	74 01       	movw	r14, r8
    1818:	40 e2       	ldi	r20, 0x20	; 32
    181a:	ce 01       	movw	r24, r28
    181c:	0e 94 1b 0b 	call	0x1636	; 0x1636 <ubi_iterate>
    1820:	bc 01       	movw	r22, r24
		tweak7 &= SKEIN_FIRST;
		message_len -= 32;
    1822:	90 e2       	ldi	r25, 0x20	; 32
    1824:	69 1a       	sub	r6, r25
    1826:	71 08       	sbc	r7, r1
	memcpy(tparam->key, skein_iv, 32);

	while (message_len > 32) {
		position_offset += 32;
		message = ubi_iterate(tparam, message, 32, tweak7, position_offset, tparam->key);
		tweak7 &= SKEIN_FIRST;
    1828:	30 e8       	ldi	r19, 0x80	; 128
    182a:	e7 cf       	rjmp	.-50     	; 0x17fa <skein_256_256+0x4a>
		message_len -= 32;
	}

	tweak7 |= SKEIN_LAST;
	position_offset += message_len;
    182c:	e6 0c       	add	r14, r6
    182e:	f7 1c       	adc	r15, r7
	ubi_iterate(tparam, message, message_len, tweak7 << 8, position_offset, tparam->key);
    1830:	00 27       	eor	r16, r16
    1832:	f7 fc       	sbrc	r15, 7
    1834:	00 95       	com	r16
    1836:	10 2f       	mov	r17, r16
		message = ubi_iterate(tparam, message, 32, tweak7, position_offset, tparam->key);
		tweak7 &= SKEIN_FIRST;
		message_len -= 32;
	}

	tweak7 |= SKEIN_LAST;
    1838:	30 64       	ori	r19, 0x40	; 64
	position_offset += message_len;
	ubi_iterate(tparam, message, message_len, tweak7 << 8, position_offset, tparam->key);
    183a:	62 01       	movw	r12, r4
    183c:	20 e0       	ldi	r18, 0x00	; 0
    183e:	46 2d       	mov	r20, r6
    1840:	ce 01       	movw	r24, r28
    1842:	0e 94 1b 0b 	call	0x1636	; 0x1636 <ubi_iterate>

	ubi_iterate(tparam, NULL, 0, (SKEIN_SINGLE | Tout) << 8, 8, out);
    1846:	61 01       	movw	r12, r2
    1848:	18 e0       	ldi	r17, 0x08	; 8
    184a:	e1 2e       	mov	r14, r17
    184c:	f1 2c       	mov	r15, r1
    184e:	00 e0       	ldi	r16, 0x00	; 0
    1850:	10 e0       	ldi	r17, 0x00	; 0
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	3f ef       	ldi	r19, 0xFF	; 255
    1856:	40 e0       	ldi	r20, 0x00	; 0
    1858:	60 e0       	ldi	r22, 0x00	; 0
    185a:	70 e0       	ldi	r23, 0x00	; 0
    185c:	ce 01       	movw	r24, r28
    185e:	0e 94 1b 0b 	call	0x1636	; 0x1636 <ubi_iterate>
}
    1862:	df 91       	pop	r29
    1864:	cf 91       	pop	r28
    1866:	1f 91       	pop	r17
    1868:	0f 91       	pop	r16
    186a:	ff 90       	pop	r15
    186c:	ef 90       	pop	r14
    186e:	df 90       	pop	r13
    1870:	cf 90       	pop	r12
    1872:	bf 90       	pop	r11
    1874:	af 90       	pop	r10
    1876:	9f 90       	pop	r9
    1878:	8f 90       	pop	r8
    187a:	7f 90       	pop	r7
    187c:	6f 90       	pop	r6
    187e:	5f 90       	pop	r5
    1880:	4f 90       	pop	r4
    1882:	3f 90       	pop	r3
    1884:	2f 90       	pop	r2
    1886:	08 95       	ret

00001888 <skein_256_256_start>:

void skein_256_256_start(threefish_param_t *tparam)
{
    1888:	dc 01       	movw	r26, r24
	unsigned long *offset = (unsigned long *)tparam->stack;
	*offset = 0;
    188a:	1d 92       	st	X+, r1
    188c:	1d 92       	st	X+, r1
    188e:	1d 92       	st	X+, r1
    1890:	1c 92       	st	X, r1
    1892:	13 97       	sbiw	r26, 0x03	; 3
	tparam->stack[4] = SKEIN_FIRST;
    1894:	80 e8       	ldi	r24, 0x80	; 128
    1896:	14 96       	adiw	r26, 0x04	; 4
    1898:	8c 93       	st	X, r24
    189a:	14 97       	sbiw	r26, 0x04	; 4
	memcpy(tparam->key, skein_iv, 32);
    189c:	80 e2       	ldi	r24, 0x20	; 32
    189e:	e6 ec       	ldi	r30, 0xC6	; 198
    18a0:	f1 e0       	ldi	r31, 0x01	; 1
    18a2:	18 96       	adiw	r26, 0x08	; 8
    18a4:	01 90       	ld	r0, Z+
    18a6:	0d 92       	st	X+, r0
    18a8:	8a 95       	dec	r24
    18aa:	e1 f7       	brne	.-8      	; 0x18a4 <skein_256_256_start+0x1c>
    18ac:	08 95       	ret

000018ae <skein_256_256_add>:
}

void skein_256_256_add(threefish_param_t *tparam, const char *message)
{
    18ae:	cf 92       	push	r12
    18b0:	df 92       	push	r13
    18b2:	ef 92       	push	r14
    18b4:	ff 92       	push	r15
    18b6:	0f 93       	push	r16
    18b8:	1f 93       	push	r17
    18ba:	cf 93       	push	r28
    18bc:	df 93       	push	r29
    18be:	ec 01       	movw	r28, r24
	unsigned long *offset = (unsigned long *)tparam->stack;
	char flags = tparam->stack[4];
    18c0:	3c 81       	ldd	r19, Y+4	; 0x04

	ubi_iterate(tparam, message, 32, (flags | Tmsg) << 8, *offset+=32, tparam->key);
    18c2:	e8 80       	ld	r14, Y
    18c4:	f9 80       	ldd	r15, Y+1	; 0x01
    18c6:	0a 81       	ldd	r16, Y+2	; 0x02
    18c8:	1b 81       	ldd	r17, Y+3	; 0x03
    18ca:	80 e2       	ldi	r24, 0x20	; 32
    18cc:	e8 0e       	add	r14, r24
    18ce:	f1 1c       	adc	r15, r1
    18d0:	01 1d       	adc	r16, r1
    18d2:	11 1d       	adc	r17, r1
    18d4:	e8 82       	st	Y, r14
    18d6:	f9 82       	std	Y+1, r15	; 0x01
    18d8:	0a 83       	std	Y+2, r16	; 0x02
    18da:	1b 83       	std	Y+3, r17	; 0x03
    18dc:	6e 01       	movw	r12, r28
    18de:	88 e0       	ldi	r24, 0x08	; 8
    18e0:	c8 0e       	add	r12, r24
    18e2:	d1 1c       	adc	r13, r1
    18e4:	30 63       	ori	r19, 0x30	; 48
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	40 e2       	ldi	r20, 0x20	; 32
    18ea:	ce 01       	movw	r24, r28
    18ec:	0e 94 1b 0b 	call	0x1636	; 0x1636 <ubi_iterate>
	tparam->stack[4] = 0;
    18f0:	1c 82       	std	Y+4, r1	; 0x04
}
    18f2:	df 91       	pop	r29
    18f4:	cf 91       	pop	r28
    18f6:	1f 91       	pop	r17
    18f8:	0f 91       	pop	r16
    18fa:	ff 90       	pop	r15
    18fc:	ef 90       	pop	r14
    18fe:	df 90       	pop	r13
    1900:	cf 90       	pop	r12
    1902:	08 95       	ret

00001904 <skein_256_256_finish>:

void skein_256_256_finish(threefish_param_t *tparam, const char *message, char message_len, char *out)
{
    1904:	af 92       	push	r10
    1906:	bf 92       	push	r11
    1908:	cf 92       	push	r12
    190a:	df 92       	push	r13
    190c:	ef 92       	push	r14
    190e:	ff 92       	push	r15
    1910:	0f 93       	push	r16
    1912:	1f 93       	push	r17
    1914:	cf 93       	push	r28
    1916:	df 93       	push	r29
    1918:	5c 01       	movw	r10, r24
    191a:	e9 01       	movw	r28, r18
	unsigned long *offset = (unsigned long *)tparam->stack;
	char flags = tparam->stack[4] | SKEIN_LAST;
    191c:	fc 01       	movw	r30, r24
    191e:	34 81       	ldd	r19, Z+4	; 0x04

	ubi_iterate(tparam, message, message_len, (flags | Tmsg) << 8, *offset+=message_len, tparam->key);
    1920:	e0 80       	ld	r14, Z
    1922:	f1 80       	ldd	r15, Z+1	; 0x01
    1924:	02 81       	ldd	r16, Z+2	; 0x02
    1926:	13 81       	ldd	r17, Z+3	; 0x03
    1928:	e4 0e       	add	r14, r20
    192a:	f1 1c       	adc	r15, r1
    192c:	01 1d       	adc	r16, r1
    192e:	11 1d       	adc	r17, r1
    1930:	e0 82       	st	Z, r14
    1932:	f1 82       	std	Z+1, r15	; 0x01
    1934:	02 83       	std	Z+2, r16	; 0x02
    1936:	13 83       	std	Z+3, r17	; 0x03
    1938:	6c 01       	movw	r12, r24
    193a:	f8 e0       	ldi	r31, 0x08	; 8
    193c:	cf 0e       	add	r12, r31
    193e:	d1 1c       	adc	r13, r1
    1940:	30 67       	ori	r19, 0x70	; 112
    1942:	20 e0       	ldi	r18, 0x00	; 0
    1944:	0e 94 1b 0b 	call	0x1636	; 0x1636 <ubi_iterate>
	ubi_iterate(tparam, NULL, 0, (SKEIN_SINGLE | Tout) << 8, 8, out);
    1948:	6e 01       	movw	r12, r28
    194a:	18 e0       	ldi	r17, 0x08	; 8
    194c:	e1 2e       	mov	r14, r17
    194e:	f1 2c       	mov	r15, r1
    1950:	00 e0       	ldi	r16, 0x00	; 0
    1952:	10 e0       	ldi	r17, 0x00	; 0
    1954:	20 e0       	ldi	r18, 0x00	; 0
    1956:	3f ef       	ldi	r19, 0xFF	; 255
    1958:	40 e0       	ldi	r20, 0x00	; 0
    195a:	60 e0       	ldi	r22, 0x00	; 0
    195c:	70 e0       	ldi	r23, 0x00	; 0
    195e:	c5 01       	movw	r24, r10
    1960:	0e 94 1b 0b 	call	0x1636	; 0x1636 <ubi_iterate>
}
    1964:	df 91       	pop	r29
    1966:	cf 91       	pop	r28
    1968:	1f 91       	pop	r17
    196a:	0f 91       	pop	r16
    196c:	ff 90       	pop	r15
    196e:	ef 90       	pop	r14
    1970:	df 90       	pop	r13
    1972:	cf 90       	pop	r12
    1974:	bf 90       	pop	r11
    1976:	af 90       	pop	r10
    1978:	08 95       	ret

0000197a <aes128_dec>:

#include "aes_dec.h"

void aes128_dec(void* buffer, aes128_ctx_t* ctx) {
	// 10 rounds for 128bit AES
	aes_decrypt_core(buffer, (aes_genctx_t*)ctx, 10);
    197a:	4a e0       	ldi	r20, 0x0A	; 10
    197c:	0c 94 9c 0d 	jmp	0x1b38	; 0x1b38 <aes_decrypt_core>

00001980 <aes_invshiftcol>:
#include <avr/pgmspace.h>

/**************************************************/
// does not affect the masking process
void aes_invshiftcol(void* data, uint8_t shift)
{
    1980:	cf 93       	push	r28
    1982:	df 93       	push	r29
    1984:	00 d0       	rcall	.+0      	; 0x1986 <aes_invshiftcol+0x6>
    1986:	00 d0       	rcall	.+0      	; 0x1988 <aes_invshiftcol+0x8>
    1988:	cd b7       	in	r28, 0x3d	; 61
    198a:	de b7       	in	r29, 0x3e	; 62
    198c:	fc 01       	movw	r30, r24
	uint8_t tmp[4];
	tmp[0] = ((uint8_t*)data)[ 0];
    198e:	80 81       	ld	r24, Z
    1990:	89 83       	std	Y+1, r24	; 0x01
	tmp[1] = ((uint8_t*)data)[ 4];
    1992:	84 81       	ldd	r24, Z+4	; 0x04
    1994:	8a 83       	std	Y+2, r24	; 0x02
	tmp[2] = ((uint8_t*)data)[ 8];
    1996:	80 85       	ldd	r24, Z+8	; 0x08
    1998:	8b 83       	std	Y+3, r24	; 0x03
	tmp[3] = ((uint8_t*)data)[12];
    199a:	84 85       	ldd	r24, Z+12	; 0x0c
    199c:	8c 83       	std	Y+4, r24	; 0x04
	((uint8_t*)data)[ 0] = tmp[(4-shift+0)&3];
    199e:	70 e0       	ldi	r23, 0x00	; 0
    19a0:	aa 27       	eor	r26, r26
    19a2:	bb 27       	eor	r27, r27
    19a4:	a6 1b       	sub	r26, r22
    19a6:	b7 0b       	sbc	r27, r23
    19a8:	a3 70       	andi	r26, 0x03	; 3
    19aa:	bb 27       	eor	r27, r27
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	8c 0f       	add	r24, r28
    19b2:	9d 1f       	adc	r25, r29
    19b4:	a8 0f       	add	r26, r24
    19b6:	b9 1f       	adc	r27, r25
    19b8:	8c 91       	ld	r24, X
    19ba:	80 83       	st	Z, r24
	((uint8_t*)data)[ 4] = tmp[(4-shift+1)&3];
    19bc:	a5 e0       	ldi	r26, 0x05	; 5
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	a6 1b       	sub	r26, r22
    19c2:	b7 0b       	sbc	r27, r23
    19c4:	a3 70       	andi	r26, 0x03	; 3
    19c6:	bb 27       	eor	r27, r27
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	8c 0f       	add	r24, r28
    19ce:	9d 1f       	adc	r25, r29
    19d0:	a8 0f       	add	r26, r24
    19d2:	b9 1f       	adc	r27, r25
    19d4:	8c 91       	ld	r24, X
    19d6:	84 83       	std	Z+4, r24	; 0x04
	((uint8_t*)data)[ 8] = tmp[(4-shift+2)&3];
    19d8:	a6 e0       	ldi	r26, 0x06	; 6
    19da:	b0 e0       	ldi	r27, 0x00	; 0
    19dc:	a6 1b       	sub	r26, r22
    19de:	b7 0b       	sbc	r27, r23
    19e0:	a3 70       	andi	r26, 0x03	; 3
    19e2:	bb 27       	eor	r27, r27
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	8c 0f       	add	r24, r28
    19ea:	9d 1f       	adc	r25, r29
    19ec:	a8 0f       	add	r26, r24
    19ee:	b9 1f       	adc	r27, r25
    19f0:	8c 91       	ld	r24, X
    19f2:	80 87       	std	Z+8, r24	; 0x08
	((uint8_t*)data)[12] = tmp[(4-shift+3)&3];
    19f4:	db 01       	movw	r26, r22
    19f6:	a0 95       	com	r26
    19f8:	b0 95       	com	r27
    19fa:	a3 70       	andi	r26, 0x03	; 3
    19fc:	bb 27       	eor	r27, r27
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	8c 0f       	add	r24, r28
    1a04:	9d 1f       	adc	r25, r29
    1a06:	a8 0f       	add	r26, r24
    1a08:	b9 1f       	adc	r27, r25
    1a0a:	8c 91       	ld	r24, X
    1a0c:	84 87       	std	Z+12, r24	; 0x0c
}
    1a0e:	0f 90       	pop	r0
    1a10:	0f 90       	pop	r0
    1a12:	0f 90       	pop	r0
    1a14:	0f 90       	pop	r0
    1a16:	df 91       	pop	r29
    1a18:	cf 91       	pop	r28
    1a1a:	08 95       	ret

00001a1c <aes_invmixed_columns>:

// MIXED Columns
void aes_invmixed_columns(uint8_t* s, uint8_t maxIndex)
{
    1a1c:	5f 92       	push	r5
    1a1e:	6f 92       	push	r6
    1a20:	7f 92       	push	r7
    1a22:	8f 92       	push	r8
    1a24:	9f 92       	push	r9
    1a26:	af 92       	push	r10
    1a28:	bf 92       	push	r11
    1a2a:	cf 92       	push	r12
    1a2c:	df 92       	push	r13
    1a2e:	ef 92       	push	r14
    1a30:	ff 92       	push	r15
    1a32:	0f 93       	push	r16
    1a34:	1f 93       	push	r17
    1a36:	cf 93       	push	r28
    1a38:	df 93       	push	r29
    1a3a:	96 2e       	mov	r9, r22

	uint8_t i;
	uint8_t t,u,v,w;

	/* mixColums */
	for(i = 0; i < maxIndex / 4; ++i){
    1a3c:	96 94       	lsr	r9
    1a3e:	96 94       	lsr	r9
    1a40:	7c 01       	movw	r14, r24
    1a42:	23 e0       	ldi	r18, 0x03	; 3
    1a44:	e2 0e       	add	r14, r18
    1a46:	f1 1c       	adc	r15, r1
    1a48:	ec 01       	movw	r28, r24
    1a4a:	8c 01       	movw	r16, r24
    1a4c:	0e 5f       	subi	r16, 0xFE	; 254
    1a4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a50:	6c 01       	movw	r12, r24
    1a52:	8f ef       	ldi	r24, 0xFF	; 255
    1a54:	c8 1a       	sub	r12, r24
    1a56:	d8 0a       	sbc	r13, r24
    1a58:	81 2c       	mov	r8, r1
    1a5a:	89 14       	cp	r8, r9
    1a5c:	09 f4       	brne	.+2      	; 0x1a60 <aes_invmixed_columns+0x44>
    1a5e:	5c c0       	rjmp	.+184    	; 0x1b18 <aes_invmixed_columns+0xfc>
		// a2 XOR a3
		t = s[4*i+3] ^ s[4*i+2];
    1a60:	f8 01       	movw	r30, r16
    1a62:	a0 80       	ld	r10, Z
    1a64:	f7 01       	movw	r30, r14
    1a66:	80 81       	ld	r24, Z
    1a68:	a8 26       	eor	r10, r24

		// a0 XOR a1
		u = s[4*i+1] ^ s[4*i+0];
    1a6a:	b8 80       	ld	r11, Y
    1a6c:	f6 01       	movw	r30, r12
    1a6e:	80 81       	ld	r24, Z
    1a70:	b8 26       	eor	r11, r24

		// a0 XOR a1 XOR a2 XOR a3		= A
		v = t ^ u;
    1a72:	6b 2d       	mov	r22, r11
    1a74:	6a 25       	eor	r22, r10

		// 9 * A						= B
		v = gf256mul(0x09, v, 0x1b); 			// 0x1b strange modulo GF8
    1a76:	4b e1       	ldi	r20, 0x1B	; 27
    1a78:	89 e0       	ldi	r24, 0x09	; 9
    1a7a:	0e 94 67 0a 	call	0x14ce	; 0x14ce <gf256mul>
    1a7e:	68 2e       	mov	r6, r24

		// (4 * (a0 XOR a2)) XOR B		= C
		w = v ^ gf256mul(0x04, s[4*i+2] ^ s[4*i+0], 0x1b);
    1a80:	68 81       	ld	r22, Y
    1a82:	f8 01       	movw	r30, r16
    1a84:	80 81       	ld	r24, Z
    1a86:	68 27       	eor	r22, r24
    1a88:	4b e1       	ldi	r20, 0x1B	; 27
    1a8a:	84 e0       	ldi	r24, 0x04	; 4
    1a8c:	0e 94 67 0a 	call	0x14ce	; 0x14ce <gf256mul>
    1a90:	78 2e       	mov	r7, r24
    1a92:	76 24       	eor	r7, r6

		// (4 * (a1 XOR a3)) XOR B		= D
		v = v ^ gf256mul(0x04, s[4*i+3] ^ s[4*i+1], 0x1b);
    1a94:	f6 01       	movw	r30, r12
    1a96:	60 81       	ld	r22, Z
    1a98:	f7 01       	movw	r30, r14
    1a9a:	80 81       	ld	r24, Z
    1a9c:	68 27       	eor	r22, r24
    1a9e:	4b e1       	ldi	r20, 0x1B	; 27
    1aa0:	84 e0       	ldi	r24, 0x04	; 4
    1aa2:	0e 94 67 0a 	call	0x14ce	; 0x14ce <gf256mul>
    1aa6:	68 26       	eor	r6, r24

		// a3 XOR D XOR 2*(a0 XOR a3)	= b3
		s[4*i+3] = s[4*i+3] ^ v ^ gf256mul(0x02, s[4*i+0] ^ s[4*i+3], 0x1b);
    1aa8:	f7 01       	movw	r30, r14
    1aaa:	50 80       	ld	r5, Z
    1aac:	68 81       	ld	r22, Y
    1aae:	65 25       	eor	r22, r5
    1ab0:	4b e1       	ldi	r20, 0x1B	; 27
    1ab2:	82 e0       	ldi	r24, 0x02	; 2
    1ab4:	0e 94 67 0a 	call	0x14ce	; 0x14ce <gf256mul>
    1ab8:	85 25       	eor	r24, r5
    1aba:	86 25       	eor	r24, r6
    1abc:	f7 01       	movw	r30, r14
    1abe:	80 83       	st	Z, r24

		// a1 XOR D XOR 2*(a1 XOR a2)	= b1
		s[4*i+1] = s[4*i+1] ^ v ^ gf256mul(0x02, s[4*i+2] ^ s[4*i+1], 0x1b);
    1ac0:	f6 01       	movw	r30, r12
    1ac2:	50 80       	ld	r5, Z
    1ac4:	f8 01       	movw	r30, r16
    1ac6:	60 81       	ld	r22, Z
    1ac8:	65 25       	eor	r22, r5
    1aca:	4b e1       	ldi	r20, 0x1B	; 27
    1acc:	82 e0       	ldi	r24, 0x02	; 2
    1ace:	0e 94 67 0a 	call	0x14ce	; 0x14ce <gf256mul>
    1ad2:	85 25       	eor	r24, r5
    1ad4:	86 25       	eor	r24, r6
    1ad6:	f6 01       	movw	r30, r12
    1ad8:	80 83       	st	Z, r24

		// a2 XOR C XOR 2*(a3 XOR a2)	= b2
		s[4*i+2] = s[4*i+2] ^ w ^ gf256mul(0x02, t, 0x1b);
    1ada:	f8 01       	movw	r30, r16
    1adc:	60 80       	ld	r6, Z
    1ade:	4b e1       	ldi	r20, 0x1B	; 27
    1ae0:	6a 2d       	mov	r22, r10
    1ae2:	82 e0       	ldi	r24, 0x02	; 2
    1ae4:	0e 94 67 0a 	call	0x14ce	; 0x14ce <gf256mul>
    1ae8:	86 25       	eor	r24, r6
    1aea:	87 25       	eor	r24, r7
    1aec:	f8 01       	movw	r30, r16
    1aee:	80 83       	st	Z, r24

		// a0 XOR C XOR 2*(a0 XOR a1)
		s[4*i+0] = s[4*i+0] ^ w ^ gf256mul(0x02, u, 0x1b);
    1af0:	a8 80       	ld	r10, Y
    1af2:	4b e1       	ldi	r20, 0x1B	; 27
    1af4:	6b 2d       	mov	r22, r11
    1af6:	82 e0       	ldi	r24, 0x02	; 2
    1af8:	0e 94 67 0a 	call	0x14ce	; 0x14ce <gf256mul>
    1afc:	8a 25       	eor	r24, r10
    1afe:	87 25       	eor	r24, r7
    1b00:	88 83       	st	Y, r24

	uint8_t i;
	uint8_t t,u,v,w;

	/* mixColums */
	for(i = 0; i < maxIndex / 4; ++i){
    1b02:	83 94       	inc	r8
    1b04:	f4 e0       	ldi	r31, 0x04	; 4
    1b06:	ef 0e       	add	r14, r31
    1b08:	f1 1c       	adc	r15, r1
    1b0a:	24 96       	adiw	r28, 0x04	; 4
    1b0c:	0c 5f       	subi	r16, 0xFC	; 252
    1b0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b10:	24 e0       	ldi	r18, 0x04	; 4
    1b12:	c2 0e       	add	r12, r18
    1b14:	d1 1c       	adc	r13, r1
    1b16:	a1 cf       	rjmp	.-190    	; 0x1a5a <aes_invmixed_columns+0x3e>
		// a0 XOR C XOR 2*(a0 XOR a1)
		s[4*i+0] = s[4*i+0] ^ w ^ gf256mul(0x02, u, 0x1b);
	}

	return;
}
    1b18:	df 91       	pop	r29
    1b1a:	cf 91       	pop	r28
    1b1c:	1f 91       	pop	r17
    1b1e:	0f 91       	pop	r16
    1b20:	ff 90       	pop	r15
    1b22:	ef 90       	pop	r14
    1b24:	df 90       	pop	r13
    1b26:	cf 90       	pop	r12
    1b28:	bf 90       	pop	r11
    1b2a:	af 90       	pop	r10
    1b2c:	9f 90       	pop	r9
    1b2e:	8f 90       	pop	r8
    1b30:	7f 90       	pop	r7
    1b32:	6f 90       	pop	r6
    1b34:	5f 90       	pop	r5
    1b36:	08 95       	ret

00001b38 <aes_decrypt_core>:
}

// when decrypting the algorithm has the opposite order compared to the encryption
// the PDF gives us the encryption direction
// the comments use the naming conventions from the PDF
void aes_decrypt_core(aes_cipher_state_t* state, const aes_genctx_t* ks, uint8_t rounds){
    1b38:	8f 92       	push	r8
    1b3a:	9f 92       	push	r9
    1b3c:	af 92       	push	r10
    1b3e:	bf 92       	push	r11
    1b40:	cf 92       	push	r12
    1b42:	df 92       	push	r13
    1b44:	ef 92       	push	r14
    1b46:	ff 92       	push	r15
    1b48:	0f 93       	push	r16
    1b4a:	1f 93       	push	r17
    1b4c:	cf 93       	push	r28
    1b4e:	df 93       	push	r29
    1b50:	ec 01       	movw	r28, r24
    1b52:	8b 01       	movw	r16, r22
    1b54:	84 2e       	mov	r8, r20

	// buffer == state
	// aes_cipher_state_t represents the 4x4 byte cipher-matrix

	// "last round"
	aes_dec_firstround(state, &(ks->key[i=rounds])); // start with rounds == 10
    1b56:	7b 01       	movw	r14, r22
    1b58:	20 e1       	ldi	r18, 0x10	; 16
    1b5a:	42 9f       	mul	r20, r18
    1b5c:	e0 0c       	add	r14, r0
    1b5e:	f1 1c       	adc	r15, r1
    1b60:	11 24       	eor	r1, r1
static
void aes_dec_firstround(aes_cipher_state_t* state, const aes_roundkey_t* k){
	uint8_t i;

	// do the array permutation
	aes128_update_shuffling_array();
    1b62:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <aes128_update_shuffling_array>
    1b66:	e4 e0       	ldi	r30, 0x04	; 4
    1b68:	f1 e0       	ldi	r31, 0x01	; 1

	/* keyAdd */
	for(i=0; i<16; ++i){
		state->s[permutation_array[i]] ^= k->ks[permutation_array[i]];
    1b6a:	81 91       	ld	r24, Z+
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	9e 01       	movw	r18, r28
    1b70:	28 0f       	add	r18, r24
    1b72:	39 1f       	adc	r19, r25
    1b74:	8e 0d       	add	r24, r14
    1b76:	9f 1d       	adc	r25, r15
    1b78:	dc 01       	movw	r26, r24
    1b7a:	8c 91       	ld	r24, X
    1b7c:	d9 01       	movw	r26, r18
    1b7e:	9c 91       	ld	r25, X
    1b80:	89 27       	eor	r24, r25
    1b82:	8c 93       	st	X, r24

	// do the array permutation
	aes128_update_shuffling_array();

	/* keyAdd */
	for(i=0; i<16; ++i){
    1b84:	b1 e0       	ldi	r27, 0x01	; 1
    1b86:	e4 31       	cpi	r30, 0x14	; 20
    1b88:	fb 07       	cpc	r31, r27
    1b8a:	79 f7       	brne	.-34     	; 0x1b6a <aes_decrypt_core+0x32>
		state->s[permutation_array[i]] ^= k->ks[permutation_array[i]];
	}
	/* shiftRows */
	aes_invshiftcol(state->s+1, 1);
    1b8c:	7e 01       	movw	r14, r28
    1b8e:	ef ef       	ldi	r30, 0xFF	; 255
    1b90:	ee 1a       	sub	r14, r30
    1b92:	fe 0a       	sbc	r15, r30
    1b94:	61 e0       	ldi	r22, 0x01	; 1
    1b96:	c7 01       	movw	r24, r14
    1b98:	0e 94 c0 0c 	call	0x1980	; 0x1980 <aes_invshiftcol>
	aes_invshiftcol(state->s+2, 2);
    1b9c:	6e 01       	movw	r12, r28
    1b9e:	f2 e0       	ldi	r31, 0x02	; 2
    1ba0:	cf 0e       	add	r12, r31
    1ba2:	d1 1c       	adc	r13, r1
    1ba4:	62 e0       	ldi	r22, 0x02	; 2
    1ba6:	c6 01       	movw	r24, r12
    1ba8:	0e 94 c0 0c 	call	0x1980	; 0x1980 <aes_invshiftcol>
	aes_invshiftcol(state->s+3, 3);
    1bac:	5e 01       	movw	r10, r28
    1bae:	23 e0       	ldi	r18, 0x03	; 3
    1bb0:	a2 0e       	add	r10, r18
    1bb2:	b1 1c       	adc	r11, r1
    1bb4:	63 e0       	ldi	r22, 0x03	; 3
    1bb6:	c5 01       	movw	r24, r10
    1bb8:	0e 94 c0 0c 	call	0x1980	; 0x1980 <aes_invshiftcol>
    1bbc:	a4 e0       	ldi	r26, 0x04	; 4
    1bbe:	b1 e0       	ldi	r27, 0x01	; 1

	/* subBytes */
	for(i=0; i<16; ++i){
		state->s[permutation_array[i]] = pgm_read_byte(aes_invsbox+state->s[permutation_array[i]]);
    1bc0:	8d 91       	ld	r24, X+
    1bc2:	fe 01       	movw	r30, r28
    1bc4:	e8 0f       	add	r30, r24
    1bc6:	f1 1d       	adc	r31, r1
    1bc8:	cf 01       	movw	r24, r30
    1bca:	20 81       	ld	r18, Z
    1bcc:	e2 2f       	mov	r30, r18
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	e0 57       	subi	r30, 0x70	; 112
    1bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd4:	24 91       	lpm	r18, Z
    1bd6:	fc 01       	movw	r30, r24
    1bd8:	20 83       	st	Z, r18
	aes_invshiftcol(state->s+1, 1);
	aes_invshiftcol(state->s+2, 2);
	aes_invshiftcol(state->s+3, 3);

	/* subBytes */
	for(i=0; i<16; ++i){
    1bda:	f1 e0       	ldi	r31, 0x01	; 1
    1bdc:	a4 31       	cpi	r26, 0x14	; 20
    1bde:	bf 07       	cpc	r27, r31
    1be0:	79 f7       	brne	.-34     	; 0x1bc0 <aes_decrypt_core+0x88>
	// "last round"
	aes_dec_firstround(state, &(ks->key[i=rounds])); // start with rounds == 10

	// 9 "normal rounds"
	// including "first round" and "second last round"
	for(;rounds>1;--rounds){
    1be2:	21 e0       	ldi	r18, 0x01	; 1
    1be4:	28 15       	cp	r18, r8
    1be6:	08 f0       	brcs	.+2      	; 0x1bea <aes_decrypt_core+0xb2>
    1be8:	3c c0       	rjmp	.+120    	; 0x1c62 <aes_decrypt_core+0x12a>
		// i is the counter for the roundkey which is applied backwards
		--i;
    1bea:	99 24       	eor	r9, r9
    1bec:	9a 94       	dec	r9
    1bee:	98 0c       	add	r9, r8
		aes_dec_round(state, &(ks->key[i]), rounds);
    1bf0:	d8 01       	movw	r26, r16
    1bf2:	20 e1       	ldi	r18, 0x10	; 16
    1bf4:	92 9e       	mul	r9, r18
    1bf6:	a0 0d       	add	r26, r0
    1bf8:	b1 1d       	adc	r27, r1
    1bfa:	11 24       	eor	r1, r1
    1bfc:	fe 01       	movw	r30, r28
void aes_dec_round(aes_cipher_state_t* state, const aes_roundkey_t* k, uint8_t rounds)
{
	uint8_t i;

	/* keyAdd */
	for(i=0; i<16; ++i){
    1bfe:	80 e0       	ldi	r24, 0x00	; 0
		state->s[i] ^= k->ks[i]; //Bitwise Exclusive-Or (XOR)
    1c00:	2d 91       	ld	r18, X+
    1c02:	90 81       	ld	r25, Z
    1c04:	92 27       	eor	r25, r18
    1c06:	91 93       	st	Z+, r25
void aes_dec_round(aes_cipher_state_t* state, const aes_roundkey_t* k, uint8_t rounds)
{
	uint8_t i;

	/* keyAdd */
	for(i=0; i<16; ++i){
    1c08:	8f 5f       	subi	r24, 0xFF	; 255
    1c0a:	80 31       	cpi	r24, 0x10	; 16
    1c0c:	c9 f7       	brne	.-14     	; 0x1c00 <aes_decrypt_core+0xc8>
	 * 9  E  B  D
	 * D  9  E  B
	 * B  D  9  E
	 */

	aes_invmixed_columns( state->s, 16);
    1c0e:	60 e1       	ldi	r22, 0x10	; 16
    1c10:	ce 01       	movw	r24, r28
    1c12:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <aes_invmixed_columns>

	/* shiftRows */
	// WHY is shiftcol used here????
	aes_invshiftcol(state->s+1, 1);
    1c16:	61 e0       	ldi	r22, 0x01	; 1
    1c18:	c7 01       	movw	r24, r14
    1c1a:	0e 94 c0 0c 	call	0x1980	; 0x1980 <aes_invshiftcol>
	aes_invshiftcol(state->s+2, 2);
    1c1e:	62 e0       	ldi	r22, 0x02	; 2
    1c20:	c6 01       	movw	r24, r12
    1c22:	0e 94 c0 0c 	call	0x1980	; 0x1980 <aes_invshiftcol>
	aes_invshiftcol(state->s+3, 3);
    1c26:	63 e0       	ldi	r22, 0x03	; 3
    1c28:	c5 01       	movw	r24, r10
    1c2a:	0e 94 c0 0c 	call	0x1980	; 0x1980 <aes_invshiftcol>

	// do the array permutation
	if(rounds == 2) {
    1c2e:	32 e0       	ldi	r19, 0x02	; 2
    1c30:	83 12       	cpse	r8, r19
    1c32:	02 c0       	rjmp	.+4      	; 0x1c38 <aes_decrypt_core+0x100>
		aes128_update_shuffling_array();
    1c34:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <aes128_update_shuffling_array>
void aes_dec_round(aes_cipher_state_t* state, const aes_roundkey_t* k, uint8_t rounds)
{
	uint8_t i;

	/* keyAdd */
	for(i=0; i<16; ++i){
    1c38:	a4 e0       	ldi	r26, 0x04	; 4
    1c3a:	b1 e0       	ldi	r27, 0x01	; 1
		aes128_update_shuffling_array();
	}

	/* subBytes */
	for(i=0; i<16; ++i){
		state->s[permutation_array[i]] = pgm_read_byte(aes_invsbox+state->s[permutation_array[i]]);
    1c3c:	8d 91       	ld	r24, X+
    1c3e:	fe 01       	movw	r30, r28
    1c40:	e8 0f       	add	r30, r24
    1c42:	f1 1d       	adc	r31, r1
    1c44:	cf 01       	movw	r24, r30
    1c46:	20 81       	ld	r18, Z
    1c48:	e2 2f       	mov	r30, r18
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	e0 57       	subi	r30, 0x70	; 112
    1c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c50:	24 91       	lpm	r18, Z
    1c52:	fc 01       	movw	r30, r24
    1c54:	20 83       	st	Z, r18
	if(rounds == 2) {
		aes128_update_shuffling_array();
	}

	/* subBytes */
	for(i=0; i<16; ++i){
    1c56:	f1 e0       	ldi	r31, 0x01	; 1
    1c58:	a4 31       	cpi	r26, 0x14	; 20
    1c5a:	bf 07       	cpc	r27, r31
    1c5c:	79 f7       	brne	.-34     	; 0x1c3c <aes_decrypt_core+0x104>
	// "last round"
	aes_dec_firstround(state, &(ks->key[i=rounds])); // start with rounds == 10

	// 9 "normal rounds"
	// including "first round" and "second last round"
	for(;rounds>1;--rounds){
    1c5e:	89 2c       	mov	r8, r9
    1c60:	c0 cf       	rjmp	.-128    	; 0x1be2 <aes_decrypt_core+0xaa>
    1c62:	e4 e0       	ldi	r30, 0x04	; 4
    1c64:	f1 e0       	ldi	r31, 0x01	; 1
	}

	// "Initial Round"
	// adding roundkey
	for(i=0; i<16; ++i){
		state->s[permutation_array[i]] ^= ks->key[0].ks[permutation_array[i]];
    1c66:	81 91       	ld	r24, Z+
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	9e 01       	movw	r18, r28
    1c6c:	28 0f       	add	r18, r24
    1c6e:	39 1f       	adc	r19, r25
    1c70:	80 0f       	add	r24, r16
    1c72:	91 1f       	adc	r25, r17
    1c74:	dc 01       	movw	r26, r24
    1c76:	8c 91       	ld	r24, X
    1c78:	d9 01       	movw	r26, r18
    1c7a:	9c 91       	ld	r25, X
    1c7c:	89 27       	eor	r24, r25
    1c7e:	8c 93       	st	X, r24
		aes_dec_round(state, &(ks->key[i]), rounds);
	}

	// "Initial Round"
	// adding roundkey
	for(i=0; i<16; ++i){
    1c80:	b1 e0       	ldi	r27, 0x01	; 1
    1c82:	e4 31       	cpi	r30, 0x14	; 20
    1c84:	fb 07       	cpc	r31, r27
    1c86:	79 f7       	brne	.-34     	; 0x1c66 <aes_decrypt_core+0x12e>
		state->s[permutation_array[i]] ^= ks->key[0].ks[permutation_array[i]];
	}
}
    1c88:	df 91       	pop	r29
    1c8a:	cf 91       	pop	r28
    1c8c:	1f 91       	pop	r17
    1c8e:	0f 91       	pop	r16
    1c90:	ff 90       	pop	r15
    1c92:	ef 90       	pop	r14
    1c94:	df 90       	pop	r13
    1c96:	cf 90       	pop	r12
    1c98:	bf 90       	pop	r11
    1c9a:	af 90       	pop	r10
    1c9c:	9f 90       	pop	r9
    1c9e:	8f 90       	pop	r8
    1ca0:	08 95       	ret

00001ca2 <aes_init>:

const uint8_t rc_tab[] PROGMEM = { 0x01, 0x02, 0x04, 0x08,
                             0x10, 0x20, 0x40, 0x80,
                             0x1b, 0x36 };

void aes_init(const void* key, uint16_t keysize_b, aes_genctx_t* ctx){
    1ca2:	8f 92       	push	r8
    1ca4:	9f 92       	push	r9
    1ca6:	af 92       	push	r10
    1ca8:	bf 92       	push	r11
    1caa:	cf 92       	push	r12
    1cac:	df 92       	push	r13
    1cae:	ef 92       	push	r14
    1cb0:	ff 92       	push	r15
    1cb2:	0f 93       	push	r16
    1cb4:	1f 93       	push	r17
    1cb6:	cf 93       	push	r28
    1cb8:	df 93       	push	r29
    1cba:	ea 01       	movw	r28, r20
	uint8_t rc=0;
	union {
		uint32_t v32;
		uint8_t  v8[4];
	} tmp;
	nk=keysize_b>>5; /* 4, 6, 8 */
    1cbc:	8b 01       	movw	r16, r22
    1cbe:	35 e0       	ldi	r19, 0x05	; 5
    1cc0:	16 95       	lsr	r17
    1cc2:	07 95       	ror	r16
    1cc4:	3a 95       	dec	r19
    1cc6:	e1 f7       	brne	.-8      	; 0x1cc0 <aes_init+0x1e>
    1cc8:	d0 2e       	mov	r13, r16
    1cca:	78 01       	movw	r14, r16
    1ccc:	ff 24       	eor	r15, r15
	hi=4*(nk+6+1);
    1cce:	97 01       	movw	r18, r14
    1cd0:	29 5f       	subi	r18, 0xF9	; 249
    1cd2:	3f 4f       	sbci	r19, 0xFF	; 255
    1cd4:	c2 2e       	mov	r12, r18
    1cd6:	cc 0c       	add	r12, r12
    1cd8:	cc 0c       	add	r12, r12
	memcpy(ctx, key, keysize_b/8);
    1cda:	ab 01       	movw	r20, r22
    1cdc:	63 e0       	ldi	r22, 0x03	; 3
    1cde:	56 95       	lsr	r21
    1ce0:	47 95       	ror	r20
    1ce2:	6a 95       	dec	r22
    1ce4:	e1 f7       	brne	.-8      	; 0x1cde <aes_init+0x3c>
    1ce6:	bc 01       	movw	r22, r24
    1ce8:	ce 01       	movw	r24, r28
    1cea:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <memcpy>
    1cee:	90 2e       	mov	r9, r16
    1cf0:	99 0c       	add	r9, r9
	next_nk = nk;
    1cf2:	a0 2e       	mov	r10, r16
	for(i=nk;i<hi;++i){
    1cf4:	60 e0       	ldi	r22, 0x00	; 0
    1cf6:	70 e0       	ldi	r23, 0x00	; 0
                             0x10, 0x20, 0x40, 0x80,
                             0x1b, 0x36 };

void aes_init(const void* key, uint16_t keysize_b, aes_genctx_t* ctx){
	uint8_t hi,i,nk, next_nk;
	uint8_t rc=0;
    1cf8:	b1 2c       	mov	r11, r1
    1cfa:	f6 2f       	mov	r31, r22
    1cfc:	ed 2d       	mov	r30, r13
    1cfe:	e6 0f       	add	r30, r22
	} tmp;
	nk=keysize_b>>5; /* 4, 6, 8 */
	hi=4*(nk+6+1);
	memcpy(ctx, key, keysize_b/8);
	next_nk = nk;
	for(i=nk;i<hi;++i){
    1d00:	ec 15       	cp	r30, r12
    1d02:	08 f0       	brcs	.+2      	; 0x1d06 <aes_init+0x64>
    1d04:	6e c0       	rjmp	.+220    	; 0x1de2 <aes_init+0x140>
		tmp.v32 = ((uint32_t*)(ctx->key[0].ks))[i-1];
    1d06:	8e 2f       	mov	r24, r30
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	ac 01       	movw	r20, r24
    1d0c:	41 50       	subi	r20, 0x01	; 1
    1d0e:	50 4c       	sbci	r21, 0xC0	; 192
    1d10:	44 0f       	add	r20, r20
    1d12:	55 1f       	adc	r21, r21
    1d14:	44 0f       	add	r20, r20
    1d16:	55 1f       	adc	r21, r21
    1d18:	4c 0f       	add	r20, r28
    1d1a:	5d 1f       	adc	r21, r29
    1d1c:	da 01       	movw	r26, r20
    1d1e:	0d 91       	ld	r16, X+
    1d20:	1d 91       	ld	r17, X+
    1d22:	2d 91       	ld	r18, X+
    1d24:	3c 91       	ld	r19, X
		if(i!=next_nk){
    1d26:	ea 15       	cp	r30, r10
    1d28:	01 f1       	breq	.+64     	; 0x1d6a <aes_init+0xc8>
			if(nk==8 && i%8==4){
    1d2a:	b8 e0       	ldi	r27, 0x08	; 8
    1d2c:	db 12       	cpse	r13, r27
    1d2e:	40 c0       	rjmp	.+128    	; 0x1db0 <aes_init+0x10e>
    1d30:	e7 70       	andi	r30, 0x07	; 7
    1d32:	e4 30       	cpi	r30, 0x04	; 4
    1d34:	09 f0       	breq	.+2      	; 0x1d38 <aes_init+0x96>
    1d36:	3c c0       	rjmp	.+120    	; 0x1db0 <aes_init+0x10e>
				tmp.v8[0] = pgm_read_byte(aes_sbox+tmp.v8[0]);
    1d38:	e0 2f       	mov	r30, r16
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	e6 56       	subi	r30, 0x66	; 102
    1d3e:	fe 4f       	sbci	r31, 0xFE	; 254
    1d40:	e4 91       	lpm	r30, Z
    1d42:	0e 2f       	mov	r16, r30
				tmp.v8[1] = pgm_read_byte(aes_sbox+tmp.v8[1]);
    1d44:	e1 2f       	mov	r30, r17
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	e6 56       	subi	r30, 0x66	; 102
    1d4a:	fe 4f       	sbci	r31, 0xFE	; 254
    1d4c:	e4 91       	lpm	r30, Z
    1d4e:	1e 2f       	mov	r17, r30
				tmp.v8[2] = pgm_read_byte(aes_sbox+tmp.v8[2]);
    1d50:	e2 2f       	mov	r30, r18
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	e6 56       	subi	r30, 0x66	; 102
    1d56:	fe 4f       	sbci	r31, 0xFE	; 254
    1d58:	e4 91       	lpm	r30, Z
    1d5a:	2e 2f       	mov	r18, r30
				tmp.v8[3] = pgm_read_byte(aes_sbox+tmp.v8[3]);
    1d5c:	e3 2f       	mov	r30, r19
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	e6 56       	subi	r30, 0x66	; 102
    1d62:	fe 4f       	sbci	r31, 0xFE	; 254
    1d64:	e4 91       	lpm	r30, Z
    1d66:	3e 2f       	mov	r19, r30
    1d68:	23 c0       	rjmp	.+70     	; 0x1db0 <aes_init+0x10e>
    1d6a:	af 2e       	mov	r10, r31
    1d6c:	a9 0c       	add	r10, r9
#include <avr/pgmspace.h>

static
void aes_rotword(void* a){
	uint8_t t;
	t=((uint8_t*)a)[0];
    1d6e:	b0 2f       	mov	r27, r16
	((uint8_t*)a)[0] = ((uint8_t*)a)[1];
	((uint8_t*)a)[1] = ((uint8_t*)a)[2];
	((uint8_t*)a)[2] = ((uint8_t*)a)[3];
    1d70:	83 2e       	mov	r8, r19
				tmp.v8[3] = pgm_read_byte(aes_sbox+tmp.v8[3]);
			}
		} else {
			next_nk += nk;
			aes_rotword(&(tmp.v32));
			tmp.v8[0] = pgm_read_byte(aes_sbox+tmp.v8[0]);
    1d72:	e1 2f       	mov	r30, r17
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	e6 56       	subi	r30, 0x66	; 102
    1d78:	fe 4f       	sbci	r31, 0xFE	; 254
    1d7a:	a4 91       	lpm	r26, Z
			tmp.v8[1] = pgm_read_byte(aes_sbox+tmp.v8[1]);
    1d7c:	e2 2f       	mov	r30, r18
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	e6 56       	subi	r30, 0x66	; 102
    1d82:	fe 4f       	sbci	r31, 0xFE	; 254
    1d84:	e4 91       	lpm	r30, Z
    1d86:	1e 2f       	mov	r17, r30
			tmp.v8[2] = pgm_read_byte(aes_sbox+tmp.v8[2]);
    1d88:	e8 2d       	mov	r30, r8
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	e6 56       	subi	r30, 0x66	; 102
    1d8e:	fe 4f       	sbci	r31, 0xFE	; 254
    1d90:	e4 91       	lpm	r30, Z
    1d92:	2e 2f       	mov	r18, r30
			tmp.v8[3] = pgm_read_byte(aes_sbox+tmp.v8[3]);
    1d94:	eb 2f       	mov	r30, r27
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	e6 56       	subi	r30, 0x66	; 102
    1d9a:	fe 4f       	sbci	r31, 0xFE	; 254
    1d9c:	e4 91       	lpm	r30, Z
    1d9e:	3e 2f       	mov	r19, r30
			tmp.v8[0] ^= pgm_read_byte(rc_tab+rc);
    1da0:	eb 2d       	mov	r30, r11
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	e0 57       	subi	r30, 0x70	; 112
    1da6:	fe 4f       	sbci	r31, 0xFE	; 254
    1da8:	e4 91       	lpm	r30, Z
    1daa:	0e 2f       	mov	r16, r30
    1dac:	0a 27       	eor	r16, r26
			rc++;
    1dae:	b3 94       	inc	r11
		}
		((uint32_t*)(ctx->key[0].ks))[i] = ((uint32_t*)(ctx->key[0].ks))[i-nk]
    1db0:	fc 01       	movw	r30, r24
    1db2:	ee 19       	sub	r30, r14
    1db4:	ff 09       	sbc	r31, r15
    1db6:	ee 0f       	add	r30, r30
    1db8:	ff 1f       	adc	r31, r31
    1dba:	ee 0f       	add	r30, r30
    1dbc:	ff 1f       	adc	r31, r31
    1dbe:	ec 0f       	add	r30, r28
    1dc0:	fd 1f       	adc	r31, r29
		                                   ^ tmp.v32;
    1dc2:	80 81       	ld	r24, Z
    1dc4:	91 81       	ldd	r25, Z+1	; 0x01
    1dc6:	a2 81       	ldd	r26, Z+2	; 0x02
    1dc8:	b3 81       	ldd	r27, Z+3	; 0x03
    1dca:	80 27       	eor	r24, r16
    1dcc:	91 27       	eor	r25, r17
    1dce:	a2 27       	eor	r26, r18
    1dd0:	b3 27       	eor	r27, r19
			tmp.v8[2] = pgm_read_byte(aes_sbox+tmp.v8[2]);
			tmp.v8[3] = pgm_read_byte(aes_sbox+tmp.v8[3]);
			tmp.v8[0] ^= pgm_read_byte(rc_tab+rc);
			rc++;
		}
		((uint32_t*)(ctx->key[0].ks))[i] = ((uint32_t*)(ctx->key[0].ks))[i-nk]
    1dd2:	fa 01       	movw	r30, r20
    1dd4:	84 83       	std	Z+4, r24	; 0x04
    1dd6:	95 83       	std	Z+5, r25	; 0x05
    1dd8:	a6 83       	std	Z+6, r26	; 0x06
    1dda:	b7 83       	std	Z+7, r27	; 0x07
    1ddc:	6f 5f       	subi	r22, 0xFF	; 255
    1dde:	7f 4f       	sbci	r23, 0xFF	; 255
    1de0:	8c cf       	rjmp	.-232    	; 0x1cfa <aes_init+0x58>
		                                   ^ tmp.v32;
	}
}
    1de2:	df 91       	pop	r29
    1de4:	cf 91       	pop	r28
    1de6:	1f 91       	pop	r17
    1de8:	0f 91       	pop	r16
    1dea:	ff 90       	pop	r15
    1dec:	ef 90       	pop	r14
    1dee:	df 90       	pop	r13
    1df0:	cf 90       	pop	r12
    1df2:	bf 90       	pop	r11
    1df4:	af 90       	pop	r10
    1df6:	9f 90       	pop	r9
    1df8:	8f 90       	pop	r8
    1dfa:	08 95       	ret

00001dfc <aes128_init>:

void aes128_init(const void* key, aes128_ctx_t* ctx){
    1dfc:	ab 01       	movw	r20, r22
	aes_init(key, 128, (aes_genctx_t*)ctx);
    1dfe:	60 e8       	ldi	r22, 0x80	; 128
    1e00:	70 e0       	ldi	r23, 0x00	; 0
    1e02:	0c 94 51 0e 	jmp	0x1ca2	; 0x1ca2 <aes_init>

00001e06 <aes128_update_shuffling_array>:


/**************************************************/
/***			Permutation Array				***/
/**************************************************/
void aes128_update_shuffling_array() {
    1e06:	0f 93       	push	r16
    1e08:	1f 93       	push	r17
    1e0a:	cf 93       	push	r28
    1e0c:	df 93       	push	r29
    1e0e:	04 e1       	ldi	r16, 0x14	; 20
    1e10:	11 e0       	ldi	r17, 0x01	; 1
    1e12:	c0 e1       	ldi	r28, 0x10	; 16
    1e14:	d0 e0       	ldi	r29, 0x00	; 0

	uint8_t i = 15;
	uint8_t j = 0;
	do{
		//generate a random number [0, n-1]
		j = rng_get_random_byte() % (i+1);
    1e16:	0e 94 c6 13 	call	0x278c	; 0x278c <rng_get_random_byte>
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	be 01       	movw	r22, r28
    1e1e:	0e 94 48 14 	call	0x2890	; 0x2890 <__divmodhi4>

		//swap the last element with element at random index
		uint8_t temp = permutation_array[i];
    1e22:	f8 01       	movw	r30, r16
    1e24:	22 91       	ld	r18, -Z
    1e26:	8f 01       	movw	r16, r30
		permutation_array[i] = permutation_array[j];
    1e28:	8c 5f       	subi	r24, 0xFC	; 252
    1e2a:	9e 4f       	sbci	r25, 0xFE	; 254
    1e2c:	fc 01       	movw	r30, r24
    1e2e:	30 81       	ld	r19, Z
    1e30:	f8 01       	movw	r30, r16
    1e32:	30 83       	st	Z, r19
		permutation_array[j] = temp;
    1e34:	fc 01       	movw	r30, r24
    1e36:	20 83       	st	Z, r18
    1e38:	21 97       	sbiw	r28, 0x01	; 1
		--i;
	} while ( i != 0);
    1e3a:	c1 30       	cpi	r28, 0x01	; 1
    1e3c:	d1 05       	cpc	r29, r1
    1e3e:	59 f7       	brne	.-42     	; 0x1e16 <aes128_update_shuffling_array+0x10>
}
    1e40:	df 91       	pop	r29
    1e42:	cf 91       	pop	r28
    1e44:	1f 91       	pop	r17
    1e46:	0f 91       	pop	r16
    1e48:	08 95       	ret

00001e4a <__vector_5>:
volatile bool bit_is_sent = true; // init true so we can send immediately


// Pin Change Interrupt Request 1
ISR(PCINT1_vect)
{
    1e4a:	1f 92       	push	r1
    1e4c:	0f 92       	push	r0
    1e4e:	0f b6       	in	r0, 0x3f	; 63
    1e50:	0f 92       	push	r0
    1e52:	11 24       	eor	r1, r1
    1e54:	8f 93       	push	r24
    1e56:	9f 93       	push	r25
	if(bit_nr_being_received != 0)
    1e58:	80 91 bb 01 	lds	r24, 0x01BB
    1e5c:	81 11       	cpse	r24, r1
    1e5e:	23 c0       	rjmp	.+70     	; 0x1ea6 <__vector_5+0x5c>
	{
		// this should not happen: a start bit coming in, even though we did not receive all bits
		return;
	}

	if(GetBit(PINB, PB6) != 0)
    1e60:	1e 99       	sbic	0x03, 6	; 3
    1e62:	21 c0       	rjmp	.+66     	; 0x1ea6 <__vector_5+0x5c>
		// this can mean that we are done with receiving of a byte and notice the trailing edge of the parity bit.
		// or it is bad, in case we missed a byte.
		return;
	}

	if(mode == RECEIVING)
    1e64:	80 91 bc 01 	lds	r24, 0x01BC
    1e68:	81 11       	cpse	r24, r1
    1e6a:	1d c0       	rjmp	.+58     	; 0x1ea6 <__vector_5+0x5c>
	{
		// this is the startbit (low). the next 8 bits are data, then 1 even parity. we'll get them in the following timer interrupts
		SetBit(TCCR1B, CS10); // Set clock source to CPU/1 = enable timer
    1e6c:	80 91 81 00 	lds	r24, 0x0081
    1e70:	81 60       	ori	r24, 0x01	; 1
    1e72:	80 93 81 00 	sts	0x0081, r24
		TCNT1 = 0;
    1e76:	10 92 85 00 	sts	0x0085, r1
    1e7a:	10 92 84 00 	sts	0x0084, r1

		bit_nr_being_received = 0;
    1e7e:	10 92 bb 01 	sts	0x01BB, r1
		byte_being_received = 0x00;
    1e82:	10 92 ba 01 	sts	0x01BA, r1

		OCR1A = 372*1.50-120; // wait 1.5 ETU to sample in the middle of bit 0. subtract about 120 cycles for interrupt setup things
    1e86:	86 eb       	ldi	r24, 0xB6	; 182
    1e88:	91 e0       	ldi	r25, 0x01	; 1
    1e8a:	90 93 89 00 	sts	0x0089, r25
    1e8e:	80 93 88 00 	sts	0x0088, r24

		// don't come here again before we completely received this byte
		ClrBit(PCICR,PCIE1); // disable pin change interrupt
    1e92:	80 91 68 00 	lds	r24, 0x0068
    1e96:	8d 7f       	andi	r24, 0xFD	; 253
    1e98:	80 93 68 00 	sts	0x0068, r24
		ClrBit(PCMSK1,PCINT14); // disable pin change interrupt for PDI_DATA pin
    1e9c:	80 91 6c 00 	lds	r24, 0x006C
    1ea0:	8f 7b       	andi	r24, 0xBF	; 191
    1ea2:	80 93 6c 00 	sts	0x006C, r24
	}
}
    1ea6:	9f 91       	pop	r25
    1ea8:	8f 91       	pop	r24
    1eaa:	0f 90       	pop	r0
    1eac:	0f be       	out	0x3f, r0	; 63
    1eae:	0f 90       	pop	r0
    1eb0:	1f 90       	pop	r1
    1eb2:	18 95       	reti

00001eb4 <__vector_13>:


ISR(TIMER1_COMPA_vect)
{
    1eb4:	1f 92       	push	r1
    1eb6:	0f 92       	push	r0
    1eb8:	0f b6       	in	r0, 0x3f	; 63
    1eba:	0f 92       	push	r0
    1ebc:	11 24       	eor	r1, r1
    1ebe:	2f 93       	push	r18
    1ec0:	3f 93       	push	r19
    1ec2:	4f 93       	push	r20
    1ec4:	5f 93       	push	r21
    1ec6:	6f 93       	push	r22
    1ec8:	7f 93       	push	r23
    1eca:	8f 93       	push	r24
    1ecc:	9f 93       	push	r25
    1ece:	af 93       	push	r26
    1ed0:	bf 93       	push	r27
    1ed2:	ef 93       	push	r30
    1ed4:	ff 93       	push	r31
	switch(mode)
    1ed6:	80 91 bc 01 	lds	r24, 0x01BC
    1eda:	88 23       	and	r24, r24
    1edc:	21 f0       	breq	.+8      	; 0x1ee6 <__vector_13+0x32>
    1ede:	81 30       	cpi	r24, 0x01	; 1
    1ee0:	09 f4       	brne	.+2      	; 0x1ee4 <__vector_13+0x30>
    1ee2:	8e c0       	rjmp	.+284    	; 0x2000 <__vector_13+0x14c>
    1ee4:	98 c0       	rjmp	.+304    	; 0x2016 <__vector_13+0x162>
	{

	case RECEIVING:
		if(bit_nr_being_received == 0)
    1ee6:	80 91 bb 01 	lds	r24, 0x01BB
    1eea:	81 11       	cpse	r24, r1
    1eec:	06 c0       	rjmp	.+12     	; 0x1efa <__vector_13+0x46>
		{
			OCR1A = 372; // this will happen in the middle of bit 0. from now on, sample every 1 ETU.
    1eee:	84 e7       	ldi	r24, 0x74	; 116
    1ef0:	91 e0       	ldi	r25, 0x01	; 1
    1ef2:	90 93 89 00 	sts	0x0089, r25
    1ef6:	80 93 88 00 	sts	0x0088, r24
		}

		if(bit_nr_being_received < 8) // data bit
    1efa:	80 91 bb 01 	lds	r24, 0x01BB
    1efe:	88 30       	cpi	r24, 0x08	; 8
    1f00:	a8 f5       	brcc	.+106    	; 0x1f6c <__vector_13+0xb8>
		{
			// sample 5 times and do a majority decision
			int8_t r = 0;
			r += (GetBit(PINB, PB6))?1:-1;
    1f02:	1e 9b       	sbis	0x03, 6	; 3
    1f04:	02 c0       	rjmp	.+4      	; 0x1f0a <__vector_13+0x56>
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	01 c0       	rjmp	.+2      	; 0x1f0c <__vector_13+0x58>
    1f0a:	8f ef       	ldi	r24, 0xFF	; 255
			r += (GetBit(PINB, PB6))?1:-1;
    1f0c:	1e 9b       	sbis	0x03, 6	; 3
    1f0e:	02 c0       	rjmp	.+4      	; 0x1f14 <__vector_13+0x60>
    1f10:	21 e0       	ldi	r18, 0x01	; 1
    1f12:	01 c0       	rjmp	.+2      	; 0x1f16 <__vector_13+0x62>
    1f14:	2f ef       	ldi	r18, 0xFF	; 255
    1f16:	82 0f       	add	r24, r18
			r += (GetBit(PINB, PB6))?1:-1;
    1f18:	1e 9b       	sbis	0x03, 6	; 3
    1f1a:	02 c0       	rjmp	.+4      	; 0x1f20 <__vector_13+0x6c>
    1f1c:	21 e0       	ldi	r18, 0x01	; 1
    1f1e:	01 c0       	rjmp	.+2      	; 0x1f22 <__vector_13+0x6e>
    1f20:	2f ef       	ldi	r18, 0xFF	; 255
    1f22:	28 0f       	add	r18, r24
			r += (GetBit(PINB, PB6))?1:-1;
    1f24:	1e 9b       	sbis	0x03, 6	; 3
    1f26:	02 c0       	rjmp	.+4      	; 0x1f2c <__vector_13+0x78>
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	01 c0       	rjmp	.+2      	; 0x1f2e <__vector_13+0x7a>
    1f2c:	8f ef       	ldi	r24, 0xFF	; 255
    1f2e:	82 0f       	add	r24, r18
			r += (GetBit(PINB, PB6))?1:-1;
    1f30:	1e 9b       	sbis	0x03, 6	; 3
    1f32:	02 c0       	rjmp	.+4      	; 0x1f38 <__vector_13+0x84>
    1f34:	91 e0       	ldi	r25, 0x01	; 1
    1f36:	01 c0       	rjmp	.+2      	; 0x1f3a <__vector_13+0x86>
    1f38:	9f ef       	ldi	r25, 0xFF	; 255
			r = (r>0)?1:0;

			// save the bit
			byte_being_received |= (r<<(bit_nr_being_received++));
    1f3a:	30 91 ba 01 	lds	r19, 0x01BA
    1f3e:	20 91 bb 01 	lds	r18, 0x01BB
    1f42:	41 e0       	ldi	r20, 0x01	; 1
    1f44:	42 0f       	add	r20, r18
    1f46:	40 93 bb 01 	sts	0x01BB, r20
			int8_t r = 0;
			r += (GetBit(PINB, PB6))?1:-1;
			r += (GetBit(PINB, PB6))?1:-1;
			r += (GetBit(PINB, PB6))?1:-1;
			r += (GetBit(PINB, PB6))?1:-1;
			r += (GetBit(PINB, PB6))?1:-1;
    1f4a:	48 2f       	mov	r20, r24
    1f4c:	49 0f       	add	r20, r25
			r = (r>0)?1:0;
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	14 16       	cp	r1, r20
    1f54:	14 f0       	brlt	.+4      	; 0x1f5a <__vector_13+0xa6>
    1f56:	80 e0       	ldi	r24, 0x00	; 0
    1f58:	90 e0       	ldi	r25, 0x00	; 0

			// save the bit
			byte_being_received |= (r<<(bit_nr_being_received++));
    1f5a:	02 2e       	mov	r0, r18
    1f5c:	01 c0       	rjmp	.+2      	; 0x1f60 <__vector_13+0xac>
    1f5e:	88 0f       	add	r24, r24
    1f60:	0a 94       	dec	r0
    1f62:	ea f7       	brpl	.-6      	; 0x1f5e <__vector_13+0xaa>
    1f64:	83 2b       	or	r24, r19
    1f66:	80 93 ba 01 	sts	0x01BA, r24
    1f6a:	55 c0       	rjmp	.+170    	; 0x2016 <__vector_13+0x162>
		}
		else if (bit_nr_being_received == 8) // parity bit
    1f6c:	80 91 bb 01 	lds	r24, 0x01BB
    1f70:	88 30       	cpi	r24, 0x08	; 8
    1f72:	09 f0       	breq	.+2      	; 0x1f76 <__vector_13+0xc2>
    1f74:	50 c0       	rjmp	.+160    	; 0x2016 <__vector_13+0x162>
		{
			// sample 5 times and do a majority decision
			int8_t r = 0;
			r += (GetBit(PINB, PB6))?1:-1;
    1f76:	1e 9b       	sbis	0x03, 6	; 3
    1f78:	02 c0       	rjmp	.+4      	; 0x1f7e <__vector_13+0xca>
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	01 c0       	rjmp	.+2      	; 0x1f80 <__vector_13+0xcc>
    1f7e:	8f ef       	ldi	r24, 0xFF	; 255
			r += (GetBit(PINB, PB6))?1:-1;
    1f80:	1e 9b       	sbis	0x03, 6	; 3
    1f82:	02 c0       	rjmp	.+4      	; 0x1f88 <__vector_13+0xd4>
    1f84:	41 e0       	ldi	r20, 0x01	; 1
    1f86:	01 c0       	rjmp	.+2      	; 0x1f8a <__vector_13+0xd6>
    1f88:	4f ef       	ldi	r20, 0xFF	; 255
    1f8a:	84 0f       	add	r24, r20
			r += (GetBit(PINB, PB6))?1:-1;
    1f8c:	1e 9b       	sbis	0x03, 6	; 3
    1f8e:	02 c0       	rjmp	.+4      	; 0x1f94 <__vector_13+0xe0>
    1f90:	41 e0       	ldi	r20, 0x01	; 1
    1f92:	01 c0       	rjmp	.+2      	; 0x1f96 <__vector_13+0xe2>
    1f94:	4f ef       	ldi	r20, 0xFF	; 255
    1f96:	48 0f       	add	r20, r24
			r += (GetBit(PINB, PB6))?1:-1;
    1f98:	1e 9b       	sbis	0x03, 6	; 3
    1f9a:	02 c0       	rjmp	.+4      	; 0x1fa0 <__vector_13+0xec>
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	01 c0       	rjmp	.+2      	; 0x1fa2 <__vector_13+0xee>
    1fa0:	8f ef       	ldi	r24, 0xFF	; 255
    1fa2:	48 0f       	add	r20, r24
			r += (GetBit(PINB, PB6))?1:-1;
    1fa4:	1e 9b       	sbis	0x03, 6	; 3
    1fa6:	02 c0       	rjmp	.+4      	; 0x1fac <__vector_13+0xf8>
    1fa8:	91 e0       	ldi	r25, 0x01	; 1
    1faa:	01 c0       	rjmp	.+2      	; 0x1fae <__vector_13+0xfa>
    1fac:	9f ef       	ldi	r25, 0xFF	; 255
			r = (r>0)?1:0;

			assert(r == parity_even_bit(byte_being_received), "WP"); // Wrong Parity
    1fae:	80 91 ba 01 	lds	r24, 0x01BA
    1fb2:	08 2e       	mov	r0, r24
    1fb4:	82 95       	swap	r24
    1fb6:	80 25       	eor	r24, r0
    1fb8:	08 2e       	mov	r0, r24
    1fba:	86 95       	lsr	r24
    1fbc:	86 95       	lsr	r24
    1fbe:	80 25       	eor	r24, r0
			int8_t r = 0;
			r += (GetBit(PINB, PB6))?1:-1;
			r += (GetBit(PINB, PB6))?1:-1;
			r += (GetBit(PINB, PB6))?1:-1;
			r += (GetBit(PINB, PB6))?1:-1;
			r += (GetBit(PINB, PB6))?1:-1;
    1fc0:	94 0f       	add	r25, r20
			r = (r>0)?1:0;
    1fc2:	41 e0       	ldi	r20, 0x01	; 1
    1fc4:	50 e0       	ldi	r21, 0x00	; 0
    1fc6:	19 16       	cp	r1, r25
    1fc8:	14 f0       	brlt	.+4      	; 0x1fce <__vector_13+0x11a>
    1fca:	40 e0       	ldi	r20, 0x00	; 0
    1fcc:	50 e0       	ldi	r21, 0x00	; 0

			assert(r == parity_even_bit(byte_being_received), "WP"); // Wrong Parity
    1fce:	8f 5f       	subi	r24, 0xFF	; 255
    1fd0:	81 fb       	bst	r24, 1
    1fd2:	22 27       	eor	r18, r18
    1fd4:	20 f9       	bld	r18, 0
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	42 17       	cp	r20, r18
    1fdc:	53 07       	cpc	r21, r19
    1fde:	09 f0       	breq	.+2      	; 0x1fe2 <__vector_13+0x12e>
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	61 e2       	ldi	r22, 0x21	; 33
    1fe4:	71 e0       	ldi	r23, 0x01	; 1
    1fe6:	0e 94 1b 14 	call	0x2836	; 0x2836 <assert>

			// we are done with this byte
			byte_is_received = true;
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	80 93 b9 01 	sts	0x01B9, r24
			bit_nr_being_received = 0;
    1ff0:	10 92 bb 01 	sts	0x01BB, r1
			ClrBit(TCCR1B, CS10); // Set clock source to none = disable timer
    1ff4:	80 91 81 00 	lds	r24, 0x0081
    1ff8:	8e 7f       	andi	r24, 0xFE	; 254
    1ffa:	80 93 81 00 	sts	0x0081, r24
    1ffe:	0b c0       	rjmp	.+22     	; 0x2016 <__vector_13+0x162>
		}
		break;


	case TRANSMITTING:
		if(next_bit_to_send)
    2000:	80 91 b8 01 	lds	r24, 0x01B8
    2004:	88 23       	and	r24, r24
    2006:	11 f0       	breq	.+4      	; 0x200c <__vector_13+0x158>
		{
			// Send 1 / idle / high / high-Z bit by changing pin to input (and maybe activating internal pullup)
			ClrBit(DDRB, PB6);
    2008:	26 98       	cbi	0x04, 6	; 4
    200a:	02 c0       	rjmp	.+4      	; 0x2010 <__vector_13+0x15c>
		} else {
			// Send 0 / active / low / pull-down by changing pin to output and driving low
			SetBit(DDRB, PB6);
    200c:	26 9a       	sbi	0x04, 6	; 4
			ClrBit(PORTB, PB6);
    200e:	2e 98       	cbi	0x05, 6	; 5
		}
		bit_is_sent = true;
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	80 93 14 01 	sts	0x0114, r24
		break;

	}
}
    2016:	ff 91       	pop	r31
    2018:	ef 91       	pop	r30
    201a:	bf 91       	pop	r27
    201c:	af 91       	pop	r26
    201e:	9f 91       	pop	r25
    2020:	8f 91       	pop	r24
    2022:	7f 91       	pop	r23
    2024:	6f 91       	pop	r22
    2026:	5f 91       	pop	r21
    2028:	4f 91       	pop	r20
    202a:	3f 91       	pop	r19
    202c:	2f 91       	pop	r18
    202e:	0f 90       	pop	r0
    2030:	0f be       	out	0x3f, r0	; 63
    2032:	0f 90       	pop	r0
    2034:	1f 90       	pop	r1
    2036:	18 95       	reti

00002038 <set_mode_receive>:

void set_mode_receive()
{
	// In Empfangsmodus gehen
	mode = RECEIVING;
    2038:	10 92 bc 01 	sts	0x01BC, r1
	byte_is_received = false;
    203c:	10 92 b9 01 	sts	0x01B9, r1
	ClrBit(DDRB, PB6); // set PDI_DATA as input
    2040:	26 98       	cbi	0x04, 6	; 4
	SetBit(PORTB, PB6); // interne Pullups aktivieren
    2042:	2e 9a       	sbi	0x05, 6	; 5
	SetBit(PCICR,PCIE1); // enable pin change interrupt
    2044:	e8 e6       	ldi	r30, 0x68	; 104
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	80 81       	ld	r24, Z
    204a:	82 60       	ori	r24, 0x02	; 2
    204c:	80 83       	st	Z, r24
	SetBit(PCMSK1,PCINT14); // enable pin change interrupt for PDI_DATA pin
    204e:	ec e6       	ldi	r30, 0x6C	; 108
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	80 81       	ld	r24, Z
    2054:	80 64       	ori	r24, 0x40	; 64
    2056:	80 83       	st	Z, r24
    2058:	08 95       	ret

0000205a <set_mode_transmit>:
}

void set_mode_transmit()
{
	// Empfangsmodus verlassen
	mode = TRANSMITTING;
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	80 93 bc 01 	sts	0x01BC, r24
	ClrBit(PCICR,PCIE1); // disable pin change interrupt
    2060:	e8 e6       	ldi	r30, 0x68	; 104
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z
    2066:	8d 7f       	andi	r24, 0xFD	; 253
    2068:	80 83       	st	Z, r24
	ClrBit(PCMSK1,PCINT14); // disable pin change interrupt for PDI_DATA pin
    206a:	ec e6       	ldi	r30, 0x6C	; 108
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	80 81       	ld	r24, Z
    2070:	8f 7b       	andi	r24, 0xBF	; 191
    2072:	80 83       	st	Z, r24
	SetBit(DDRB, PB6); // set PDI_DATA as output
    2074:	26 9a       	sbi	0x04, 6	; 4
    2076:	08 95       	ret

00002078 <comm_init>:
}

void comm_init()
{
	// In Empfangsmodus gehen
	ClrBit(DDRB, PB6); // set PDI_DATA as input
    2078:	26 98       	cbi	0x04, 6	; 4
	SetBit(PORTB, PB6); // interne Pullups aktivieren
    207a:	2e 9a       	sbi	0x05, 6	; 5
	PCICR |= (1<<PCIE1); // enable pin change interrupt
    207c:	e8 e6       	ldi	r30, 0x68	; 104
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	80 81       	ld	r24, Z
    2082:	82 60       	ori	r24, 0x02	; 2
    2084:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT14); // enable pin change interrupt for PDI_DATA pin
    2086:	ec e6       	ldi	r30, 0x6C	; 108
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	80 81       	ld	r24, Z
    208c:	80 64       	ori	r24, 0x40	; 64
    208e:	80 83       	st	Z, r24

	// Initialize Timer1, which counts to 372 CPU cycles for correct timing
	SetBit(TCCR1B, WGM12); // Set CTC Mode
    2090:	e1 e8       	ldi	r30, 0x81	; 129
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	80 81       	ld	r24, Z
    2096:	88 60       	ori	r24, 0x08	; 8
    2098:	80 83       	st	Z, r24
	OCR1A = 372;
    209a:	84 e7       	ldi	r24, 0x74	; 116
    209c:	91 e0       	ldi	r25, 0x01	; 1
    209e:	90 93 89 00 	sts	0x0089, r25
    20a2:	80 93 88 00 	sts	0x0088, r24
	SetBit(TIMSK1, OCIE1A); // interrupt when timer reaches OCR1A
    20a6:	ef e6       	ldi	r30, 0x6F	; 111
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	80 81       	ld	r24, Z
    20ac:	82 60       	ori	r24, 0x02	; 2
    20ae:	80 83       	st	Z, r24
    20b0:	08 95       	ret

000020b2 <send_bit>:


// sends a bit via the PDI line. waits until 372 clock (1 ETU) have passed.
void send_bit(bool bit)
{
	while(!bit_is_sent); // wait until last bit was sent
    20b2:	90 91 14 01 	lds	r25, 0x0114
    20b6:	99 23       	and	r25, r25
    20b8:	e1 f3       	breq	.-8      	; 0x20b2 <send_bit>
	bit_is_sent = false; // we are "blocking" the pin
    20ba:	10 92 14 01 	sts	0x0114, r1
	next_bit_to_send = bit; // this bit will be sent in about 372 cycles
    20be:	80 93 b8 01 	sts	0x01B8, r24
    20c2:	08 95       	ret

000020c4 <comm_transmit_byte>:
{
	while(length--) comm_transmit_byte(*(bytes++));
}

void comm_transmit_byte(uint8_t byte)
{
    20c4:	df 92       	push	r13
    20c6:	ef 92       	push	r14
    20c8:	ff 92       	push	r15
    20ca:	0f 93       	push	r16
    20cc:	1f 93       	push	r17
    20ce:	cf 93       	push	r28
    20d0:	df 93       	push	r29
    20d2:	e8 2e       	mov	r14, r24
	uint8_t parity = 0;

	set_mode_transmit();
    20d4:	0e 94 2d 10 	call	0x205a	; 0x205a <set_mode_transmit>
	TCNT1 = 0;
    20d8:	10 92 85 00 	sts	0x0085, r1
    20dc:	10 92 84 00 	sts	0x0084, r1
	SetBit(TCCR1B, CS10); // Set clock source to CPU/1 = enable timer
    20e0:	90 91 81 00 	lds	r25, 0x0081
    20e4:	91 60       	ori	r25, 0x01	; 1
    20e6:	90 93 81 00 	sts	0x0081, r25

	// wait for at least 2.5 ETU so we don't violate the minimum time of 12 ETU between the leading edges of two start bits.
	for(int i = 0; i < 3; i++)
	{
		send_bit(true);
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	0e 94 59 10 	call	0x20b2	; 0x20b2 <send_bit>
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	0e 94 59 10 	call	0x20b2	; 0x20b2 <send_bit>
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	0e 94 59 10 	call	0x20b2	; 0x20b2 <send_bit>
	}

	// send start bit (low)
	send_bit(false);
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	0e 94 59 10 	call	0x20b2	; 0x20b2 <send_bit>
    2102:	c8 e0       	ldi	r28, 0x08	; 8
    2104:	d0 e0       	ldi	r29, 0x00	; 0

	// Shift masking bit 8 times
	for(uint8_t i = 0x01; i != 0; i <<= 1)
    2106:	01 e0       	ldi	r16, 0x01	; 1
	while(length--) comm_transmit_byte(*(bytes++));
}

void comm_transmit_byte(uint8_t byte)
{
	uint8_t parity = 0;
    2108:	10 e0       	ldi	r17, 0x00	; 0
	send_bit(false);

	// Shift masking bit 8 times
	for(uint8_t i = 0x01; i != 0; i <<= 1)
	{
		send_bit (byte & i);
    210a:	dd 24       	eor	r13, r13
    210c:	d3 94       	inc	r13
    210e:	ff 24       	eor	r15, r15
    2110:	f3 94       	inc	r15
    2112:	80 2f       	mov	r24, r16
    2114:	8e 21       	and	r24, r14
    2116:	09 f4       	brne	.+2      	; 0x211a <comm_transmit_byte+0x56>
    2118:	f1 2c       	mov	r15, r1
    211a:	8f 2d       	mov	r24, r15
    211c:	0e 94 59 10 	call	0x20b2	; 0x20b2 <send_bit>
		if(byte & i) parity = !parity;
    2120:	f1 10       	cpse	r15, r1
    2122:	1d 25       	eor	r17, r13

	// send start bit (low)
	send_bit(false);

	// Shift masking bit 8 times
	for(uint8_t i = 0x01; i != 0; i <<= 1)
    2124:	00 0f       	add	r16, r16
    2126:	21 97       	sbiw	r28, 0x01	; 1
    2128:	20 97       	sbiw	r28, 0x00	; 0
    212a:	89 f7       	brne	.-30     	; 0x210e <comm_transmit_byte+0x4a>
		send_bit (byte & i);
		if(byte & i) parity = !parity;
	}

	// Sende Even Parity Bit
	send_bit(parity);
    212c:	81 2f       	mov	r24, r17
    212e:	81 70       	andi	r24, 0x01	; 1
    2130:	0e 94 59 10 	call	0x20b2	; 0x20b2 <send_bit>
	// make sure the parity bit gets its full hold time
	while(!bit_is_sent); // wait until last bit was sent
    2134:	80 91 14 01 	lds	r24, 0x0114
    2138:	88 23       	and	r24, r24
    213a:	e1 f3       	breq	.-8      	; 0x2134 <comm_transmit_byte+0x70>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    213c:	8d e5       	ldi	r24, 0x5D	; 93
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	01 97       	sbiw	r24, 0x01	; 1
    2142:	f1 f7       	brne	.-4      	; 0x2140 <comm_transmit_byte+0x7c>
	_delay_loop_2(372/4); // 1 ETU

	ClrBit(TCCR1B, CS10); // Set clock source to none = disable timer
    2144:	80 91 81 00 	lds	r24, 0x0081
    2148:	8e 7f       	andi	r24, 0xFE	; 254
    214a:	80 93 81 00 	sts	0x0081, r24

	// In Empfangsmodus gehen
	set_mode_receive();
}
    214e:	df 91       	pop	r29
    2150:	cf 91       	pop	r28
    2152:	1f 91       	pop	r17
    2154:	0f 91       	pop	r16
    2156:	ff 90       	pop	r15
    2158:	ef 90       	pop	r14
    215a:	df 90       	pop	r13
	_delay_loop_2(372/4); // 1 ETU

	ClrBit(TCCR1B, CS10); // Set clock source to none = disable timer

	// In Empfangsmodus gehen
	set_mode_receive();
    215c:	0c 94 1c 10 	jmp	0x2038	; 0x2038 <set_mode_receive>

00002160 <comm_transmit_bytes>:
	bit_is_sent = false; // we are "blocking" the pin
	next_bit_to_send = bit; // this bit will be sent in about 372 cycles
}

void comm_transmit_bytes(uint8_t* bytes, uint8_t length)
{
    2160:	0f 93       	push	r16
    2162:	1f 93       	push	r17
    2164:	cf 93       	push	r28
    2166:	df 93       	push	r29
    2168:	1f 92       	push	r1
    216a:	cd b7       	in	r28, 0x3d	; 61
    216c:	de b7       	in	r29, 0x3e	; 62
	while(length--) comm_transmit_byte(*(bytes++));
    216e:	8c 01       	movw	r16, r24
    2170:	68 0f       	add	r22, r24
    2172:	60 17       	cp	r22, r16
    2174:	41 f0       	breq	.+16     	; 0x2186 <comm_transmit_bytes+0x26>
    2176:	f8 01       	movw	r30, r16
    2178:	81 91       	ld	r24, Z+
    217a:	8f 01       	movw	r16, r30
    217c:	69 83       	std	Y+1, r22	; 0x01
    217e:	0e 94 62 10 	call	0x20c4	; 0x20c4 <comm_transmit_byte>
    2182:	69 81       	ldd	r22, Y+1	; 0x01
    2184:	f6 cf       	rjmp	.-20     	; 0x2172 <comm_transmit_bytes+0x12>
}
    2186:	0f 90       	pop	r0
    2188:	df 91       	pop	r29
    218a:	cf 91       	pop	r28
    218c:	1f 91       	pop	r17
    218e:	0f 91       	pop	r16
    2190:	08 95       	ret

00002192 <comm_receive_byte>:
	set_mode_receive();
}

uint8_t comm_receive_byte()
{
	set_mode_receive();
    2192:	0e 94 1c 10 	call	0x2038	; 0x2038 <set_mode_receive>
	while(!byte_is_received);
    2196:	80 91 b9 01 	lds	r24, 0x01B9
    219a:	88 23       	and	r24, r24
    219c:	e1 f3       	breq	.-8      	; 0x2196 <comm_receive_byte+0x4>
	return byte_being_received;
    219e:	80 91 ba 01 	lds	r24, 0x01BA
}
    21a2:	08 95       	ret

000021a4 <__vector_8>:
// approximately two 32-bit integer values every second.
//
// The pool is implemented as an 8 value circular buffer
volatile bool wdt_tcnt_buffer_ready = false;

ISR(WDT_vect) {
    21a4:	1f 92       	push	r1
    21a6:	0f 92       	push	r0
    21a8:	0f b6       	in	r0, 0x3f	; 63
    21aa:	0f 92       	push	r0
    21ac:	11 24       	eor	r1, r1
    21ae:	8f 93       	push	r24
    21b0:	9f 93       	push	r25
    21b2:	ef 93       	push	r30
    21b4:	ff 93       	push	r31
	if(!wdt_tcnt_buffer_ready)
    21b6:	80 91 bd 01 	lds	r24, 0x01BD
    21ba:	81 11       	cpse	r24, r1
    21bc:	12 c0       	rjmp	.+36     	; 0x21e2 <__vector_8+0x3e>
	{
		WDT_buffer[WDT_buffer_position] = TCNT0;
    21be:	80 91 0f 02 	lds	r24, 0x020F
    21c2:	96 b5       	in	r25, 0x26	; 38
    21c4:	e8 2f       	mov	r30, r24
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	e5 51       	subi	r30, 0x15	; 21
    21ca:	fe 4f       	sbci	r31, 0xFE	; 254
    21cc:	90 83       	st	Z, r25
		WDT_buffer_position++;// = (WDT_buffer_position+1) % WDT_BUFFER_SIZE; // every time the WDT interrupt is triggered
    21ce:	8f 5f       	subi	r24, 0xFF	; 255
    21d0:	80 93 0f 02 	sts	0x020F, r24

		if (WDT_buffer_position >= WDT_BUFFER_SIZE)
    21d4:	80 32       	cpi	r24, 0x20	; 32
    21d6:	28 f0       	brcs	.+10     	; 0x21e2 <__vector_8+0x3e>
		{
			wdt_tcnt_buffer_ready = true;
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	80 93 bd 01 	sts	0x01BD, r24
			WDT_buffer_position = 0; // Start collecting the next 32 bytes of Timer 1 counts
    21de:	10 92 0f 02 	sts	0x020F, r1
		}
	}
}
    21e2:	ff 91       	pop	r31
    21e4:	ef 91       	pop	r30
    21e6:	9f 91       	pop	r25
    21e8:	8f 91       	pop	r24
    21ea:	0f 90       	pop	r0
    21ec:	0f be       	out	0x3f, r0	; 63
    21ee:	0f 90       	pop	r0
    21f0:	1f 90       	pop	r1
    21f2:	18 95       	reti

000021f4 <entropy_do_jenkins>:

void entropy_do_jenkins()
{
	if (wdt_tcnt_buffer_ready && entropy_pool_count < 4)
    21f4:	80 91 bd 01 	lds	r24, 0x01BD
    21f8:	88 23       	and	r24, r24
    21fa:	09 f4       	brne	.+2      	; 0x21fe <entropy_do_jenkins+0xa>
    21fc:	55 c0       	rjmp	.+170    	; 0x22a8 <entropy_do_jenkins+0xb4>
    21fe:	80 91 10 02 	lds	r24, 0x0210
    2202:	84 30       	cpi	r24, 0x04	; 4
    2204:	08 f0       	brcs	.+2      	; 0x2208 <entropy_do_jenkins+0x14>
    2206:	50 c0       	rjmp	.+160    	; 0x22a8 <entropy_do_jenkins+0xb4>
	{
		uint32_t hash = entropy_pool[entropy_pool_count];
    2208:	e0 91 10 02 	lds	r30, 0x0210
    220c:	24 e0       	ldi	r18, 0x04	; 4
    220e:	e2 9f       	mul	r30, r18
    2210:	f0 01       	movw	r30, r0
    2212:	11 24       	eor	r1, r1
    2214:	ef 5e       	subi	r30, 0xEF	; 239
    2216:	fd 4f       	sbci	r31, 0xFD	; 253
    2218:	20 81       	ld	r18, Z
    221a:	31 81       	ldd	r19, Z+1	; 0x01
    221c:	42 81       	ldd	r20, Z+2	; 0x02
    221e:	53 81       	ldd	r21, Z+3	; 0x03
    2220:	eb ee       	ldi	r30, 0xEB	; 235
    2222:	f1 e0       	ldi	r31, 0x01	; 1

		for (uint8_t i = 0; i < WDT_BUFFER_SIZE; ++i) {
			hash += WDT_buffer[i];
    2224:	81 91       	ld	r24, Z+
    2226:	28 0f       	add	r18, r24
    2228:	31 1d       	adc	r19, r1
    222a:	41 1d       	adc	r20, r1
    222c:	51 1d       	adc	r21, r1
			hash +=	(hash << 10);
    222e:	a1 e0       	ldi	r26, 0x01	; 1
    2230:	b4 e0       	ldi	r27, 0x04	; 4
    2232:	0e 94 29 14 	call	0x2852	; 0x2852 <__muluhisi3>
			hash ^=	(hash >> 6);
    2236:	9b 01       	movw	r18, r22
    2238:	ac 01       	movw	r20, r24
    223a:	a6 e0       	ldi	r26, 0x06	; 6
    223c:	56 95       	lsr	r21
    223e:	47 95       	ror	r20
    2240:	37 95       	ror	r19
    2242:	27 95       	ror	r18
    2244:	aa 95       	dec	r26
    2246:	d1 f7       	brne	.-12     	; 0x223c <entropy_do_jenkins+0x48>
    2248:	26 27       	eor	r18, r22
    224a:	37 27       	eor	r19, r23
    224c:	48 27       	eor	r20, r24
    224e:	59 27       	eor	r21, r25
{
	if (wdt_tcnt_buffer_ready && entropy_pool_count < 4)
	{
		uint32_t hash = entropy_pool[entropy_pool_count];

		for (uint8_t i = 0; i < WDT_BUFFER_SIZE; ++i) {
    2250:	82 e0       	ldi	r24, 0x02	; 2
    2252:	eb 30       	cpi	r30, 0x0B	; 11
    2254:	f8 07       	cpc	r31, r24
    2256:	31 f7       	brne	.-52     	; 0x2224 <entropy_do_jenkins+0x30>
			hash += WDT_buffer[i];
			hash +=	(hash << 10);
			hash ^=	(hash >> 6);
		}

		hash += (hash << 3);
    2258:	a9 e0       	ldi	r26, 0x09	; 9
    225a:	b0 e0       	ldi	r27, 0x00	; 0
    225c:	0e 94 29 14 	call	0x2852	; 0x2852 <__muluhisi3>
		hash ^= (hash >> 11);
    2260:	9b 01       	movw	r18, r22
    2262:	ac 01       	movw	r20, r24
    2264:	eb e0       	ldi	r30, 0x0B	; 11
    2266:	56 95       	lsr	r21
    2268:	47 95       	ror	r20
    226a:	37 95       	ror	r19
    226c:	27 95       	ror	r18
    226e:	ea 95       	dec	r30
    2270:	d1 f7       	brne	.-12     	; 0x2266 <entropy_do_jenkins+0x72>
    2272:	26 27       	eor	r18, r22
    2274:	37 27       	eor	r19, r23
    2276:	48 27       	eor	r20, r24
    2278:	59 27       	eor	r21, r25
		hash += (hash << 15);
    227a:	a1 e0       	ldi	r26, 0x01	; 1
    227c:	b0 e8       	ldi	r27, 0x80	; 128
    227e:	0e 94 29 14 	call	0x2852	; 0x2852 <__muluhisi3>

		entropy_pool[entropy_pool_count] = hash;
    2282:	e0 91 10 02 	lds	r30, 0x0210
    2286:	24 e0       	ldi	r18, 0x04	; 4
    2288:	e2 9f       	mul	r30, r18
    228a:	f0 01       	movw	r30, r0
    228c:	11 24       	eor	r1, r1
    228e:	ef 5e       	subi	r30, 0xEF	; 239
    2290:	fd 4f       	sbci	r31, 0xFD	; 253
    2292:	60 83       	st	Z, r22
    2294:	71 83       	std	Z+1, r23	; 0x01
    2296:	82 83       	std	Z+2, r24	; 0x02
    2298:	93 83       	std	Z+3, r25	; 0x03

		wdt_tcnt_buffer_ready = false;
    229a:	10 92 bd 01 	sts	0x01BD, r1
		entropy_pool_count++;
    229e:	80 91 10 02 	lds	r24, 0x0210
    22a2:	8f 5f       	subi	r24, 0xFF	; 255
    22a4:	80 93 10 02 	sts	0x0210, r24
    22a8:	08 95       	ret

000022aa <entropy_init>:
// This function initializes the global variables needed to implement the circular entropy pool and
// the buffer that holds the raw Timer 1 values that are used to create the entropy pool.  It then
// Initializes the Watch Dog Timer (WDT) to perform an interrupt every 2048 clock cycles, (about
// 16 ms) which is as fast as it can be set.
void entropy_init() {
	WDT_buffer_position = 0;
    22aa:	10 92 0f 02 	sts	0x020F, r1
	entropy_pool_start = 0;
    22ae:	10 92 ea 01 	sts	0x01EA, r1
	entropy_pool_count = 0;
    22b2:	10 92 10 02 	sts	0x0210, r1

	MCUSR = 0; // Use the MCU status register to reset flags for WDR, BOR, EXTR, and POWR
    22b6:	14 be       	out	0x34, r1	; 52
	// WDT control register, This sets the Watchdog Change Enable (WDCE) flag, which is
	// needed to set the Watchdog system reset (WDE) enable and the Watchdog interrupt enable (WDIE)
	_WD_CONTROL_REG |= _BV(_WD_CHANGE_BIT) | _BV(WDE);
    22b8:	e0 e6       	ldi	r30, 0x60	; 96
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	80 81       	ld	r24, Z
    22be:	88 61       	ori	r24, 0x18	; 24
    22c0:	80 83       	st	Z, r24
	_WD_CONTROL_REG = _BV(WDIE);
    22c2:	80 e4       	ldi	r24, 0x40	; 64
    22c4:	80 83       	st	Z, r24


	TCNT0 = 0;
    22c6:	16 bc       	out	0x26, r1	; 38
	SetBit(TCCR0B, CS00);
    22c8:	85 b5       	in	r24, 0x25	; 37
    22ca:	81 60       	ori	r24, 0x01	; 1
    22cc:	85 bd       	out	0x25, r24	; 37
    22ce:	08 95       	ret

000022d0 <entropy_deinit>:
}

void entropy_deinit()
{
	// Stop Timer0
	ClrBit(TCCR0B, CS00);
    22d0:	85 b5       	in	r24, 0x25	; 37
    22d2:	8e 7f       	andi	r24, 0xFE	; 254
    22d4:	85 bd       	out	0x25, r24	; 37

	// Stop WDT
	MCUSR = 0; // Use the MCU status register to reset flags for WDR, BOR, EXTR, and POWR
    22d6:	14 be       	out	0x34, r1	; 52
	// WDT control register, This sets the Watchdog Change Enable (WDCE) flag, which is
	// needed to set the Watchdog system reset (WDE) enable and the Watchdog interrupt enable (WDIE)
	_WD_CONTROL_REG |= _BV(_WD_CHANGE_BIT) & ~_BV(WDE);
    22d8:	e0 e6       	ldi	r30, 0x60	; 96
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	80 81       	ld	r24, Z
    22de:	80 61       	ori	r24, 0x10	; 16
    22e0:	80 83       	st	Z, r24
	_WD_CONTROL_REG = 0x00;//_BV(WDIE);
    22e2:	10 82       	st	Z, r1
    22e4:	08 95       	ret

000022e6 <entropy_eeprom_renew>:
	}
}


void entropy_eeprom_renew()
{
    22e6:	af 92       	push	r10
    22e8:	bf 92       	push	r11
    22ea:	cf 92       	push	r12
    22ec:	df 92       	push	r13
    22ee:	ef 92       	push	r14
    22f0:	ff 92       	push	r15
    22f2:	0f 93       	push	r16
    22f4:	1f 93       	push	r17
    22f6:	cf 93       	push	r28
    22f8:	df 93       	push	r29

	if(entropy_already_renewed_in_session)
    22fa:	80 91 be 01 	lds	r24, 0x01BE
    22fe:	81 11       	cpse	r24, r1
    2300:	41 c0       	rjmp	.+130    	; 0x2384 <entropy_eeprom_renew+0x9e>
		return;

	// create random from cached watchdog-timer-jitters (if now already done)
	entropy_do_jenkins();
    2302:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <entropy_do_jenkins>

	// do we already have 4*32bits?
	if(entropy_pool_count >= 4) // number of unsigned long values in the entropy pool
    2306:	80 91 10 02 	lds	r24, 0x0210
    230a:	84 30       	cpi	r24, 0x04	; 4
    230c:	d8 f1       	brcs	.+118    	; 0x2384 <entropy_eeprom_renew+0x9e>
    230e:	00 e0       	ldi	r16, 0x00	; 0
    2310:	10 e0       	ldi	r17, 0x00	; 0
    2312:	c0 e0       	ldi	r28, 0x00	; 0
    2314:	d0 e0       	ldi	r29, 0x00	; 0
	{
		uint8_t* addr = 0;

		for(uint8_t i = 0; i <4 ; i++)
		{
			uint32_t hash = entropy_pool[i];
    2316:	f8 01       	movw	r30, r16
    2318:	ee 0f       	add	r30, r30
    231a:	ff 1f       	adc	r31, r31
    231c:	ee 0f       	add	r30, r30
    231e:	ff 1f       	adc	r31, r31
    2320:	ef 5e       	subi	r30, 0xEF	; 239
    2322:	fd 4f       	sbci	r31, 0xFD	; 253
    2324:	c0 80       	ld	r12, Z
    2326:	d1 80       	ldd	r13, Z+1	; 0x01
    2328:	e2 80       	ldd	r14, Z+2	; 0x02
    232a:	f3 80       	ldd	r15, Z+3	; 0x03
			eeprom_write_byte(addr++, (hash & 0xFF000000)>>24);
    232c:	6f 2d       	mov	r22, r15
    232e:	77 27       	eor	r23, r23
    2330:	88 27       	eor	r24, r24
    2332:	99 27       	eor	r25, r25
    2334:	ce 01       	movw	r24, r28
    2336:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <__eewr_byte_m644>
    233a:	5e 01       	movw	r10, r28
			eeprom_write_byte(addr++, (hash & 0x00FF0000)>>16);
    233c:	6e 2d       	mov	r22, r14
    233e:	ce 01       	movw	r24, r28
    2340:	01 96       	adiw	r24, 0x01	; 1
    2342:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <__eewr_byte_m644>
			eeprom_write_byte(addr++, (hash & 0x0000FF00)>> 8);
    2346:	6d 2d       	mov	r22, r13
    2348:	ce 01       	movw	r24, r28
    234a:	02 96       	adiw	r24, 0x02	; 2
    234c:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <__eewr_byte_m644>
    2350:	24 96       	adiw	r28, 0x04	; 4
			eeprom_write_byte(addr++, (hash & 0x000000FF)    );
    2352:	6c 2d       	mov	r22, r12
    2354:	c5 01       	movw	r24, r10
    2356:	03 96       	adiw	r24, 0x03	; 3
    2358:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <__eewr_byte_m644>
    235c:	0f 5f       	subi	r16, 0xFF	; 255
    235e:	1f 4f       	sbci	r17, 0xFF	; 255
	// do we already have 4*32bits?
	if(entropy_pool_count >= 4) // number of unsigned long values in the entropy pool
	{
		uint8_t* addr = 0;

		for(uint8_t i = 0; i <4 ; i++)
    2360:	c0 31       	cpi	r28, 0x10	; 16
    2362:	d1 05       	cpc	r29, r1
    2364:	c1 f6       	brne	.-80     	; 0x2316 <entropy_eeprom_renew+0x30>
			eeprom_write_byte(addr++, (hash & 0x00FF0000)>>16);
			eeprom_write_byte(addr++, (hash & 0x0000FF00)>> 8);
			eeprom_write_byte(addr++, (hash & 0x000000FF)    );
		}

		entropy_already_renewed_in_session = true;
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	80 93 be 01 	sts	0x01BE, r24

		entropy_deinit();
	}
}
    236c:	df 91       	pop	r29
    236e:	cf 91       	pop	r28
    2370:	1f 91       	pop	r17
    2372:	0f 91       	pop	r16
    2374:	ff 90       	pop	r15
    2376:	ef 90       	pop	r14
    2378:	df 90       	pop	r13
    237a:	cf 90       	pop	r12
    237c:	bf 90       	pop	r11
    237e:	af 90       	pop	r10
			eeprom_write_byte(addr++, (hash & 0x000000FF)    );
		}

		entropy_already_renewed_in_session = true;

		entropy_deinit();
    2380:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <entropy_deinit>
	}
}
    2384:	df 91       	pop	r29
    2386:	cf 91       	pop	r28
    2388:	1f 91       	pop	r17
    238a:	0f 91       	pop	r16
    238c:	ff 90       	pop	r15
    238e:	ef 90       	pop	r14
    2390:	df 90       	pop	r13
    2392:	cf 90       	pop	r12
    2394:	bf 90       	pop	r11
    2396:	af 90       	pop	r10
    2398:	08 95       	ret

0000239a <__vector_16>:
#include "uart.h"

bool eeprom_rewritten = false;

ISR(TIMER0_COMPA_vect)
{
    239a:	1f 92       	push	r1
    239c:	0f 92       	push	r0
    239e:	0f b6       	in	r0, 0x3f	; 63
    23a0:	0f 92       	push	r0
    23a2:	11 24       	eor	r1, r1
    23a4:	2f 93       	push	r18
    23a6:	3f 93       	push	r19
    23a8:	4f 93       	push	r20
    23aa:	5f 93       	push	r21
    23ac:	6f 93       	push	r22
    23ae:	7f 93       	push	r23
    23b0:	8f 93       	push	r24
    23b2:	9f 93       	push	r25
    23b4:	af 93       	push	r26
    23b6:	bf 93       	push	r27
    23b8:	ef 93       	push	r30
    23ba:	ff 93       	push	r31
	SetBit(PORTD, PD0);
    23bc:	58 9a       	sbi	0x0b, 0	; 11

	uint8_t r = rand() & 0xFF;
    23be:	0e 94 b9 14 	call	0x2972	; 0x2972 <rand>
//	_delay_loop_1(r); //% (MAX_DELAY_IN_HIDING_INT/3)
	OCR0A = r; //random() & 0xFF; //MIN_DELAY_BETWEEN_HIDING_INT + (random() % (MAX_DELAY_BETWEEN_HIDING_INT-MIN_DELAY_BETWEEN_HIDING_INT));
    23c2:	87 bd       	out	0x27, r24	; 39

	ClrBit(PORTD, PD0);
    23c4:	58 98       	cbi	0x0b, 0	; 11
}
    23c6:	ff 91       	pop	r31
    23c8:	ef 91       	pop	r30
    23ca:	bf 91       	pop	r27
    23cc:	af 91       	pop	r26
    23ce:	9f 91       	pop	r25
    23d0:	8f 91       	pop	r24
    23d2:	7f 91       	pop	r23
    23d4:	6f 91       	pop	r22
    23d6:	5f 91       	pop	r21
    23d8:	4f 91       	pop	r20
    23da:	3f 91       	pop	r19
    23dc:	2f 91       	pop	r18
    23de:	0f 90       	pop	r0
    23e0:	0f be       	out	0x3f, r0	; 63
    23e2:	0f 90       	pop	r0
    23e4:	1f 90       	pop	r1
    23e6:	18 95       	reti

000023e8 <hiding_start_timer>:

	ClrBit(PORTD, PD0);
}
*/
void hiding_start_timer()
{
    23e8:	08 95       	ret

000023ea <hiding_stop_timer>:
}

void hiding_stop_timer()
{
	ClrBit(TCCR0B, CS00);
    23ea:	85 b5       	in	r24, 0x25	; 37
    23ec:	8e 7f       	andi	r24, 0xFE	; 254
    23ee:	85 bd       	out	0x25, r24	; 37
    23f0:	08 95       	ret

000023f2 <main>:
extern aes128_ctx_t ctx;

int main()
{
	// Setup
	led_init();
    23f2:	8f ef       	ldi	r24, 0xFF	; 255
    23f4:	81 b9       	out	0x01, r24	; 1
	trigger_init();
    23f6:	24 9a       	sbi	0x04, 4	; 4
    23f8:	2c 98       	cbi	0x05, 4	; 5
	entropy_init();
    23fa:	0e 94 55 11 	call	0x22aa	; 0x22aa <entropy_init>
	uart_init();
    23fe:	0e 94 f7 13 	call	0x27ee	; 0x27ee <uart_init>
	rng_init();
    2402:	0e 94 4d 13 	call	0x269a	; 0x269a <rng_init>
	comm_init();
    2406:	0e 94 3c 10 	call	0x2078	; 0x2078 <comm_init>
	aes128_init(key, &ctx);
    240a:	6d e6       	ldi	r22, 0x6D	; 109
    240c:	72 e0       	ldi	r23, 0x02	; 2
    240e:	8d e4       	ldi	r24, 0x4D	; 77
    2410:	91 e0       	ldi	r25, 0x01	; 1
    2412:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <aes128_init>

	// Globally enable interrupts
	sei();
    2416:	78 94       	sei

	// Tell the cardreader we're there
	protocol_send_ATR();
    2418:	0e 94 07 13 	call	0x260e	; 0x260e <protocol_send_ATR>

	// Cardreader comm loop
	for(;;)
	{
		protocol_challenge_response();
    241c:	0e 94 d5 12 	call	0x25aa	; 0x25aa <protocol_challenge_response>
    2420:	fd cf       	rjmp	.-6      	; 0x241c <main+0x2a>

00002422 <protocol_receive_expected_data>:
	const uint8_t response[] = {0x90, 0x00};
	comm_transmit_bytes((uint8_t*) response, SIZE(response));
}

void protocol_receive_expected_data(const uint8_t* data, const uint8_t data_length)
{
    2422:	7f 92       	push	r7
    2424:	8f 92       	push	r8
    2426:	9f 92       	push	r9
    2428:	af 92       	push	r10
    242a:	bf 92       	push	r11
    242c:	cf 92       	push	r12
    242e:	df 92       	push	r13
    2430:	ef 92       	push	r14
    2432:	ff 92       	push	r15
    2434:	0f 93       	push	r16
    2436:	1f 93       	push	r17
    2438:	cf 93       	push	r28
    243a:	df 93       	push	r29
    243c:	cd b7       	in	r28, 0x3d	; 61
    243e:	de b7       	in	r29, 0x3e	; 62
    2440:	e2 97       	sbiw	r28, 0x32	; 50
    2442:	0f b6       	in	r0, 0x3f	; 63
    2444:	f8 94       	cli
    2446:	de bf       	out	0x3e, r29	; 62
    2448:	0f be       	out	0x3f, r0	; 63
    244a:	cd bf       	out	0x3d, r28	; 61
    244c:	6c 01       	movw	r12, r24
	for(int i = 0; i < data_length; i++)
    244e:	00 e0       	ldi	r16, 0x00	; 0
    2450:	10 e0       	ldi	r17, 0x00	; 0
    2452:	86 2e       	mov	r8, r22
    2454:	91 2c       	mov	r9, r1
	{
		uint8_t byte_expected = data[i];
		uint8_t byte_received = comm_receive_byte();
		if(byte_expected != byte_received){
			char buf[50];
			sprintf(buf, "Received %02X instead of %02X at byte %d", byte_received, byte_expected, i);
    2456:	84 e2       	ldi	r24, 0x24	; 36
    2458:	a8 2e       	mov	r10, r24
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	b8 2e       	mov	r11, r24
    245e:	ce 01       	movw	r24, r28
    2460:	01 96       	adiw	r24, 0x01	; 1
    2462:	7c 01       	movw	r14, r24
	comm_transmit_bytes((uint8_t*) response, SIZE(response));
}

void protocol_receive_expected_data(const uint8_t* data, const uint8_t data_length)
{
	for(int i = 0; i < data_length; i++)
    2464:	08 15       	cp	r16, r8
    2466:	19 05       	cpc	r17, r9
    2468:	fc f4       	brge	.+62     	; 0x24a8 <protocol_receive_expected_data+0x86>
	{
		uint8_t byte_expected = data[i];
    246a:	f6 01       	movw	r30, r12
    246c:	71 90       	ld	r7, Z+
    246e:	6f 01       	movw	r12, r30
		uint8_t byte_received = comm_receive_byte();
    2470:	0e 94 c9 10 	call	0x2192	; 0x2192 <comm_receive_byte>
		if(byte_expected != byte_received){
    2474:	78 16       	cp	r7, r24
    2476:	a9 f0       	breq	.+42     	; 0x24a2 <protocol_receive_expected_data+0x80>
			char buf[50];
			sprintf(buf, "Received %02X instead of %02X at byte %d", byte_received, byte_expected, i);
    2478:	1f 93       	push	r17
    247a:	0f 93       	push	r16
    247c:	1f 92       	push	r1
    247e:	7f 92       	push	r7
    2480:	1f 92       	push	r1
    2482:	8f 93       	push	r24
    2484:	bf 92       	push	r11
    2486:	af 92       	push	r10
    2488:	ff 92       	push	r15
    248a:	ef 92       	push	r14
    248c:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <sprintf>
			assert(false, buf); // Receive Unexpected Data
    2490:	b7 01       	movw	r22, r14
    2492:	80 e0       	ldi	r24, 0x00	; 0
    2494:	0e 94 1b 14 	call	0x2836	; 0x2836 <assert>
    2498:	0f b6       	in	r0, 0x3f	; 63
    249a:	f8 94       	cli
    249c:	de bf       	out	0x3e, r29	; 62
    249e:	0f be       	out	0x3f, r0	; 63
    24a0:	cd bf       	out	0x3d, r28	; 61
	comm_transmit_bytes((uint8_t*) response, SIZE(response));
}

void protocol_receive_expected_data(const uint8_t* data, const uint8_t data_length)
{
	for(int i = 0; i < data_length; i++)
    24a2:	0f 5f       	subi	r16, 0xFF	; 255
    24a4:	1f 4f       	sbci	r17, 0xFF	; 255
    24a6:	de cf       	rjmp	.-68     	; 0x2464 <protocol_receive_expected_data+0x42>
			char buf[50];
			sprintf(buf, "Received %02X instead of %02X at byte %d", byte_received, byte_expected, i);
			assert(false, buf); // Receive Unexpected Data
		}
	}
}
    24a8:	e2 96       	adiw	r28, 0x32	; 50
    24aa:	0f b6       	in	r0, 0x3f	; 63
    24ac:	f8 94       	cli
    24ae:	de bf       	out	0x3e, r29	; 62
    24b0:	0f be       	out	0x3f, r0	; 63
    24b2:	cd bf       	out	0x3d, r28	; 61
    24b4:	df 91       	pop	r29
    24b6:	cf 91       	pop	r28
    24b8:	1f 91       	pop	r17
    24ba:	0f 91       	pop	r16
    24bc:	ff 90       	pop	r15
    24be:	ef 90       	pop	r14
    24c0:	df 90       	pop	r13
    24c2:	cf 90       	pop	r12
    24c4:	bf 90       	pop	r11
    24c6:	af 90       	pop	r10
    24c8:	9f 90       	pop	r9
    24ca:	8f 90       	pop	r8
    24cc:	7f 90       	pop	r7
    24ce:	08 95       	ret

000024d0 <protocol_get_auth_challenge>:
	protocol_send_auth_response(auth_response);
}


void protocol_get_auth_challenge(uint8_t* auth_challenge)
{
    24d0:	ef 92       	push	r14
    24d2:	ff 92       	push	r15
    24d4:	0f 93       	push	r16
    24d6:	1f 93       	push	r17
    24d8:	cf 93       	push	r28
    24da:	df 93       	push	r29
    24dc:	00 d0       	rcall	.+0      	; 0x24de <protocol_get_auth_challenge+0xe>
    24de:	00 d0       	rcall	.+0      	; 0x24e0 <protocol_get_auth_challenge+0x10>
    24e0:	1f 92       	push	r1
    24e2:	cd b7       	in	r28, 0x3d	; 61
    24e4:	de b7       	in	r29, 0x3e	; 62
    24e6:	7c 01       	movw	r14, r24
	const uint8_t expected_request[] = {0x88, 0x10, 0x00, 0x00, 0x10};
    24e8:	25 e0       	ldi	r18, 0x05	; 5
    24ea:	e7 e1       	ldi	r30, 0x17	; 23
    24ec:	f1 e0       	ldi	r31, 0x01	; 1
    24ee:	de 01       	movw	r26, r28
    24f0:	11 96       	adiw	r26, 0x01	; 1
    24f2:	01 90       	ld	r0, Z+
    24f4:	0d 92       	st	X+, r0
    24f6:	2a 95       	dec	r18
    24f8:	e1 f7       	brne	.-8      	; 0x24f2 <protocol_get_auth_challenge+0x22>
	protocol_receive_expected_data(expected_request, SIZE(expected_request));
    24fa:	65 e0       	ldi	r22, 0x05	; 5
    24fc:	ce 01       	movw	r24, r28
    24fe:	01 96       	adiw	r24, 0x01	; 1
    2500:	0e 94 11 12 	call	0x2422	; 0x2422 <protocol_receive_expected_data>
    2504:	87 01       	movw	r16, r14

	for(int i = 0; i < 16; i++)
    2506:	e1 2c       	mov	r14, r1
    2508:	f1 2c       	mov	r15, r1
	{
		comm_transmit_byte(0xEF);
    250a:	8f ee       	ldi	r24, 0xEF	; 239
    250c:	0e 94 62 10 	call	0x20c4	; 0x20c4 <comm_transmit_byte>
		auth_challenge[i] = comm_receive_byte();
    2510:	0e 94 c9 10 	call	0x2192	; 0x2192 <comm_receive_byte>
    2514:	f8 01       	movw	r30, r16
    2516:	81 93       	st	Z+, r24
    2518:	8f 01       	movw	r16, r30
void protocol_get_auth_challenge(uint8_t* auth_challenge)
{
	const uint8_t expected_request[] = {0x88, 0x10, 0x00, 0x00, 0x10};
	protocol_receive_expected_data(expected_request, SIZE(expected_request));

	for(int i = 0; i < 16; i++)
    251a:	ff ef       	ldi	r31, 0xFF	; 255
    251c:	ef 1a       	sub	r14, r31
    251e:	ff 0a       	sbc	r15, r31
    2520:	80 e1       	ldi	r24, 0x10	; 16
    2522:	e8 16       	cp	r14, r24
    2524:	f1 04       	cpc	r15, r1
    2526:	89 f7       	brne	.-30     	; 0x250a <protocol_get_auth_challenge+0x3a>
	{
		comm_transmit_byte(0xEF);
		auth_challenge[i] = comm_receive_byte();
	}

}
    2528:	0f 90       	pop	r0
    252a:	0f 90       	pop	r0
    252c:	0f 90       	pop	r0
    252e:	0f 90       	pop	r0
    2530:	0f 90       	pop	r0
    2532:	df 91       	pop	r29
    2534:	cf 91       	pop	r28
    2536:	1f 91       	pop	r17
    2538:	0f 91       	pop	r16
    253a:	ff 90       	pop	r15
    253c:	ef 90       	pop	r14
    253e:	08 95       	ret

00002540 <protocol_send_auth_response>:

void protocol_send_auth_response(uint8_t* auth_response)
{
    2540:	0f 93       	push	r16
    2542:	1f 93       	push	r17
    2544:	cf 93       	push	r28
    2546:	df 93       	push	r29
    2548:	cd b7       	in	r28, 0x3d	; 61
    254a:	de b7       	in	r29, 0x3e	; 62
    254c:	27 97       	sbiw	r28, 0x07	; 7
    254e:	0f b6       	in	r0, 0x3f	; 63
    2550:	f8 94       	cli
    2552:	de bf       	out	0x3e, r29	; 62
    2554:	0f be       	out	0x3f, r0	; 63
    2556:	cd bf       	out	0x3d, r28	; 61
    2558:	8c 01       	movw	r16, r24
	uint8_t expected_request[] = {0x88, 0xC0, 0x00, 0x00, 0x10};
    255a:	85 e0       	ldi	r24, 0x05	; 5
    255c:	ec e1       	ldi	r30, 0x1C	; 28
    255e:	f1 e0       	ldi	r31, 0x01	; 1
    2560:	de 01       	movw	r26, r28
    2562:	11 96       	adiw	r26, 0x01	; 1
    2564:	01 90       	ld	r0, Z+
    2566:	0d 92       	st	X+, r0
    2568:	8a 95       	dec	r24
    256a:	e1 f7       	brne	.-8      	; 0x2564 <protocol_send_auth_response+0x24>
	protocol_receive_expected_data(expected_request, SIZE(expected_request));
    256c:	65 e0       	ldi	r22, 0x05	; 5
    256e:	ce 01       	movw	r24, r28
    2570:	01 96       	adiw	r24, 0x01	; 1
    2572:	0e 94 11 12 	call	0x2422	; 0x2422 <protocol_receive_expected_data>

	comm_transmit_byte(0xC0);
    2576:	80 ec       	ldi	r24, 0xC0	; 192
    2578:	0e 94 62 10 	call	0x20c4	; 0x20c4 <comm_transmit_byte>
	comm_transmit_bytes(auth_response, 16); // we know that auth_response will always be 16bytes long.
    257c:	60 e1       	ldi	r22, 0x10	; 16
    257e:	c8 01       	movw	r24, r16
    2580:	0e 94 b0 10 	call	0x2160	; 0x2160 <comm_transmit_bytes>

	const uint8_t response[] = {0x90, 0x00};
    2584:	80 e9       	ldi	r24, 0x90	; 144
    2586:	8e 83       	std	Y+6, r24	; 0x06
    2588:	1f 82       	std	Y+7, r1	; 0x07
	comm_transmit_bytes((uint8_t*) response, SIZE(response));
    258a:	62 e0       	ldi	r22, 0x02	; 2
    258c:	ce 01       	movw	r24, r28
    258e:	06 96       	adiw	r24, 0x06	; 6
    2590:	0e 94 b0 10 	call	0x2160	; 0x2160 <comm_transmit_bytes>
}
    2594:	27 96       	adiw	r28, 0x07	; 7
    2596:	0f b6       	in	r0, 0x3f	; 63
    2598:	f8 94       	cli
    259a:	de bf       	out	0x3e, r29	; 62
    259c:	0f be       	out	0x3f, r0	; 63
    259e:	cd bf       	out	0x3d, r28	; 61
    25a0:	df 91       	pop	r29
    25a2:	cf 91       	pop	r28
    25a4:	1f 91       	pop	r17
    25a6:	0f 91       	pop	r16
    25a8:	08 95       	ret

000025aa <protocol_challenge_response>:
const uint8_t key[16] = {0x64, 0x89, 0x21, 0x15, 0x88, 0xB4, 0xCE, 0xE0, 0x18, 0x4A, 0x14, 0x44, 0xE4, 0xDF, 0xC7, 0x58};
aes128_ctx_t ctx;


void protocol_challenge_response()
{
    25aa:	cf 93       	push	r28
    25ac:	df 93       	push	r29
    25ae:	cd b7       	in	r28, 0x3d	; 61
    25b0:	de b7       	in	r29, 0x3e	; 62
    25b2:	62 97       	sbiw	r28, 0x12	; 18
    25b4:	0f b6       	in	r0, 0x3f	; 63
    25b6:	f8 94       	cli
    25b8:	de bf       	out	0x3e, r29	; 62
    25ba:	0f be       	out	0x3f, r0	; 63
    25bc:	cd bf       	out	0x3d, r28	; 61
	uint8_t auth_challenge[16];

	protocol_get_auth_challenge(auth_challenge);
    25be:	ce 01       	movw	r24, r28
    25c0:	01 96       	adiw	r24, 0x01	; 1
    25c2:	0e 94 68 12 	call	0x24d0	; 0x24d0 <protocol_get_auth_challenge>

	uint8_t* auth_response = auth_challenge;

	// Decrypt, and help attackers by pulling the trigger line high during aes.
	trigger_set();
    25c6:	2c 9a       	sbi	0x05, 4	; 5
	aes128_dec(auth_challenge, &ctx);
    25c8:	6d e6       	ldi	r22, 0x6D	; 109
    25ca:	72 e0       	ldi	r23, 0x02	; 2
    25cc:	ce 01       	movw	r24, r28
    25ce:	01 96       	adiw	r24, 0x01	; 1
    25d0:	0e 94 bd 0c 	call	0x197a	; 0x197a <aes128_dec>
	trigger_clr();
    25d4:	2c 98       	cbi	0x05, 4	; 5

	// We are done with our AES here, but this is the only time where are guaranteed some "idle" time because we can decie when we are ready to continue. this is why we do some "heavy" computations here, that would otherwise block our communication ISRs sometimes.
	entropy_eeprom_renew();
    25d6:	0e 94 73 11 	call	0x22e6	; 0x22e6 <entropy_eeprom_renew>
	rng_entropy_ring_fill(1024);
    25da:	80 e0       	ldi	r24, 0x00	; 0
    25dc:	94 e0       	ldi	r25, 0x04	; 4
    25de:	0e 94 8a 13 	call	0x2714	; 0x2714 <rng_entropy_ring_fill>

	uint8_t response[] = {0x61, 0x10};
    25e2:	81 e6       	ldi	r24, 0x61	; 97
    25e4:	89 8b       	std	Y+17, r24	; 0x11
    25e6:	80 e1       	ldi	r24, 0x10	; 16
    25e8:	8a 8b       	std	Y+18, r24	; 0x12
	comm_transmit_bytes(response, SIZE(response));
    25ea:	62 e0       	ldi	r22, 0x02	; 2
    25ec:	ce 01       	movw	r24, r28
    25ee:	41 96       	adiw	r24, 0x11	; 17
    25f0:	0e 94 b0 10 	call	0x2160	; 0x2160 <comm_transmit_bytes>

	protocol_send_auth_response(auth_response);
    25f4:	ce 01       	movw	r24, r28
    25f6:	01 96       	adiw	r24, 0x01	; 1
    25f8:	0e 94 a0 12 	call	0x2540	; 0x2540 <protocol_send_auth_response>
}
    25fc:	62 96       	adiw	r28, 0x12	; 18
    25fe:	0f b6       	in	r0, 0x3f	; 63
    2600:	f8 94       	cli
    2602:	de bf       	out	0x3e, r29	; 62
    2604:	0f be       	out	0x3f, r0	; 63
    2606:	cd bf       	out	0x3d, r28	; 61
    2608:	df 91       	pop	r29
    260a:	cf 91       	pop	r28
    260c:	08 95       	ret

0000260e <protocol_send_ATR>:
		}
	}
}

void protocol_send_ATR()
{
    260e:	cf 93       	push	r28
    2610:	df 93       	push	r29
    2612:	00 d0       	rcall	.+0      	; 0x2614 <protocol_send_ATR+0x6>
    2614:	00 d0       	rcall	.+0      	; 0x2616 <protocol_send_ATR+0x8>
    2616:	cd b7       	in	r28, 0x3d	; 61
    2618:	de b7       	in	r29, 0x3e	; 62
	const uint8_t atr[] = {0x3B, 0x90, 0x11, 0x00}; // Standard ATR Code
    261a:	8b e3       	ldi	r24, 0x3B	; 59
    261c:	89 83       	std	Y+1, r24	; 0x01
    261e:	80 e9       	ldi	r24, 0x90	; 144
    2620:	8a 83       	std	Y+2, r24	; 0x02
    2622:	81 e1       	ldi	r24, 0x11	; 17
    2624:	8b 83       	std	Y+3, r24	; 0x03
    2626:	1c 82       	std	Y+4, r1	; 0x04
	comm_transmit_bytes((uint8_t*) atr, SIZE(atr));
    2628:	64 e0       	ldi	r22, 0x04	; 4
    262a:	ce 01       	movw	r24, r28
    262c:	01 96       	adiw	r24, 0x01	; 1
    262e:	0e 94 b0 10 	call	0x2160	; 0x2160 <comm_transmit_bytes>
}
    2632:	0f 90       	pop	r0
    2634:	0f 90       	pop	r0
    2636:	0f 90       	pop	r0
    2638:	0f 90       	pop	r0
    263a:	df 91       	pop	r29
    263c:	cf 91       	pop	r28
    263e:	08 95       	ret

00002640 <rng_wrapper>:
	rng_write_seed_to_eeprom_singlebyte(position, newseedbyte);
}

uint8_t rng_wrapper()
{
	if(rng_counter++ == 32)
    2640:	80 91 c1 01 	lds	r24, 0x01C1
    2644:	91 e0       	ldi	r25, 0x01	; 1
    2646:	98 0f       	add	r25, r24
    2648:	90 93 c1 01 	sts	0x01C1, r25
    264c:	80 32       	cpi	r24, 0x20	; 32
    264e:	41 f4       	brne	.+16     	; 0x2660 <rng_wrapper+0x20>
	{
		skein_rand_next(tparam);
    2650:	80 91 15 01 	lds	r24, 0x0115
    2654:	90 91 16 01 	lds	r25, 0x0116
    2658:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <skein_rand_next>
		rng_counter = 0;
    265c:	10 92 c1 01 	sts	0x01C1, r1
	}
	uint8_t out = skein_rand(tparam);
    2660:	80 91 15 01 	lds	r24, 0x0115
    2664:	90 91 16 01 	lds	r25, 0x0116
    2668:	0c 94 f4 0a 	jmp	0x15e8	; 0x15e8 <skein_rand>

0000266c <rng_get_seed_from_eeprom>:
//	uart_putc(out);
	return out;
}

void rng_get_seed_from_eeprom(uint8_t* seed)
{
    266c:	0f 93       	push	r16
    266e:	1f 93       	push	r17
    2670:	cf 93       	push	r28
    2672:	df 93       	push	r29
    2674:	ec 01       	movw	r28, r24
	uint8_t* baseaddr = 0;
    2676:	80 e0       	ldi	r24, 0x00	; 0
    2678:	90 e0       	ldi	r25, 0x00	; 0

	for(uint8_t i = 0; i < 16; i++)
	{
		seed[i] = eeprom_read_byte((uint8_t*) baseaddr++);
    267a:	8c 01       	movw	r16, r24
    267c:	0f 5f       	subi	r16, 0xFF	; 255
    267e:	1f 4f       	sbci	r17, 0xFF	; 255
    2680:	0e 94 d6 16 	call	0x2dac	; 0x2dac <__eerd_byte_m644>
    2684:	89 93       	st	Y+, r24

void rng_get_seed_from_eeprom(uint8_t* seed)
{
	uint8_t* baseaddr = 0;

	for(uint8_t i = 0; i < 16; i++)
    2686:	00 31       	cpi	r16, 0x10	; 16
    2688:	11 05       	cpc	r17, r1
    268a:	11 f0       	breq	.+4      	; 0x2690 <rng_get_seed_from_eeprom+0x24>
	{
		seed[i] = eeprom_read_byte((uint8_t*) baseaddr++);
    268c:	c8 01       	movw	r24, r16
    268e:	f5 cf       	rjmp	.-22     	; 0x267a <rng_get_seed_from_eeprom+0xe>
//		uart_putc(seed[i]);
	}
}
    2690:	df 91       	pop	r29
    2692:	cf 91       	pop	r28
    2694:	1f 91       	pop	r17
    2696:	0f 91       	pop	r16
    2698:	08 95       	ret

0000269a <rng_init>:
uint16_t random_ring_start = 0;
uint16_t random_ring_end = 0;
uint8_t rng_counter = 0;

void rng_init()
{
    269a:	1f 93       	push	r17
    269c:	cf 93       	push	r28
    269e:	df 93       	push	r29
    26a0:	cd b7       	in	r28, 0x3d	; 61
    26a2:	de b7       	in	r29, 0x3e	; 62
    26a4:	60 97       	sbiw	r28, 0x10	; 16
    26a6:	0f b6       	in	r0, 0x3f	; 63
    26a8:	f8 94       	cli
    26aa:	de bf       	out	0x3e, r29	; 62
    26ac:	0f be       	out	0x3f, r0	; 63
    26ae:	cd bf       	out	0x3d, r28	; 61
	random_ring_start = 0;
    26b0:	10 92 c5 01 	sts	0x01C5, r1
    26b4:	10 92 c4 01 	sts	0x01C4, r1
	random_ring_end = 0;
    26b8:	10 92 c3 01 	sts	0x01C3, r1
    26bc:	10 92 c2 01 	sts	0x01C2, r1

	uint8_t seed[16];

	rng_get_seed_from_eeprom(seed);
    26c0:	ce 01       	movw	r24, r28
    26c2:	01 96       	adiw	r24, 0x01	; 1
    26c4:	0e 94 36 13 	call	0x266c	; 0x266c <rng_get_seed_from_eeprom>
	skein_256_256_default_iv();
    26c8:	0e 94 98 0b 	call	0x1730	; 0x1730 <skein_256_256_default_iv>
	skein_rand_seed(tparam, (char*) seed);
    26cc:	be 01       	movw	r22, r28
    26ce:	6f 5f       	subi	r22, 0xFF	; 255
    26d0:	7f 4f       	sbci	r23, 0xFF	; 255
    26d2:	80 91 15 01 	lds	r24, 0x0115
    26d6:	90 91 16 01 	lds	r25, 0x0116
    26da:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <skein_rand_seed>

	uint8_t position = rng_wrapper() % 16;
    26de:	0e 94 20 13 	call	0x2640	; 0x2640 <rng_wrapper>
    26e2:	18 2f       	mov	r17, r24
	uint8_t newseedbyte = rng_wrapper();
    26e4:	0e 94 20 13 	call	0x2640	; 0x2640 <rng_wrapper>

	rng_get_seed_from_eeprom(seed);
	skein_256_256_default_iv();
	skein_rand_seed(tparam, (char*) seed);

	uint8_t position = rng_wrapper() % 16;
    26e8:	1f 70       	andi	r17, 0x0F	; 15
}

void rng_write_seed_to_eeprom_singlebyte(uint8_t seed_index, uint8_t seed)
{
	uint8_t* baseaddr = 0 + seed_index;
	eeprom_write_byte(baseaddr, seed);
    26ea:	68 2f       	mov	r22, r24
    26ec:	81 2f       	mov	r24, r17
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <__eewr_byte_m644>

	uint8_t position = rng_wrapper() % 16;
	uint8_t newseedbyte = rng_wrapper();

	rng_write_seed_to_eeprom_singlebyte(position, newseedbyte);
}
    26f4:	60 96       	adiw	r28, 0x10	; 16
    26f6:	0f b6       	in	r0, 0x3f	; 63
    26f8:	f8 94       	cli
    26fa:	de bf       	out	0x3e, r29	; 62
    26fc:	0f be       	out	0x3f, r0	; 63
    26fe:	cd bf       	out	0x3d, r28	; 61
    2700:	df 91       	pop	r29
    2702:	cf 91       	pop	r28
    2704:	1f 91       	pop	r17
    2706:	08 95       	ret

00002708 <rng_get_seed_from_eeprom_singlebyte>:

uint8_t rng_get_seed_from_eeprom_singlebyte(uint8_t seed_index)
{
	uint8_t* baseaddr = 0 + seed_index;

	return eeprom_read_byte(baseaddr);
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	0c 94 d6 16 	jmp	0x2dac	; 0x2dac <__eerd_byte_m644>

0000270e <rng_write_seed_to_eeprom_singlebyte>:
}

void rng_write_seed_to_eeprom_singlebyte(uint8_t seed_index, uint8_t seed)
{
	uint8_t* baseaddr = 0 + seed_index;
	eeprom_write_byte(baseaddr, seed);
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	0c 94 de 16 	jmp	0x2dbc	; 0x2dbc <__eewr_byte_m644>

00002714 <rng_entropy_ring_fill>:
}

void rng_entropy_ring_fill(uint16_t n)
{
    2714:	ef 92       	push	r14
    2716:	ff 92       	push	r15
    2718:	0f 93       	push	r16
    271a:	1f 93       	push	r17
    271c:	cf 93       	push	r28
    271e:	df 93       	push	r29
	cli();
    2720:	f8 94       	cli
	while (n--)
    2722:	ec 01       	movw	r28, r24
	{
		if((random_ring_end+1) % RANDOM_MEMORY_POOL_SIZE == random_ring_start)
    2724:	01 e0       	ldi	r16, 0x01	; 1
    2726:	14 e0       	ldi	r17, 0x04	; 4
}

void rng_entropy_ring_fill(uint16_t n)
{
	cli();
	while (n--)
    2728:	20 97       	sbiw	r28, 0x00	; 0
    272a:	41 f1       	breq	.+80     	; 0x277c <rng_entropy_ring_fill+0x68>
	{
		if((random_ring_end+1) % RANDOM_MEMORY_POOL_SIZE == random_ring_start)
    272c:	e0 90 c2 01 	lds	r14, 0x01C2
    2730:	f0 90 c3 01 	lds	r15, 0x01C3
    2734:	21 97       	sbiw	r28, 0x01	; 1
    2736:	c7 01       	movw	r24, r14
    2738:	01 96       	adiw	r24, 0x01	; 1
    273a:	b8 01       	movw	r22, r16
    273c:	0e 94 34 14 	call	0x2868	; 0x2868 <__udivmodhi4>
    2740:	20 91 c4 01 	lds	r18, 0x01C4
    2744:	30 91 c5 01 	lds	r19, 0x01C5
    2748:	82 17       	cp	r24, r18
    274a:	93 07       	cpc	r25, r19
    274c:	b9 f0       	breq	.+46     	; 0x277c <rng_entropy_ring_fill+0x68>
		{
			break;
		}

		random_ring[random_ring_end] = rng_wrapper(tparam);
    274e:	80 91 15 01 	lds	r24, 0x0115
    2752:	90 91 16 01 	lds	r25, 0x0116
    2756:	0e 94 20 13 	call	0x2640	; 0x2640 <rng_wrapper>
    275a:	f7 01       	movw	r30, r14
    275c:	e3 5e       	subi	r30, 0xE3	; 227
    275e:	fc 4f       	sbci	r31, 0xFC	; 252
    2760:	80 83       	st	Z, r24
		random_ring_end = (random_ring_end+1) % RANDOM_MEMORY_POOL_SIZE;
    2762:	80 91 c2 01 	lds	r24, 0x01C2
    2766:	90 91 c3 01 	lds	r25, 0x01C3
    276a:	01 96       	adiw	r24, 0x01	; 1
    276c:	b8 01       	movw	r22, r16
    276e:	0e 94 34 14 	call	0x2868	; 0x2868 <__udivmodhi4>
    2772:	90 93 c3 01 	sts	0x01C3, r25
    2776:	80 93 c2 01 	sts	0x01C2, r24
    277a:	d6 cf       	rjmp	.-84     	; 0x2728 <rng_entropy_ring_fill+0x14>
	}
	sei();
    277c:	78 94       	sei
}
    277e:	df 91       	pop	r29
    2780:	cf 91       	pop	r28
    2782:	1f 91       	pop	r17
    2784:	0f 91       	pop	r16
    2786:	ff 90       	pop	r15
    2788:	ef 90       	pop	r14
    278a:	08 95       	ret

0000278c <rng_get_random_byte>:

uint8_t rng_get_random_byte()
{
	if(random_ring_start != random_ring_end)
    278c:	80 91 c4 01 	lds	r24, 0x01C4
    2790:	90 91 c5 01 	lds	r25, 0x01C5
    2794:	20 91 c2 01 	lds	r18, 0x01C2
    2798:	30 91 c3 01 	lds	r19, 0x01C3
    279c:	82 17       	cp	r24, r18
    279e:	93 07       	cpc	r25, r19
    27a0:	79 f0       	breq	.+30     	; 0x27c0 <rng_get_random_byte+0x34>
	{
		uint8_t entropy_val = random_ring[random_ring_start];
    27a2:	fc 01       	movw	r30, r24
    27a4:	e3 5e       	subi	r30, 0xE3	; 227
    27a6:	fc 4f       	sbci	r31, 0xFC	; 252
    27a8:	20 81       	ld	r18, Z
		random_ring_start = (random_ring_start+1) % RANDOM_MEMORY_POOL_SIZE;
    27aa:	01 96       	adiw	r24, 0x01	; 1
    27ac:	61 e0       	ldi	r22, 0x01	; 1
    27ae:	74 e0       	ldi	r23, 0x04	; 4
    27b0:	0e 94 34 14 	call	0x2868	; 0x2868 <__udivmodhi4>
    27b4:	90 93 c5 01 	sts	0x01C5, r25
    27b8:	80 93 c4 01 	sts	0x01C4, r24
		return entropy_val;
    27bc:	82 2f       	mov	r24, r18
    27be:	08 95       	ret
	}
	else
	{
		assert(true, "random buffer underflow");
    27c0:	6d e5       	ldi	r22, 0x5D	; 93
    27c2:	71 e0       	ldi	r23, 0x01	; 1
    27c4:	81 e0       	ldi	r24, 0x01	; 1
    27c6:	0e 94 1b 14 	call	0x2836	; 0x2836 <assert>
		return 0;
    27ca:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    27cc:	08 95       	ret

000027ce <rng_buffer_fill_state>:

uint16_t rng_buffer_fill_state()
{
	if(random_ring_end >= random_ring_start)
    27ce:	80 91 c2 01 	lds	r24, 0x01C2
    27d2:	90 91 c3 01 	lds	r25, 0x01C3
    27d6:	20 91 c4 01 	lds	r18, 0x01C4
    27da:	30 91 c5 01 	lds	r19, 0x01C5
    27de:	82 17       	cp	r24, r18
    27e0:	93 07       	cpc	r25, r19
    27e2:	10 f4       	brcc	.+4      	; 0x27e8 <rng_buffer_fill_state+0x1a>
		return random_ring_end-random_ring_start;
	}
	else
	{
		//return random_ring_end + (RANDOM_MEMORY_POOL_SIZE - random_ring_start)
		return random_ring_end-random_ring_start + RANDOM_MEMORY_POOL_SIZE;
    27e4:	8f 5f       	subi	r24, 0xFF	; 255
    27e6:	9b 4f       	sbci	r25, 0xFB	; 251
    27e8:	82 1b       	sub	r24, r18
    27ea:	93 0b       	sbc	r25, r19
	}
}
    27ec:	08 95       	ret

000027ee <uart_init>:


void uart_init()
{
	// Max Speed!
	UBRR0 = 0;
    27ee:	10 92 c5 00 	sts	0x00C5, r1
    27f2:	10 92 c4 00 	sts	0x00C4, r1
	SetBit(UCSR0A, U2X0);
    27f6:	e0 ec       	ldi	r30, 0xC0	; 192
    27f8:	f0 e0       	ldi	r31, 0x00	; 0
    27fa:	80 81       	ld	r24, Z
    27fc:	82 60       	ori	r24, 0x02	; 2
    27fe:	80 83       	st	Z, r24

	SetBit(UCSR0B, TXEN0); // enable transmit
    2800:	e1 ec       	ldi	r30, 0xC1	; 193
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	80 81       	ld	r24, Z
    2806:	88 60       	ori	r24, 0x08	; 8
    2808:	80 83       	st	Z, r24

	// use receive pin as debug pin instead
	SetBit(DDRD, PD0);
    280a:	50 9a       	sbi	0x0a, 0	; 10
	ClrBit(PORTD, PD0);
    280c:	58 98       	cbi	0x0b, 0	; 11
    280e:	08 95       	ret

00002810 <uart_putc>:
}

void uart_putc(const char c)
{
	while (!GetBit(UCSR0A, UDRE0))
    2810:	90 91 c0 00 	lds	r25, 0x00C0
    2814:	95 ff       	sbrs	r25, 5
    2816:	fc cf       	rjmp	.-8      	; 0x2810 <uart_putc>
		; // wait until buffer free
	UDR0 = c;
    2818:	80 93 c6 00 	sts	0x00C6, r24
    281c:	08 95       	ret

0000281e <uart_puts>:
}

void uart_puts(const char* s)
{
    281e:	cf 93       	push	r28
    2820:	df 93       	push	r29
    2822:	ec 01       	movw	r28, r24
	while(*s) {
    2824:	89 91       	ld	r24, Y+
    2826:	88 23       	and	r24, r24
    2828:	19 f0       	breq	.+6      	; 0x2830 <uart_puts+0x12>
		uart_putc(*s++);
    282a:	0e 94 08 14 	call	0x2810	; 0x2810 <uart_putc>
    282e:	fa cf       	rjmp	.-12     	; 0x2824 <uart_puts+0x6>
	}
}
    2830:	df 91       	pop	r29
    2832:	cf 91       	pop	r28
    2834:	08 95       	ret

00002836 <assert>:

void assert(bool cond, const char* error_string)
{
	if(!cond)
    2836:	81 11       	cpse	r24, r1
    2838:	0b c0       	rjmp	.+22     	; 0x2850 <assert+0x1a>
	{
		// Increment LED error counter
		if(PORTA == 0x00)
    283a:	82 b1       	in	r24, 0x02	; 2
    283c:	81 11       	cpse	r24, r1
    283e:	02 c0       	rjmp	.+4      	; 0x2844 <assert+0xe>
		{
			PORTA = 0x01;
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	02 c0       	rjmp	.+4      	; 0x2848 <assert+0x12>
		} else {
			PORTA ++;
    2844:	82 b1       	in	r24, 0x02	; 2
    2846:	8f 5f       	subi	r24, 0xFF	; 255
    2848:	82 b9       	out	0x02, r24	; 2
		}

		// Print error message
		uart_puts(error_string);
    284a:	cb 01       	movw	r24, r22
    284c:	0c 94 0f 14 	jmp	0x281e	; 0x281e <uart_puts>
    2850:	08 95       	ret

00002852 <__muluhisi3>:
    2852:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__umulhisi3>
    2856:	a5 9f       	mul	r26, r21
    2858:	90 0d       	add	r25, r0
    285a:	b4 9f       	mul	r27, r20
    285c:	90 0d       	add	r25, r0
    285e:	a4 9f       	mul	r26, r20
    2860:	80 0d       	add	r24, r0
    2862:	91 1d       	adc	r25, r1
    2864:	11 24       	eor	r1, r1
    2866:	08 95       	ret

00002868 <__udivmodhi4>:
    2868:	aa 1b       	sub	r26, r26
    286a:	bb 1b       	sub	r27, r27
    286c:	51 e1       	ldi	r21, 0x11	; 17
    286e:	07 c0       	rjmp	.+14     	; 0x287e <__udivmodhi4_ep>

00002870 <__udivmodhi4_loop>:
    2870:	aa 1f       	adc	r26, r26
    2872:	bb 1f       	adc	r27, r27
    2874:	a6 17       	cp	r26, r22
    2876:	b7 07       	cpc	r27, r23
    2878:	10 f0       	brcs	.+4      	; 0x287e <__udivmodhi4_ep>
    287a:	a6 1b       	sub	r26, r22
    287c:	b7 0b       	sbc	r27, r23

0000287e <__udivmodhi4_ep>:
    287e:	88 1f       	adc	r24, r24
    2880:	99 1f       	adc	r25, r25
    2882:	5a 95       	dec	r21
    2884:	a9 f7       	brne	.-22     	; 0x2870 <__udivmodhi4_loop>
    2886:	80 95       	com	r24
    2888:	90 95       	com	r25
    288a:	bc 01       	movw	r22, r24
    288c:	cd 01       	movw	r24, r26
    288e:	08 95       	ret

00002890 <__divmodhi4>:
    2890:	97 fb       	bst	r25, 7
    2892:	07 2e       	mov	r0, r23
    2894:	16 f4       	brtc	.+4      	; 0x289a <__divmodhi4+0xa>
    2896:	00 94       	com	r0
    2898:	07 d0       	rcall	.+14     	; 0x28a8 <__divmodhi4_neg1>
    289a:	77 fd       	sbrc	r23, 7
    289c:	09 d0       	rcall	.+18     	; 0x28b0 <__divmodhi4_neg2>
    289e:	0e 94 34 14 	call	0x2868	; 0x2868 <__udivmodhi4>
    28a2:	07 fc       	sbrc	r0, 7
    28a4:	05 d0       	rcall	.+10     	; 0x28b0 <__divmodhi4_neg2>
    28a6:	3e f4       	brtc	.+14     	; 0x28b6 <__divmodhi4_exit>

000028a8 <__divmodhi4_neg1>:
    28a8:	90 95       	com	r25
    28aa:	81 95       	neg	r24
    28ac:	9f 4f       	sbci	r25, 0xFF	; 255
    28ae:	08 95       	ret

000028b0 <__divmodhi4_neg2>:
    28b0:	70 95       	com	r23
    28b2:	61 95       	neg	r22
    28b4:	7f 4f       	sbci	r23, 0xFF	; 255

000028b6 <__divmodhi4_exit>:
    28b6:	08 95       	ret

000028b8 <__umulhisi3>:
    28b8:	a2 9f       	mul	r26, r18
    28ba:	b0 01       	movw	r22, r0
    28bc:	b3 9f       	mul	r27, r19
    28be:	c0 01       	movw	r24, r0
    28c0:	a3 9f       	mul	r26, r19
    28c2:	70 0d       	add	r23, r0
    28c4:	81 1d       	adc	r24, r1
    28c6:	11 24       	eor	r1, r1
    28c8:	91 1d       	adc	r25, r1
    28ca:	b2 9f       	mul	r27, r18
    28cc:	70 0d       	add	r23, r0
    28ce:	81 1d       	adc	r24, r1
    28d0:	11 24       	eor	r1, r1
    28d2:	91 1d       	adc	r25, r1
    28d4:	08 95       	ret

000028d6 <do_rand>:
    28d6:	8f 92       	push	r8
    28d8:	9f 92       	push	r9
    28da:	af 92       	push	r10
    28dc:	bf 92       	push	r11
    28de:	cf 92       	push	r12
    28e0:	df 92       	push	r13
    28e2:	ef 92       	push	r14
    28e4:	ff 92       	push	r15
    28e6:	cf 93       	push	r28
    28e8:	df 93       	push	r29
    28ea:	ec 01       	movw	r28, r24
    28ec:	68 81       	ld	r22, Y
    28ee:	79 81       	ldd	r23, Y+1	; 0x01
    28f0:	8a 81       	ldd	r24, Y+2	; 0x02
    28f2:	9b 81       	ldd	r25, Y+3	; 0x03
    28f4:	61 15       	cp	r22, r1
    28f6:	71 05       	cpc	r23, r1
    28f8:	81 05       	cpc	r24, r1
    28fa:	91 05       	cpc	r25, r1
    28fc:	21 f4       	brne	.+8      	; 0x2906 <do_rand+0x30>
    28fe:	64 e2       	ldi	r22, 0x24	; 36
    2900:	79 ed       	ldi	r23, 0xD9	; 217
    2902:	8b e5       	ldi	r24, 0x5B	; 91
    2904:	97 e0       	ldi	r25, 0x07	; 7
    2906:	2d e1       	ldi	r18, 0x1D	; 29
    2908:	33 ef       	ldi	r19, 0xF3	; 243
    290a:	41 e0       	ldi	r20, 0x01	; 1
    290c:	50 e0       	ldi	r21, 0x00	; 0
    290e:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <__divmodsi4>
    2912:	49 01       	movw	r8, r18
    2914:	5a 01       	movw	r10, r20
    2916:	9b 01       	movw	r18, r22
    2918:	ac 01       	movw	r20, r24
    291a:	a7 ea       	ldi	r26, 0xA7	; 167
    291c:	b1 e4       	ldi	r27, 0x41	; 65
    291e:	0e 94 29 14 	call	0x2852	; 0x2852 <__muluhisi3>
    2922:	6b 01       	movw	r12, r22
    2924:	7c 01       	movw	r14, r24
    2926:	ac ee       	ldi	r26, 0xEC	; 236
    2928:	b4 ef       	ldi	r27, 0xF4	; 244
    292a:	a5 01       	movw	r20, r10
    292c:	94 01       	movw	r18, r8
    292e:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulohisi3>
    2932:	c6 0e       	add	r12, r22
    2934:	d7 1e       	adc	r13, r23
    2936:	e8 1e       	adc	r14, r24
    2938:	f9 1e       	adc	r15, r25
    293a:	f7 fe       	sbrs	r15, 7
    293c:	06 c0       	rjmp	.+12     	; 0x294a <do_rand+0x74>
    293e:	81 e0       	ldi	r24, 0x01	; 1
    2940:	c8 1a       	sub	r12, r24
    2942:	d1 08       	sbc	r13, r1
    2944:	e1 08       	sbc	r14, r1
    2946:	80 e8       	ldi	r24, 0x80	; 128
    2948:	f8 0a       	sbc	r15, r24
    294a:	c8 82       	st	Y, r12
    294c:	d9 82       	std	Y+1, r13	; 0x01
    294e:	ea 82       	std	Y+2, r14	; 0x02
    2950:	fb 82       	std	Y+3, r15	; 0x03
    2952:	c6 01       	movw	r24, r12
    2954:	9f 77       	andi	r25, 0x7F	; 127
    2956:	df 91       	pop	r29
    2958:	cf 91       	pop	r28
    295a:	ff 90       	pop	r15
    295c:	ef 90       	pop	r14
    295e:	df 90       	pop	r13
    2960:	cf 90       	pop	r12
    2962:	bf 90       	pop	r11
    2964:	af 90       	pop	r10
    2966:	9f 90       	pop	r9
    2968:	8f 90       	pop	r8
    296a:	08 95       	ret

0000296c <rand_r>:
    296c:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <do_rand>
    2970:	08 95       	ret

00002972 <rand>:
    2972:	80 e0       	ldi	r24, 0x00	; 0
    2974:	91 e0       	ldi	r25, 0x01	; 1
    2976:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <do_rand>
    297a:	08 95       	ret

0000297c <srand>:
    297c:	a0 e0       	ldi	r26, 0x00	; 0
    297e:	b0 e0       	ldi	r27, 0x00	; 0
    2980:	80 93 00 01 	sts	0x0100, r24
    2984:	90 93 01 01 	sts	0x0101, r25
    2988:	a0 93 02 01 	sts	0x0102, r26
    298c:	b0 93 03 01 	sts	0x0103, r27
    2990:	08 95       	ret

00002992 <memcpy_P>:
    2992:	fb 01       	movw	r30, r22
    2994:	dc 01       	movw	r26, r24
    2996:	02 c0       	rjmp	.+4      	; 0x299c <memcpy_P+0xa>
    2998:	05 90       	lpm	r0, Z+
    299a:	0d 92       	st	X+, r0
    299c:	41 50       	subi	r20, 0x01	; 1
    299e:	50 40       	sbci	r21, 0x00	; 0
    29a0:	d8 f7       	brcc	.-10     	; 0x2998 <memcpy_P+0x6>
    29a2:	08 95       	ret

000029a4 <memcpy>:
    29a4:	fb 01       	movw	r30, r22
    29a6:	dc 01       	movw	r26, r24
    29a8:	02 c0       	rjmp	.+4      	; 0x29ae <memcpy+0xa>
    29aa:	01 90       	ld	r0, Z+
    29ac:	0d 92       	st	X+, r0
    29ae:	41 50       	subi	r20, 0x01	; 1
    29b0:	50 40       	sbci	r21, 0x00	; 0
    29b2:	d8 f7       	brcc	.-10     	; 0x29aa <memcpy+0x6>
    29b4:	08 95       	ret

000029b6 <memset>:
    29b6:	dc 01       	movw	r26, r24
    29b8:	01 c0       	rjmp	.+2      	; 0x29bc <memset+0x6>
    29ba:	6d 93       	st	X+, r22
    29bc:	41 50       	subi	r20, 0x01	; 1
    29be:	50 40       	sbci	r21, 0x00	; 0
    29c0:	e0 f7       	brcc	.-8      	; 0x29ba <memset+0x4>
    29c2:	08 95       	ret

000029c4 <sprintf>:
    29c4:	ae e0       	ldi	r26, 0x0E	; 14
    29c6:	b0 e0       	ldi	r27, 0x00	; 0
    29c8:	e8 ee       	ldi	r30, 0xE8	; 232
    29ca:	f4 e1       	ldi	r31, 0x14	; 20
    29cc:	0c 94 c7 17 	jmp	0x2f8e	; 0x2f8e <__prologue_saves__+0x1c>
    29d0:	0d 89       	ldd	r16, Y+21	; 0x15
    29d2:	1e 89       	ldd	r17, Y+22	; 0x16
    29d4:	86 e0       	ldi	r24, 0x06	; 6
    29d6:	8c 83       	std	Y+4, r24	; 0x04
    29d8:	1a 83       	std	Y+2, r17	; 0x02
    29da:	09 83       	std	Y+1, r16	; 0x01
    29dc:	8f ef       	ldi	r24, 0xFF	; 255
    29de:	9f e7       	ldi	r25, 0x7F	; 127
    29e0:	9e 83       	std	Y+6, r25	; 0x06
    29e2:	8d 83       	std	Y+5, r24	; 0x05
    29e4:	ae 01       	movw	r20, r28
    29e6:	47 5e       	subi	r20, 0xE7	; 231
    29e8:	5f 4f       	sbci	r21, 0xFF	; 255
    29ea:	6f 89       	ldd	r22, Y+23	; 0x17
    29ec:	78 8d       	ldd	r23, Y+24	; 0x18
    29ee:	ce 01       	movw	r24, r28
    29f0:	01 96       	adiw	r24, 0x01	; 1
    29f2:	0e 94 04 15 	call	0x2a08	; 0x2a08 <vfprintf>
    29f6:	ef 81       	ldd	r30, Y+7	; 0x07
    29f8:	f8 85       	ldd	r31, Y+8	; 0x08
    29fa:	e0 0f       	add	r30, r16
    29fc:	f1 1f       	adc	r31, r17
    29fe:	10 82       	st	Z, r1
    2a00:	2e 96       	adiw	r28, 0x0e	; 14
    2a02:	e4 e0       	ldi	r30, 0x04	; 4
    2a04:	0c 94 e3 17 	jmp	0x2fc6	; 0x2fc6 <__epilogue_restores__+0x1c>

00002a08 <vfprintf>:
    2a08:	ac e0       	ldi	r26, 0x0C	; 12
    2a0a:	b0 e0       	ldi	r27, 0x00	; 0
    2a0c:	ea e0       	ldi	r30, 0x0A	; 10
    2a0e:	f5 e1       	ldi	r31, 0x15	; 21
    2a10:	0c 94 b9 17 	jmp	0x2f72	; 0x2f72 <__prologue_saves__>
    2a14:	7c 01       	movw	r14, r24
    2a16:	6b 01       	movw	r12, r22
    2a18:	8a 01       	movw	r16, r20
    2a1a:	fc 01       	movw	r30, r24
    2a1c:	17 82       	std	Z+7, r1	; 0x07
    2a1e:	16 82       	std	Z+6, r1	; 0x06
    2a20:	83 81       	ldd	r24, Z+3	; 0x03
    2a22:	81 ff       	sbrs	r24, 1
    2a24:	bd c1       	rjmp	.+890    	; 0x2da0 <vfprintf+0x398>
    2a26:	ce 01       	movw	r24, r28
    2a28:	01 96       	adiw	r24, 0x01	; 1
    2a2a:	4c 01       	movw	r8, r24
    2a2c:	f7 01       	movw	r30, r14
    2a2e:	93 81       	ldd	r25, Z+3	; 0x03
    2a30:	f6 01       	movw	r30, r12
    2a32:	93 fd       	sbrc	r25, 3
    2a34:	85 91       	lpm	r24, Z+
    2a36:	93 ff       	sbrs	r25, 3
    2a38:	81 91       	ld	r24, Z+
    2a3a:	6f 01       	movw	r12, r30
    2a3c:	88 23       	and	r24, r24
    2a3e:	09 f4       	brne	.+2      	; 0x2a42 <vfprintf+0x3a>
    2a40:	ab c1       	rjmp	.+854    	; 0x2d98 <vfprintf+0x390>
    2a42:	85 32       	cpi	r24, 0x25	; 37
    2a44:	39 f4       	brne	.+14     	; 0x2a54 <vfprintf+0x4c>
    2a46:	93 fd       	sbrc	r25, 3
    2a48:	85 91       	lpm	r24, Z+
    2a4a:	93 ff       	sbrs	r25, 3
    2a4c:	81 91       	ld	r24, Z+
    2a4e:	6f 01       	movw	r12, r30
    2a50:	85 32       	cpi	r24, 0x25	; 37
    2a52:	29 f4       	brne	.+10     	; 0x2a5e <vfprintf+0x56>
    2a54:	b7 01       	movw	r22, r14
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	0e 94 02 17 	call	0x2e04	; 0x2e04 <fputc>
    2a5c:	e7 cf       	rjmp	.-50     	; 0x2a2c <vfprintf+0x24>
    2a5e:	51 2c       	mov	r5, r1
    2a60:	31 2c       	mov	r3, r1
    2a62:	20 e0       	ldi	r18, 0x00	; 0
    2a64:	20 32       	cpi	r18, 0x20	; 32
    2a66:	a0 f4       	brcc	.+40     	; 0x2a90 <vfprintf+0x88>
    2a68:	8b 32       	cpi	r24, 0x2B	; 43
    2a6a:	69 f0       	breq	.+26     	; 0x2a86 <vfprintf+0x7e>
    2a6c:	30 f4       	brcc	.+12     	; 0x2a7a <vfprintf+0x72>
    2a6e:	80 32       	cpi	r24, 0x20	; 32
    2a70:	59 f0       	breq	.+22     	; 0x2a88 <vfprintf+0x80>
    2a72:	83 32       	cpi	r24, 0x23	; 35
    2a74:	69 f4       	brne	.+26     	; 0x2a90 <vfprintf+0x88>
    2a76:	20 61       	ori	r18, 0x10	; 16
    2a78:	2c c0       	rjmp	.+88     	; 0x2ad2 <vfprintf+0xca>
    2a7a:	8d 32       	cpi	r24, 0x2D	; 45
    2a7c:	39 f0       	breq	.+14     	; 0x2a8c <vfprintf+0x84>
    2a7e:	80 33       	cpi	r24, 0x30	; 48
    2a80:	39 f4       	brne	.+14     	; 0x2a90 <vfprintf+0x88>
    2a82:	21 60       	ori	r18, 0x01	; 1
    2a84:	26 c0       	rjmp	.+76     	; 0x2ad2 <vfprintf+0xca>
    2a86:	22 60       	ori	r18, 0x02	; 2
    2a88:	24 60       	ori	r18, 0x04	; 4
    2a8a:	23 c0       	rjmp	.+70     	; 0x2ad2 <vfprintf+0xca>
    2a8c:	28 60       	ori	r18, 0x08	; 8
    2a8e:	21 c0       	rjmp	.+66     	; 0x2ad2 <vfprintf+0xca>
    2a90:	27 fd       	sbrc	r18, 7
    2a92:	27 c0       	rjmp	.+78     	; 0x2ae2 <vfprintf+0xda>
    2a94:	30 ed       	ldi	r19, 0xD0	; 208
    2a96:	38 0f       	add	r19, r24
    2a98:	3a 30       	cpi	r19, 0x0A	; 10
    2a9a:	78 f4       	brcc	.+30     	; 0x2aba <vfprintf+0xb2>
    2a9c:	26 ff       	sbrs	r18, 6
    2a9e:	06 c0       	rjmp	.+12     	; 0x2aac <vfprintf+0xa4>
    2aa0:	fa e0       	ldi	r31, 0x0A	; 10
    2aa2:	5f 9e       	mul	r5, r31
    2aa4:	30 0d       	add	r19, r0
    2aa6:	11 24       	eor	r1, r1
    2aa8:	53 2e       	mov	r5, r19
    2aaa:	13 c0       	rjmp	.+38     	; 0x2ad2 <vfprintf+0xca>
    2aac:	8a e0       	ldi	r24, 0x0A	; 10
    2aae:	38 9e       	mul	r3, r24
    2ab0:	30 0d       	add	r19, r0
    2ab2:	11 24       	eor	r1, r1
    2ab4:	33 2e       	mov	r3, r19
    2ab6:	20 62       	ori	r18, 0x20	; 32
    2ab8:	0c c0       	rjmp	.+24     	; 0x2ad2 <vfprintf+0xca>
    2aba:	8e 32       	cpi	r24, 0x2E	; 46
    2abc:	21 f4       	brne	.+8      	; 0x2ac6 <vfprintf+0xbe>
    2abe:	26 fd       	sbrc	r18, 6
    2ac0:	6b c1       	rjmp	.+726    	; 0x2d98 <vfprintf+0x390>
    2ac2:	20 64       	ori	r18, 0x40	; 64
    2ac4:	06 c0       	rjmp	.+12     	; 0x2ad2 <vfprintf+0xca>
    2ac6:	8c 36       	cpi	r24, 0x6C	; 108
    2ac8:	11 f4       	brne	.+4      	; 0x2ace <vfprintf+0xc6>
    2aca:	20 68       	ori	r18, 0x80	; 128
    2acc:	02 c0       	rjmp	.+4      	; 0x2ad2 <vfprintf+0xca>
    2ace:	88 36       	cpi	r24, 0x68	; 104
    2ad0:	41 f4       	brne	.+16     	; 0x2ae2 <vfprintf+0xda>
    2ad2:	f6 01       	movw	r30, r12
    2ad4:	93 fd       	sbrc	r25, 3
    2ad6:	85 91       	lpm	r24, Z+
    2ad8:	93 ff       	sbrs	r25, 3
    2ada:	81 91       	ld	r24, Z+
    2adc:	6f 01       	movw	r12, r30
    2ade:	81 11       	cpse	r24, r1
    2ae0:	c1 cf       	rjmp	.-126    	; 0x2a64 <vfprintf+0x5c>
    2ae2:	98 2f       	mov	r25, r24
    2ae4:	9f 7d       	andi	r25, 0xDF	; 223
    2ae6:	95 54       	subi	r25, 0x45	; 69
    2ae8:	93 30       	cpi	r25, 0x03	; 3
    2aea:	28 f4       	brcc	.+10     	; 0x2af6 <vfprintf+0xee>
    2aec:	0c 5f       	subi	r16, 0xFC	; 252
    2aee:	1f 4f       	sbci	r17, 0xFF	; 255
    2af0:	ff e3       	ldi	r31, 0x3F	; 63
    2af2:	f9 83       	std	Y+1, r31	; 0x01
    2af4:	0d c0       	rjmp	.+26     	; 0x2b10 <vfprintf+0x108>
    2af6:	83 36       	cpi	r24, 0x63	; 99
    2af8:	31 f0       	breq	.+12     	; 0x2b06 <vfprintf+0xfe>
    2afa:	83 37       	cpi	r24, 0x73	; 115
    2afc:	71 f0       	breq	.+28     	; 0x2b1a <vfprintf+0x112>
    2afe:	83 35       	cpi	r24, 0x53	; 83
    2b00:	09 f0       	breq	.+2      	; 0x2b04 <vfprintf+0xfc>
    2b02:	5b c0       	rjmp	.+182    	; 0x2bba <vfprintf+0x1b2>
    2b04:	22 c0       	rjmp	.+68     	; 0x2b4a <vfprintf+0x142>
    2b06:	f8 01       	movw	r30, r16
    2b08:	80 81       	ld	r24, Z
    2b0a:	89 83       	std	Y+1, r24	; 0x01
    2b0c:	0e 5f       	subi	r16, 0xFE	; 254
    2b0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b10:	44 24       	eor	r4, r4
    2b12:	43 94       	inc	r4
    2b14:	51 2c       	mov	r5, r1
    2b16:	54 01       	movw	r10, r8
    2b18:	15 c0       	rjmp	.+42     	; 0x2b44 <vfprintf+0x13c>
    2b1a:	38 01       	movw	r6, r16
    2b1c:	f2 e0       	ldi	r31, 0x02	; 2
    2b1e:	6f 0e       	add	r6, r31
    2b20:	71 1c       	adc	r7, r1
    2b22:	f8 01       	movw	r30, r16
    2b24:	a0 80       	ld	r10, Z
    2b26:	b1 80       	ldd	r11, Z+1	; 0x01
    2b28:	26 ff       	sbrs	r18, 6
    2b2a:	03 c0       	rjmp	.+6      	; 0x2b32 <vfprintf+0x12a>
    2b2c:	65 2d       	mov	r22, r5
    2b2e:	70 e0       	ldi	r23, 0x00	; 0
    2b30:	02 c0       	rjmp	.+4      	; 0x2b36 <vfprintf+0x12e>
    2b32:	6f ef       	ldi	r22, 0xFF	; 255
    2b34:	7f ef       	ldi	r23, 0xFF	; 255
    2b36:	c5 01       	movw	r24, r10
    2b38:	2c 87       	std	Y+12, r18	; 0x0c
    2b3a:	0e 94 f7 16 	call	0x2dee	; 0x2dee <strnlen>
    2b3e:	2c 01       	movw	r4, r24
    2b40:	83 01       	movw	r16, r6
    2b42:	2c 85       	ldd	r18, Y+12	; 0x0c
    2b44:	2f 77       	andi	r18, 0x7F	; 127
    2b46:	22 2e       	mov	r2, r18
    2b48:	17 c0       	rjmp	.+46     	; 0x2b78 <vfprintf+0x170>
    2b4a:	38 01       	movw	r6, r16
    2b4c:	f2 e0       	ldi	r31, 0x02	; 2
    2b4e:	6f 0e       	add	r6, r31
    2b50:	71 1c       	adc	r7, r1
    2b52:	f8 01       	movw	r30, r16
    2b54:	a0 80       	ld	r10, Z
    2b56:	b1 80       	ldd	r11, Z+1	; 0x01
    2b58:	26 ff       	sbrs	r18, 6
    2b5a:	03 c0       	rjmp	.+6      	; 0x2b62 <vfprintf+0x15a>
    2b5c:	65 2d       	mov	r22, r5
    2b5e:	70 e0       	ldi	r23, 0x00	; 0
    2b60:	02 c0       	rjmp	.+4      	; 0x2b66 <vfprintf+0x15e>
    2b62:	6f ef       	ldi	r22, 0xFF	; 255
    2b64:	7f ef       	ldi	r23, 0xFF	; 255
    2b66:	c5 01       	movw	r24, r10
    2b68:	2c 87       	std	Y+12, r18	; 0x0c
    2b6a:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <strnlen_P>
    2b6e:	2c 01       	movw	r4, r24
    2b70:	2c 85       	ldd	r18, Y+12	; 0x0c
    2b72:	20 68       	ori	r18, 0x80	; 128
    2b74:	22 2e       	mov	r2, r18
    2b76:	83 01       	movw	r16, r6
    2b78:	23 fc       	sbrc	r2, 3
    2b7a:	1b c0       	rjmp	.+54     	; 0x2bb2 <vfprintf+0x1aa>
    2b7c:	83 2d       	mov	r24, r3
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	48 16       	cp	r4, r24
    2b82:	59 06       	cpc	r5, r25
    2b84:	b0 f4       	brcc	.+44     	; 0x2bb2 <vfprintf+0x1aa>
    2b86:	b7 01       	movw	r22, r14
    2b88:	80 e2       	ldi	r24, 0x20	; 32
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	0e 94 02 17 	call	0x2e04	; 0x2e04 <fputc>
    2b90:	3a 94       	dec	r3
    2b92:	f4 cf       	rjmp	.-24     	; 0x2b7c <vfprintf+0x174>
    2b94:	f5 01       	movw	r30, r10
    2b96:	27 fc       	sbrc	r2, 7
    2b98:	85 91       	lpm	r24, Z+
    2b9a:	27 fe       	sbrs	r2, 7
    2b9c:	81 91       	ld	r24, Z+
    2b9e:	5f 01       	movw	r10, r30
    2ba0:	b7 01       	movw	r22, r14
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	0e 94 02 17 	call	0x2e04	; 0x2e04 <fputc>
    2ba8:	31 10       	cpse	r3, r1
    2baa:	3a 94       	dec	r3
    2bac:	f1 e0       	ldi	r31, 0x01	; 1
    2bae:	4f 1a       	sub	r4, r31
    2bb0:	51 08       	sbc	r5, r1
    2bb2:	41 14       	cp	r4, r1
    2bb4:	51 04       	cpc	r5, r1
    2bb6:	71 f7       	brne	.-36     	; 0x2b94 <vfprintf+0x18c>
    2bb8:	e5 c0       	rjmp	.+458    	; 0x2d84 <vfprintf+0x37c>
    2bba:	84 36       	cpi	r24, 0x64	; 100
    2bbc:	11 f0       	breq	.+4      	; 0x2bc2 <vfprintf+0x1ba>
    2bbe:	89 36       	cpi	r24, 0x69	; 105
    2bc0:	39 f5       	brne	.+78     	; 0x2c10 <vfprintf+0x208>
    2bc2:	f8 01       	movw	r30, r16
    2bc4:	27 ff       	sbrs	r18, 7
    2bc6:	07 c0       	rjmp	.+14     	; 0x2bd6 <vfprintf+0x1ce>
    2bc8:	60 81       	ld	r22, Z
    2bca:	71 81       	ldd	r23, Z+1	; 0x01
    2bcc:	82 81       	ldd	r24, Z+2	; 0x02
    2bce:	93 81       	ldd	r25, Z+3	; 0x03
    2bd0:	0c 5f       	subi	r16, 0xFC	; 252
    2bd2:	1f 4f       	sbci	r17, 0xFF	; 255
    2bd4:	08 c0       	rjmp	.+16     	; 0x2be6 <vfprintf+0x1de>
    2bd6:	60 81       	ld	r22, Z
    2bd8:	71 81       	ldd	r23, Z+1	; 0x01
    2bda:	88 27       	eor	r24, r24
    2bdc:	77 fd       	sbrc	r23, 7
    2bde:	80 95       	com	r24
    2be0:	98 2f       	mov	r25, r24
    2be2:	0e 5f       	subi	r16, 0xFE	; 254
    2be4:	1f 4f       	sbci	r17, 0xFF	; 255
    2be6:	2f 76       	andi	r18, 0x6F	; 111
    2be8:	b2 2e       	mov	r11, r18
    2bea:	97 ff       	sbrs	r25, 7
    2bec:	09 c0       	rjmp	.+18     	; 0x2c00 <vfprintf+0x1f8>
    2bee:	90 95       	com	r25
    2bf0:	80 95       	com	r24
    2bf2:	70 95       	com	r23
    2bf4:	61 95       	neg	r22
    2bf6:	7f 4f       	sbci	r23, 0xFF	; 255
    2bf8:	8f 4f       	sbci	r24, 0xFF	; 255
    2bfa:	9f 4f       	sbci	r25, 0xFF	; 255
    2bfc:	20 68       	ori	r18, 0x80	; 128
    2bfe:	b2 2e       	mov	r11, r18
    2c00:	2a e0       	ldi	r18, 0x0A	; 10
    2c02:	30 e0       	ldi	r19, 0x00	; 0
    2c04:	a4 01       	movw	r20, r8
    2c06:	0e 94 34 17 	call	0x2e68	; 0x2e68 <__ultoa_invert>
    2c0a:	a8 2e       	mov	r10, r24
    2c0c:	a8 18       	sub	r10, r8
    2c0e:	44 c0       	rjmp	.+136    	; 0x2c98 <vfprintf+0x290>
    2c10:	85 37       	cpi	r24, 0x75	; 117
    2c12:	29 f4       	brne	.+10     	; 0x2c1e <vfprintf+0x216>
    2c14:	2f 7e       	andi	r18, 0xEF	; 239
    2c16:	b2 2e       	mov	r11, r18
    2c18:	2a e0       	ldi	r18, 0x0A	; 10
    2c1a:	30 e0       	ldi	r19, 0x00	; 0
    2c1c:	25 c0       	rjmp	.+74     	; 0x2c68 <vfprintf+0x260>
    2c1e:	f2 2f       	mov	r31, r18
    2c20:	f9 7f       	andi	r31, 0xF9	; 249
    2c22:	bf 2e       	mov	r11, r31
    2c24:	8f 36       	cpi	r24, 0x6F	; 111
    2c26:	c1 f0       	breq	.+48     	; 0x2c58 <vfprintf+0x250>
    2c28:	18 f4       	brcc	.+6      	; 0x2c30 <vfprintf+0x228>
    2c2a:	88 35       	cpi	r24, 0x58	; 88
    2c2c:	79 f0       	breq	.+30     	; 0x2c4c <vfprintf+0x244>
    2c2e:	b4 c0       	rjmp	.+360    	; 0x2d98 <vfprintf+0x390>
    2c30:	80 37       	cpi	r24, 0x70	; 112
    2c32:	19 f0       	breq	.+6      	; 0x2c3a <vfprintf+0x232>
    2c34:	88 37       	cpi	r24, 0x78	; 120
    2c36:	21 f0       	breq	.+8      	; 0x2c40 <vfprintf+0x238>
    2c38:	af c0       	rjmp	.+350    	; 0x2d98 <vfprintf+0x390>
    2c3a:	2f 2f       	mov	r18, r31
    2c3c:	20 61       	ori	r18, 0x10	; 16
    2c3e:	b2 2e       	mov	r11, r18
    2c40:	b4 fe       	sbrs	r11, 4
    2c42:	0d c0       	rjmp	.+26     	; 0x2c5e <vfprintf+0x256>
    2c44:	8b 2d       	mov	r24, r11
    2c46:	84 60       	ori	r24, 0x04	; 4
    2c48:	b8 2e       	mov	r11, r24
    2c4a:	09 c0       	rjmp	.+18     	; 0x2c5e <vfprintf+0x256>
    2c4c:	24 ff       	sbrs	r18, 4
    2c4e:	0a c0       	rjmp	.+20     	; 0x2c64 <vfprintf+0x25c>
    2c50:	9f 2f       	mov	r25, r31
    2c52:	96 60       	ori	r25, 0x06	; 6
    2c54:	b9 2e       	mov	r11, r25
    2c56:	06 c0       	rjmp	.+12     	; 0x2c64 <vfprintf+0x25c>
    2c58:	28 e0       	ldi	r18, 0x08	; 8
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	05 c0       	rjmp	.+10     	; 0x2c68 <vfprintf+0x260>
    2c5e:	20 e1       	ldi	r18, 0x10	; 16
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	02 c0       	rjmp	.+4      	; 0x2c68 <vfprintf+0x260>
    2c64:	20 e1       	ldi	r18, 0x10	; 16
    2c66:	32 e0       	ldi	r19, 0x02	; 2
    2c68:	f8 01       	movw	r30, r16
    2c6a:	b7 fe       	sbrs	r11, 7
    2c6c:	07 c0       	rjmp	.+14     	; 0x2c7c <vfprintf+0x274>
    2c6e:	60 81       	ld	r22, Z
    2c70:	71 81       	ldd	r23, Z+1	; 0x01
    2c72:	82 81       	ldd	r24, Z+2	; 0x02
    2c74:	93 81       	ldd	r25, Z+3	; 0x03
    2c76:	0c 5f       	subi	r16, 0xFC	; 252
    2c78:	1f 4f       	sbci	r17, 0xFF	; 255
    2c7a:	06 c0       	rjmp	.+12     	; 0x2c88 <vfprintf+0x280>
    2c7c:	60 81       	ld	r22, Z
    2c7e:	71 81       	ldd	r23, Z+1	; 0x01
    2c80:	80 e0       	ldi	r24, 0x00	; 0
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	0e 5f       	subi	r16, 0xFE	; 254
    2c86:	1f 4f       	sbci	r17, 0xFF	; 255
    2c88:	a4 01       	movw	r20, r8
    2c8a:	0e 94 34 17 	call	0x2e68	; 0x2e68 <__ultoa_invert>
    2c8e:	a8 2e       	mov	r10, r24
    2c90:	a8 18       	sub	r10, r8
    2c92:	fb 2d       	mov	r31, r11
    2c94:	ff 77       	andi	r31, 0x7F	; 127
    2c96:	bf 2e       	mov	r11, r31
    2c98:	b6 fe       	sbrs	r11, 6
    2c9a:	0b c0       	rjmp	.+22     	; 0x2cb2 <vfprintf+0x2aa>
    2c9c:	2b 2d       	mov	r18, r11
    2c9e:	2e 7f       	andi	r18, 0xFE	; 254
    2ca0:	a5 14       	cp	r10, r5
    2ca2:	50 f4       	brcc	.+20     	; 0x2cb8 <vfprintf+0x2b0>
    2ca4:	b4 fe       	sbrs	r11, 4
    2ca6:	0a c0       	rjmp	.+20     	; 0x2cbc <vfprintf+0x2b4>
    2ca8:	b2 fc       	sbrc	r11, 2
    2caa:	08 c0       	rjmp	.+16     	; 0x2cbc <vfprintf+0x2b4>
    2cac:	2b 2d       	mov	r18, r11
    2cae:	2e 7e       	andi	r18, 0xEE	; 238
    2cb0:	05 c0       	rjmp	.+10     	; 0x2cbc <vfprintf+0x2b4>
    2cb2:	7a 2c       	mov	r7, r10
    2cb4:	2b 2d       	mov	r18, r11
    2cb6:	03 c0       	rjmp	.+6      	; 0x2cbe <vfprintf+0x2b6>
    2cb8:	7a 2c       	mov	r7, r10
    2cba:	01 c0       	rjmp	.+2      	; 0x2cbe <vfprintf+0x2b6>
    2cbc:	75 2c       	mov	r7, r5
    2cbe:	24 ff       	sbrs	r18, 4
    2cc0:	0d c0       	rjmp	.+26     	; 0x2cdc <vfprintf+0x2d4>
    2cc2:	fe 01       	movw	r30, r28
    2cc4:	ea 0d       	add	r30, r10
    2cc6:	f1 1d       	adc	r31, r1
    2cc8:	80 81       	ld	r24, Z
    2cca:	80 33       	cpi	r24, 0x30	; 48
    2ccc:	11 f4       	brne	.+4      	; 0x2cd2 <vfprintf+0x2ca>
    2cce:	29 7e       	andi	r18, 0xE9	; 233
    2cd0:	09 c0       	rjmp	.+18     	; 0x2ce4 <vfprintf+0x2dc>
    2cd2:	22 ff       	sbrs	r18, 2
    2cd4:	06 c0       	rjmp	.+12     	; 0x2ce2 <vfprintf+0x2da>
    2cd6:	73 94       	inc	r7
    2cd8:	73 94       	inc	r7
    2cda:	04 c0       	rjmp	.+8      	; 0x2ce4 <vfprintf+0x2dc>
    2cdc:	82 2f       	mov	r24, r18
    2cde:	86 78       	andi	r24, 0x86	; 134
    2ce0:	09 f0       	breq	.+2      	; 0x2ce4 <vfprintf+0x2dc>
    2ce2:	73 94       	inc	r7
    2ce4:	23 fd       	sbrc	r18, 3
    2ce6:	13 c0       	rjmp	.+38     	; 0x2d0e <vfprintf+0x306>
    2ce8:	20 ff       	sbrs	r18, 0
    2cea:	06 c0       	rjmp	.+12     	; 0x2cf8 <vfprintf+0x2f0>
    2cec:	5a 2c       	mov	r5, r10
    2cee:	73 14       	cp	r7, r3
    2cf0:	18 f4       	brcc	.+6      	; 0x2cf8 <vfprintf+0x2f0>
    2cf2:	53 0c       	add	r5, r3
    2cf4:	57 18       	sub	r5, r7
    2cf6:	73 2c       	mov	r7, r3
    2cf8:	73 14       	cp	r7, r3
    2cfa:	68 f4       	brcc	.+26     	; 0x2d16 <vfprintf+0x30e>
    2cfc:	b7 01       	movw	r22, r14
    2cfe:	80 e2       	ldi	r24, 0x20	; 32
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	2c 87       	std	Y+12, r18	; 0x0c
    2d04:	0e 94 02 17 	call	0x2e04	; 0x2e04 <fputc>
    2d08:	73 94       	inc	r7
    2d0a:	2c 85       	ldd	r18, Y+12	; 0x0c
    2d0c:	f5 cf       	rjmp	.-22     	; 0x2cf8 <vfprintf+0x2f0>
    2d0e:	73 14       	cp	r7, r3
    2d10:	10 f4       	brcc	.+4      	; 0x2d16 <vfprintf+0x30e>
    2d12:	37 18       	sub	r3, r7
    2d14:	01 c0       	rjmp	.+2      	; 0x2d18 <vfprintf+0x310>
    2d16:	31 2c       	mov	r3, r1
    2d18:	24 ff       	sbrs	r18, 4
    2d1a:	12 c0       	rjmp	.+36     	; 0x2d40 <vfprintf+0x338>
    2d1c:	b7 01       	movw	r22, r14
    2d1e:	80 e3       	ldi	r24, 0x30	; 48
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	2c 87       	std	Y+12, r18	; 0x0c
    2d24:	0e 94 02 17 	call	0x2e04	; 0x2e04 <fputc>
    2d28:	2c 85       	ldd	r18, Y+12	; 0x0c
    2d2a:	22 ff       	sbrs	r18, 2
    2d2c:	17 c0       	rjmp	.+46     	; 0x2d5c <vfprintf+0x354>
    2d2e:	21 ff       	sbrs	r18, 1
    2d30:	03 c0       	rjmp	.+6      	; 0x2d38 <vfprintf+0x330>
    2d32:	88 e5       	ldi	r24, 0x58	; 88
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	02 c0       	rjmp	.+4      	; 0x2d3c <vfprintf+0x334>
    2d38:	88 e7       	ldi	r24, 0x78	; 120
    2d3a:	90 e0       	ldi	r25, 0x00	; 0
    2d3c:	b7 01       	movw	r22, r14
    2d3e:	0c c0       	rjmp	.+24     	; 0x2d58 <vfprintf+0x350>
    2d40:	82 2f       	mov	r24, r18
    2d42:	86 78       	andi	r24, 0x86	; 134
    2d44:	59 f0       	breq	.+22     	; 0x2d5c <vfprintf+0x354>
    2d46:	21 fd       	sbrc	r18, 1
    2d48:	02 c0       	rjmp	.+4      	; 0x2d4e <vfprintf+0x346>
    2d4a:	80 e2       	ldi	r24, 0x20	; 32
    2d4c:	01 c0       	rjmp	.+2      	; 0x2d50 <vfprintf+0x348>
    2d4e:	8b e2       	ldi	r24, 0x2B	; 43
    2d50:	27 fd       	sbrc	r18, 7
    2d52:	8d e2       	ldi	r24, 0x2D	; 45
    2d54:	b7 01       	movw	r22, r14
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	0e 94 02 17 	call	0x2e04	; 0x2e04 <fputc>
    2d5c:	a5 14       	cp	r10, r5
    2d5e:	38 f4       	brcc	.+14     	; 0x2d6e <vfprintf+0x366>
    2d60:	b7 01       	movw	r22, r14
    2d62:	80 e3       	ldi	r24, 0x30	; 48
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	0e 94 02 17 	call	0x2e04	; 0x2e04 <fputc>
    2d6a:	5a 94       	dec	r5
    2d6c:	f7 cf       	rjmp	.-18     	; 0x2d5c <vfprintf+0x354>
    2d6e:	aa 94       	dec	r10
    2d70:	f4 01       	movw	r30, r8
    2d72:	ea 0d       	add	r30, r10
    2d74:	f1 1d       	adc	r31, r1
    2d76:	80 81       	ld	r24, Z
    2d78:	b7 01       	movw	r22, r14
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	0e 94 02 17 	call	0x2e04	; 0x2e04 <fputc>
    2d80:	a1 10       	cpse	r10, r1
    2d82:	f5 cf       	rjmp	.-22     	; 0x2d6e <vfprintf+0x366>
    2d84:	33 20       	and	r3, r3
    2d86:	09 f4       	brne	.+2      	; 0x2d8a <vfprintf+0x382>
    2d88:	51 ce       	rjmp	.-862    	; 0x2a2c <vfprintf+0x24>
    2d8a:	b7 01       	movw	r22, r14
    2d8c:	80 e2       	ldi	r24, 0x20	; 32
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	0e 94 02 17 	call	0x2e04	; 0x2e04 <fputc>
    2d94:	3a 94       	dec	r3
    2d96:	f6 cf       	rjmp	.-20     	; 0x2d84 <vfprintf+0x37c>
    2d98:	f7 01       	movw	r30, r14
    2d9a:	86 81       	ldd	r24, Z+6	; 0x06
    2d9c:	97 81       	ldd	r25, Z+7	; 0x07
    2d9e:	02 c0       	rjmp	.+4      	; 0x2da4 <vfprintf+0x39c>
    2da0:	8f ef       	ldi	r24, 0xFF	; 255
    2da2:	9f ef       	ldi	r25, 0xFF	; 255
    2da4:	2c 96       	adiw	r28, 0x0c	; 12
    2da6:	e2 e1       	ldi	r30, 0x12	; 18
    2da8:	0c 94 d5 17 	jmp	0x2faa	; 0x2faa <__epilogue_restores__>

00002dac <__eerd_byte_m644>:
    2dac:	f9 99       	sbic	0x1f, 1	; 31
    2dae:	fe cf       	rjmp	.-4      	; 0x2dac <__eerd_byte_m644>
    2db0:	92 bd       	out	0x22, r25	; 34
    2db2:	81 bd       	out	0x21, r24	; 33
    2db4:	f8 9a       	sbi	0x1f, 0	; 31
    2db6:	99 27       	eor	r25, r25
    2db8:	80 b5       	in	r24, 0x20	; 32
    2dba:	08 95       	ret

00002dbc <__eewr_byte_m644>:
    2dbc:	26 2f       	mov	r18, r22

00002dbe <__eewr_r18_m644>:
    2dbe:	f9 99       	sbic	0x1f, 1	; 31
    2dc0:	fe cf       	rjmp	.-4      	; 0x2dbe <__eewr_r18_m644>
    2dc2:	1f ba       	out	0x1f, r1	; 31
    2dc4:	92 bd       	out	0x22, r25	; 34
    2dc6:	81 bd       	out	0x21, r24	; 33
    2dc8:	20 bd       	out	0x20, r18	; 32
    2dca:	0f b6       	in	r0, 0x3f	; 63
    2dcc:	f8 94       	cli
    2dce:	fa 9a       	sbi	0x1f, 2	; 31
    2dd0:	f9 9a       	sbi	0x1f, 1	; 31
    2dd2:	0f be       	out	0x3f, r0	; 63
    2dd4:	01 96       	adiw	r24, 0x01	; 1
    2dd6:	08 95       	ret

00002dd8 <strnlen_P>:
    2dd8:	fc 01       	movw	r30, r24
    2dda:	05 90       	lpm	r0, Z+
    2ddc:	61 50       	subi	r22, 0x01	; 1
    2dde:	70 40       	sbci	r23, 0x00	; 0
    2de0:	01 10       	cpse	r0, r1
    2de2:	d8 f7       	brcc	.-10     	; 0x2dda <strnlen_P+0x2>
    2de4:	80 95       	com	r24
    2de6:	90 95       	com	r25
    2de8:	8e 0f       	add	r24, r30
    2dea:	9f 1f       	adc	r25, r31
    2dec:	08 95       	ret

00002dee <strnlen>:
    2dee:	fc 01       	movw	r30, r24
    2df0:	61 50       	subi	r22, 0x01	; 1
    2df2:	70 40       	sbci	r23, 0x00	; 0
    2df4:	01 90       	ld	r0, Z+
    2df6:	01 10       	cpse	r0, r1
    2df8:	d8 f7       	brcc	.-10     	; 0x2df0 <strnlen+0x2>
    2dfa:	80 95       	com	r24
    2dfc:	90 95       	com	r25
    2dfe:	8e 0f       	add	r24, r30
    2e00:	9f 1f       	adc	r25, r31
    2e02:	08 95       	ret

00002e04 <fputc>:
    2e04:	0f 93       	push	r16
    2e06:	1f 93       	push	r17
    2e08:	cf 93       	push	r28
    2e0a:	df 93       	push	r29
    2e0c:	18 2f       	mov	r17, r24
    2e0e:	09 2f       	mov	r16, r25
    2e10:	eb 01       	movw	r28, r22
    2e12:	8b 81       	ldd	r24, Y+3	; 0x03
    2e14:	81 fd       	sbrc	r24, 1
    2e16:	03 c0       	rjmp	.+6      	; 0x2e1e <fputc+0x1a>
    2e18:	8f ef       	ldi	r24, 0xFF	; 255
    2e1a:	9f ef       	ldi	r25, 0xFF	; 255
    2e1c:	20 c0       	rjmp	.+64     	; 0x2e5e <fputc+0x5a>
    2e1e:	82 ff       	sbrs	r24, 2
    2e20:	10 c0       	rjmp	.+32     	; 0x2e42 <fputc+0x3e>
    2e22:	4e 81       	ldd	r20, Y+6	; 0x06
    2e24:	5f 81       	ldd	r21, Y+7	; 0x07
    2e26:	2c 81       	ldd	r18, Y+4	; 0x04
    2e28:	3d 81       	ldd	r19, Y+5	; 0x05
    2e2a:	42 17       	cp	r20, r18
    2e2c:	53 07       	cpc	r21, r19
    2e2e:	7c f4       	brge	.+30     	; 0x2e4e <fputc+0x4a>
    2e30:	e8 81       	ld	r30, Y
    2e32:	f9 81       	ldd	r31, Y+1	; 0x01
    2e34:	9f 01       	movw	r18, r30
    2e36:	2f 5f       	subi	r18, 0xFF	; 255
    2e38:	3f 4f       	sbci	r19, 0xFF	; 255
    2e3a:	39 83       	std	Y+1, r19	; 0x01
    2e3c:	28 83       	st	Y, r18
    2e3e:	10 83       	st	Z, r17
    2e40:	06 c0       	rjmp	.+12     	; 0x2e4e <fputc+0x4a>
    2e42:	e8 85       	ldd	r30, Y+8	; 0x08
    2e44:	f9 85       	ldd	r31, Y+9	; 0x09
    2e46:	81 2f       	mov	r24, r17
    2e48:	09 95       	icall
    2e4a:	89 2b       	or	r24, r25
    2e4c:	29 f7       	brne	.-54     	; 0x2e18 <fputc+0x14>
    2e4e:	2e 81       	ldd	r18, Y+6	; 0x06
    2e50:	3f 81       	ldd	r19, Y+7	; 0x07
    2e52:	2f 5f       	subi	r18, 0xFF	; 255
    2e54:	3f 4f       	sbci	r19, 0xFF	; 255
    2e56:	3f 83       	std	Y+7, r19	; 0x07
    2e58:	2e 83       	std	Y+6, r18	; 0x06
    2e5a:	81 2f       	mov	r24, r17
    2e5c:	90 2f       	mov	r25, r16
    2e5e:	df 91       	pop	r29
    2e60:	cf 91       	pop	r28
    2e62:	1f 91       	pop	r17
    2e64:	0f 91       	pop	r16
    2e66:	08 95       	ret

00002e68 <__ultoa_invert>:
    2e68:	fa 01       	movw	r30, r20
    2e6a:	aa 27       	eor	r26, r26
    2e6c:	28 30       	cpi	r18, 0x08	; 8
    2e6e:	51 f1       	breq	.+84     	; 0x2ec4 <__ultoa_invert+0x5c>
    2e70:	20 31       	cpi	r18, 0x10	; 16
    2e72:	81 f1       	breq	.+96     	; 0x2ed4 <__ultoa_invert+0x6c>
    2e74:	e8 94       	clt
    2e76:	6f 93       	push	r22
    2e78:	6e 7f       	andi	r22, 0xFE	; 254
    2e7a:	6e 5f       	subi	r22, 0xFE	; 254
    2e7c:	7f 4f       	sbci	r23, 0xFF	; 255
    2e7e:	8f 4f       	sbci	r24, 0xFF	; 255
    2e80:	9f 4f       	sbci	r25, 0xFF	; 255
    2e82:	af 4f       	sbci	r26, 0xFF	; 255
    2e84:	b1 e0       	ldi	r27, 0x01	; 1
    2e86:	3e d0       	rcall	.+124    	; 0x2f04 <__ultoa_invert+0x9c>
    2e88:	b4 e0       	ldi	r27, 0x04	; 4
    2e8a:	3c d0       	rcall	.+120    	; 0x2f04 <__ultoa_invert+0x9c>
    2e8c:	67 0f       	add	r22, r23
    2e8e:	78 1f       	adc	r23, r24
    2e90:	89 1f       	adc	r24, r25
    2e92:	9a 1f       	adc	r25, r26
    2e94:	a1 1d       	adc	r26, r1
    2e96:	68 0f       	add	r22, r24
    2e98:	79 1f       	adc	r23, r25
    2e9a:	8a 1f       	adc	r24, r26
    2e9c:	91 1d       	adc	r25, r1
    2e9e:	a1 1d       	adc	r26, r1
    2ea0:	6a 0f       	add	r22, r26
    2ea2:	71 1d       	adc	r23, r1
    2ea4:	81 1d       	adc	r24, r1
    2ea6:	91 1d       	adc	r25, r1
    2ea8:	a1 1d       	adc	r26, r1
    2eaa:	20 d0       	rcall	.+64     	; 0x2eec <__ultoa_invert+0x84>
    2eac:	09 f4       	brne	.+2      	; 0x2eb0 <__ultoa_invert+0x48>
    2eae:	68 94       	set
    2eb0:	3f 91       	pop	r19
    2eb2:	2a e0       	ldi	r18, 0x0A	; 10
    2eb4:	26 9f       	mul	r18, r22
    2eb6:	11 24       	eor	r1, r1
    2eb8:	30 19       	sub	r19, r0
    2eba:	30 5d       	subi	r19, 0xD0	; 208
    2ebc:	31 93       	st	Z+, r19
    2ebe:	de f6       	brtc	.-74     	; 0x2e76 <__ultoa_invert+0xe>
    2ec0:	cf 01       	movw	r24, r30
    2ec2:	08 95       	ret
    2ec4:	46 2f       	mov	r20, r22
    2ec6:	47 70       	andi	r20, 0x07	; 7
    2ec8:	40 5d       	subi	r20, 0xD0	; 208
    2eca:	41 93       	st	Z+, r20
    2ecc:	b3 e0       	ldi	r27, 0x03	; 3
    2ece:	0f d0       	rcall	.+30     	; 0x2eee <__ultoa_invert+0x86>
    2ed0:	c9 f7       	brne	.-14     	; 0x2ec4 <__ultoa_invert+0x5c>
    2ed2:	f6 cf       	rjmp	.-20     	; 0x2ec0 <__ultoa_invert+0x58>
    2ed4:	46 2f       	mov	r20, r22
    2ed6:	4f 70       	andi	r20, 0x0F	; 15
    2ed8:	40 5d       	subi	r20, 0xD0	; 208
    2eda:	4a 33       	cpi	r20, 0x3A	; 58
    2edc:	18 f0       	brcs	.+6      	; 0x2ee4 <__ultoa_invert+0x7c>
    2ede:	49 5d       	subi	r20, 0xD9	; 217
    2ee0:	31 fd       	sbrc	r19, 1
    2ee2:	40 52       	subi	r20, 0x20	; 32
    2ee4:	41 93       	st	Z+, r20
    2ee6:	02 d0       	rcall	.+4      	; 0x2eec <__ultoa_invert+0x84>
    2ee8:	a9 f7       	brne	.-22     	; 0x2ed4 <__ultoa_invert+0x6c>
    2eea:	ea cf       	rjmp	.-44     	; 0x2ec0 <__ultoa_invert+0x58>
    2eec:	b4 e0       	ldi	r27, 0x04	; 4
    2eee:	a6 95       	lsr	r26
    2ef0:	97 95       	ror	r25
    2ef2:	87 95       	ror	r24
    2ef4:	77 95       	ror	r23
    2ef6:	67 95       	ror	r22
    2ef8:	ba 95       	dec	r27
    2efa:	c9 f7       	brne	.-14     	; 0x2eee <__ultoa_invert+0x86>
    2efc:	00 97       	sbiw	r24, 0x00	; 0
    2efe:	61 05       	cpc	r22, r1
    2f00:	71 05       	cpc	r23, r1
    2f02:	08 95       	ret
    2f04:	9b 01       	movw	r18, r22
    2f06:	ac 01       	movw	r20, r24
    2f08:	0a 2e       	mov	r0, r26
    2f0a:	06 94       	lsr	r0
    2f0c:	57 95       	ror	r21
    2f0e:	47 95       	ror	r20
    2f10:	37 95       	ror	r19
    2f12:	27 95       	ror	r18
    2f14:	ba 95       	dec	r27
    2f16:	c9 f7       	brne	.-14     	; 0x2f0a <__ultoa_invert+0xa2>
    2f18:	62 0f       	add	r22, r18
    2f1a:	73 1f       	adc	r23, r19
    2f1c:	84 1f       	adc	r24, r20
    2f1e:	95 1f       	adc	r25, r21
    2f20:	a0 1d       	adc	r26, r0
    2f22:	08 95       	ret

00002f24 <__mulshisi3>:
    2f24:	b7 ff       	sbrs	r27, 7
    2f26:	0c 94 29 14 	jmp	0x2852	; 0x2852 <__muluhisi3>

00002f2a <__mulohisi3>:
    2f2a:	0e 94 29 14 	call	0x2852	; 0x2852 <__muluhisi3>
    2f2e:	82 1b       	sub	r24, r18
    2f30:	93 0b       	sbc	r25, r19
    2f32:	08 95       	ret

00002f34 <__divmodsi4>:
    2f34:	05 2e       	mov	r0, r21
    2f36:	97 fb       	bst	r25, 7
    2f38:	1e f4       	brtc	.+6      	; 0x2f40 <__divmodsi4+0xc>
    2f3a:	00 94       	com	r0
    2f3c:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <__negsi2>
    2f40:	57 fd       	sbrc	r21, 7
    2f42:	07 d0       	rcall	.+14     	; 0x2f52 <__divmodsi4_neg2>
    2f44:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <__udivmodsi4>
    2f48:	07 fc       	sbrc	r0, 7
    2f4a:	03 d0       	rcall	.+6      	; 0x2f52 <__divmodsi4_neg2>
    2f4c:	4e f4       	brtc	.+18     	; 0x2f60 <__divmodsi4_exit>
    2f4e:	0c 94 b1 17 	jmp	0x2f62	; 0x2f62 <__negsi2>

00002f52 <__divmodsi4_neg2>:
    2f52:	50 95       	com	r21
    2f54:	40 95       	com	r20
    2f56:	30 95       	com	r19
    2f58:	21 95       	neg	r18
    2f5a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f5c:	4f 4f       	sbci	r20, 0xFF	; 255
    2f5e:	5f 4f       	sbci	r21, 0xFF	; 255

00002f60 <__divmodsi4_exit>:
    2f60:	08 95       	ret

00002f62 <__negsi2>:
    2f62:	90 95       	com	r25
    2f64:	80 95       	com	r24
    2f66:	70 95       	com	r23
    2f68:	61 95       	neg	r22
    2f6a:	7f 4f       	sbci	r23, 0xFF	; 255
    2f6c:	8f 4f       	sbci	r24, 0xFF	; 255
    2f6e:	9f 4f       	sbci	r25, 0xFF	; 255
    2f70:	08 95       	ret

00002f72 <__prologue_saves__>:
    2f72:	2f 92       	push	r2
    2f74:	3f 92       	push	r3
    2f76:	4f 92       	push	r4
    2f78:	5f 92       	push	r5
    2f7a:	6f 92       	push	r6
    2f7c:	7f 92       	push	r7
    2f7e:	8f 92       	push	r8
    2f80:	9f 92       	push	r9
    2f82:	af 92       	push	r10
    2f84:	bf 92       	push	r11
    2f86:	cf 92       	push	r12
    2f88:	df 92       	push	r13
    2f8a:	ef 92       	push	r14
    2f8c:	ff 92       	push	r15
    2f8e:	0f 93       	push	r16
    2f90:	1f 93       	push	r17
    2f92:	cf 93       	push	r28
    2f94:	df 93       	push	r29
    2f96:	cd b7       	in	r28, 0x3d	; 61
    2f98:	de b7       	in	r29, 0x3e	; 62
    2f9a:	ca 1b       	sub	r28, r26
    2f9c:	db 0b       	sbc	r29, r27
    2f9e:	0f b6       	in	r0, 0x3f	; 63
    2fa0:	f8 94       	cli
    2fa2:	de bf       	out	0x3e, r29	; 62
    2fa4:	0f be       	out	0x3f, r0	; 63
    2fa6:	cd bf       	out	0x3d, r28	; 61
    2fa8:	09 94       	ijmp

00002faa <__epilogue_restores__>:
    2faa:	2a 88       	ldd	r2, Y+18	; 0x12
    2fac:	39 88       	ldd	r3, Y+17	; 0x11
    2fae:	48 88       	ldd	r4, Y+16	; 0x10
    2fb0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2fb2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2fb4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2fb6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2fb8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2fba:	aa 84       	ldd	r10, Y+10	; 0x0a
    2fbc:	b9 84       	ldd	r11, Y+9	; 0x09
    2fbe:	c8 84       	ldd	r12, Y+8	; 0x08
    2fc0:	df 80       	ldd	r13, Y+7	; 0x07
    2fc2:	ee 80       	ldd	r14, Y+6	; 0x06
    2fc4:	fd 80       	ldd	r15, Y+5	; 0x05
    2fc6:	0c 81       	ldd	r16, Y+4	; 0x04
    2fc8:	1b 81       	ldd	r17, Y+3	; 0x03
    2fca:	aa 81       	ldd	r26, Y+2	; 0x02
    2fcc:	b9 81       	ldd	r27, Y+1	; 0x01
    2fce:	ce 0f       	add	r28, r30
    2fd0:	d1 1d       	adc	r29, r1
    2fd2:	0f b6       	in	r0, 0x3f	; 63
    2fd4:	f8 94       	cli
    2fd6:	de bf       	out	0x3e, r29	; 62
    2fd8:	0f be       	out	0x3f, r0	; 63
    2fda:	cd bf       	out	0x3d, r28	; 61
    2fdc:	ed 01       	movw	r28, r26
    2fde:	08 95       	ret

00002fe0 <__udivmodsi4>:
    2fe0:	a1 e2       	ldi	r26, 0x21	; 33
    2fe2:	1a 2e       	mov	r1, r26
    2fe4:	aa 1b       	sub	r26, r26
    2fe6:	bb 1b       	sub	r27, r27
    2fe8:	fd 01       	movw	r30, r26
    2fea:	0d c0       	rjmp	.+26     	; 0x3006 <__udivmodsi4_ep>

00002fec <__udivmodsi4_loop>:
    2fec:	aa 1f       	adc	r26, r26
    2fee:	bb 1f       	adc	r27, r27
    2ff0:	ee 1f       	adc	r30, r30
    2ff2:	ff 1f       	adc	r31, r31
    2ff4:	a2 17       	cp	r26, r18
    2ff6:	b3 07       	cpc	r27, r19
    2ff8:	e4 07       	cpc	r30, r20
    2ffa:	f5 07       	cpc	r31, r21
    2ffc:	20 f0       	brcs	.+8      	; 0x3006 <__udivmodsi4_ep>
    2ffe:	a2 1b       	sub	r26, r18
    3000:	b3 0b       	sbc	r27, r19
    3002:	e4 0b       	sbc	r30, r20
    3004:	f5 0b       	sbc	r31, r21

00003006 <__udivmodsi4_ep>:
    3006:	66 1f       	adc	r22, r22
    3008:	77 1f       	adc	r23, r23
    300a:	88 1f       	adc	r24, r24
    300c:	99 1f       	adc	r25, r25
    300e:	1a 94       	dec	r1
    3010:	69 f7       	brne	.-38     	; 0x2fec <__udivmodsi4_loop>
    3012:	60 95       	com	r22
    3014:	70 95       	com	r23
    3016:	80 95       	com	r24
    3018:	90 95       	com	r25
    301a:	9b 01       	movw	r18, r22
    301c:	ac 01       	movw	r20, r24
    301e:	bd 01       	movw	r22, r26
    3020:	cf 01       	movw	r24, r30
    3022:	08 95       	ret

00003024 <_exit>:
    3024:	f8 94       	cli

00003026 <__stop_program>:
    3026:	ff cf       	rjmp	.-2      	; 0x3026 <__stop_program>
