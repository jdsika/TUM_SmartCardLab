
RandomAnalyze.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  000029c0  00002b00  2**8
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000029c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004b3  0080013c  0080013c  00002b3c  2**0
                  ALLOC
  3 .stab         00005f1c  00000000  00000000  00002b3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002785  00000000  00000000  00008a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000b1dd  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 d4 0b 	jmp	0x17a8	; 0x17a8 <__vector_5>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 81 0d 	jmp	0x1b02	; 0x1b02 <__vector_8>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 09 0c 	jmp	0x1812	; 0x1812 <__vector_13>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 7f 0e 	jmp	0x1cfe	; 0x1cfe <__vector_16>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000070 <skein_default_iv>:
      70:	49 b4 48 d0 60 a8 9d fc 33 d8 a7 9f 47 66 ca 2f     I.H.`...3...Gf./
      80:	0f 84 56 66 89 c3 3b b3 69 da e8 fd 20 e9 54 6a     ..Vf..;.i... .Tj

00000090 <__ctors_end>:
      90:	11 24       	eor	r1, r1
      92:	1f be       	out	0x3f, r1	; 63
      94:	cf ef       	ldi	r28, 0xFF	; 255
      96:	d0 e1       	ldi	r29, 0x10	; 16
      98:	de bf       	out	0x3e, r29	; 62
      9a:	cd bf       	out	0x3d, r28	; 61

0000009c <__do_copy_data>:
      9c:	11 e0       	ldi	r17, 0x01	; 1
      9e:	a0 e0       	ldi	r26, 0x00	; 0
      a0:	b1 e0       	ldi	r27, 0x01	; 1
      a2:	e0 ec       	ldi	r30, 0xC0	; 192
      a4:	f9 e2       	ldi	r31, 0x29	; 41
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
      a8:	05 90       	lpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ac 33       	cpi	r26, 0x3C	; 60
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
      b2:	15 e0       	ldi	r17, 0x05	; 5
      b4:	ac e3       	ldi	r26, 0x3C	; 60
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	af 3e       	cpi	r26, 0xEF	; 239
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <main>
      c6:	0c 94 de 14 	jmp	0x29bc	; 0x29bc <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <threefish_setup>:
      ce:	ef 91       	pop	r30
      d0:	ff 91       	pop	r31
      d2:	2f 92       	push	r2
      d4:	3f 92       	push	r3
      d6:	4f 92       	push	r4
      d8:	5f 92       	push	r5
      da:	6f 92       	push	r6
      dc:	7f 92       	push	r7
      de:	8f 92       	push	r8
      e0:	9f 92       	push	r9
      e2:	af 92       	push	r10
      e4:	bf 92       	push	r11
      e6:	cf 92       	push	r12
      e8:	df 92       	push	r13
      ea:	ef 92       	push	r14
      ec:	ff 92       	push	r15
      ee:	0f 93       	push	r16
      f0:	1f 93       	push	r17
      f2:	cf 93       	push	r28
      f4:	df 93       	push	r29
      f6:	df b7       	in	r29, 0x3f	; 63
      f8:	d7 fb       	bst	r29, 7
      fa:	f8 94       	cli
      fc:	ad b7       	in	r26, 0x3d	; 61
      fe:	be b7       	in	r27, 0x3e	; 62
     100:	9e bf       	out	0x3e, r25	; 62
     102:	87 e0       	ldi	r24, 0x07	; 7
     104:	8d bf       	out	0x3d, r24	; 61
     106:	bf 93       	push	r27
     108:	af 93       	push	r26
     10a:	ff 93       	push	r31
     10c:	ef 93       	push	r30
     10e:	55 96       	adiw	r26, 0x15	; 21
     110:	cd 91       	ld	r28, X+
     112:	dc 91       	ld	r29, X
     114:	68 96       	adiw	r28, 0x18	; 24
     116:	7a 90       	ld	r7, -Y
     118:	6a 90       	ld	r6, -Y
     11a:	5a 90       	ld	r5, -Y
     11c:	4a 90       	ld	r4, -Y
     11e:	3a 90       	ld	r3, -Y
     120:	2a 90       	ld	r2, -Y
     122:	1a 90       	ld	r1, -Y
     124:	0a 90       	ld	r0, -Y
     126:	fa 91       	ld	r31, -Y
     128:	ea 91       	ld	r30, -Y
     12a:	e0 93 ad 01 	sts	0x01AD, r30
     12e:	f0 93 af 01 	sts	0x01AF, r31
     132:	fe 01       	movw	r30, r28
     134:	d2 91       	ld	r29, -Z
     136:	c2 91       	ld	r28, -Z
     138:	b2 91       	ld	r27, -Z
     13a:	a2 91       	ld	r26, -Z
     13c:	92 91       	ld	r25, -Z
     13e:	82 91       	ld	r24, -Z
     140:	80 93 ae 01 	sts	0x01AE, r24
     144:	8f e3       	ldi	r24, 0x3F	; 63
     146:	8d bf       	out	0x3d, r24	; 61
     148:	7f 93       	push	r23
     14a:	6f 93       	push	r22
     14c:	5f 93       	push	r21
     14e:	4f 93       	push	r20
     150:	3f 93       	push	r19
     152:	2f 93       	push	r18
     154:	1f 93       	push	r17
     156:	0f 93       	push	r16
     158:	ff 92       	push	r15
     15a:	ef 92       	push	r14
     15c:	df 92       	push	r13
     15e:	cf 92       	push	r12
     160:	bf 92       	push	r11
     162:	af 92       	push	r10
     164:	9f 92       	push	r9
     166:	8f 92       	push	r8
     168:	08 25       	eor	r16, r8
     16a:	19 25       	eor	r17, r9
     16c:	2a 25       	eor	r18, r10
     16e:	3b 25       	eor	r19, r11
     170:	4c 25       	eor	r20, r12
     172:	5d 25       	eor	r21, r13
     174:	6e 25       	eor	r22, r14
     176:	7f 25       	eor	r23, r15
     178:	70 96       	adiw	r30, 0x10	; 16
     17a:	81 90       	ld	r8, Z+
     17c:	91 90       	ld	r9, Z+
     17e:	a1 90       	ld	r10, Z+
     180:	b1 90       	ld	r11, Z+
     182:	c1 90       	ld	r12, Z+
     184:	d1 90       	ld	r13, Z+
     186:	e1 90       	ld	r14, Z+
     188:	f1 90       	ld	r15, Z+
     18a:	87 e4       	ldi	r24, 0x47	; 71
     18c:	8d bf       	out	0x3d, r24	; 61
     18e:	7f 93       	push	r23
     190:	6f 93       	push	r22
     192:	5f 93       	push	r21
     194:	4f 93       	push	r20
     196:	3f 93       	push	r19
     198:	2f 93       	push	r18
     19a:	1f 93       	push	r17
     19c:	0f 93       	push	r16
     19e:	7b e1       	ldi	r23, 0x1B	; 27
     1a0:	61 ed       	ldi	r22, 0xD1	; 209
     1a2:	5b e1       	ldi	r21, 0x1B	; 27
     1a4:	4a ed       	ldi	r20, 0xDA	; 218
     1a6:	39 ea       	ldi	r19, 0xA9	; 169
     1a8:	2c ef       	ldi	r18, 0xFC	; 252
     1aa:	1a e1       	ldi	r17, 0x1A	; 26
     1ac:	02 e2       	ldi	r16, 0x22	; 34
     1ae:	87 e0       	ldi	r24, 0x07	; 7
     1b0:	8d bf       	out	0x3d, r24	; 61
     1b2:	8f 91       	pop	r24
     1b4:	08 27       	eor	r16, r24
     1b6:	8f 91       	pop	r24
     1b8:	18 27       	eor	r17, r24
     1ba:	8f 91       	pop	r24
     1bc:	28 27       	eor	r18, r24
     1be:	8f 91       	pop	r24
     1c0:	38 27       	eor	r19, r24
     1c2:	8f 91       	pop	r24
     1c4:	48 27       	eor	r20, r24
     1c6:	8f 91       	pop	r24
     1c8:	58 27       	eor	r21, r24
     1ca:	8f 91       	pop	r24
     1cc:	68 27       	eor	r22, r24
     1ce:	8f 91       	pop	r24
     1d0:	78 27       	eor	r23, r24
     1d2:	8f 91       	pop	r24
     1d4:	08 27       	eor	r16, r24
     1d6:	8f 91       	pop	r24
     1d8:	18 27       	eor	r17, r24
     1da:	8f 91       	pop	r24
     1dc:	28 27       	eor	r18, r24
     1de:	8f 91       	pop	r24
     1e0:	38 27       	eor	r19, r24
     1e2:	8f 91       	pop	r24
     1e4:	48 27       	eor	r20, r24
     1e6:	8f 91       	pop	r24
     1e8:	58 27       	eor	r21, r24
     1ea:	8f 91       	pop	r24
     1ec:	68 27       	eor	r22, r24
     1ee:	8f 91       	pop	r24
     1f0:	78 27       	eor	r23, r24
     1f2:	8f 91       	pop	r24
     1f4:	08 27       	eor	r16, r24
     1f6:	8f 91       	pop	r24
     1f8:	18 27       	eor	r17, r24
     1fa:	8f 91       	pop	r24
     1fc:	28 27       	eor	r18, r24
     1fe:	8f 91       	pop	r24
     200:	38 27       	eor	r19, r24
     202:	8f 91       	pop	r24
     204:	48 27       	eor	r20, r24
     206:	8f 91       	pop	r24
     208:	58 27       	eor	r21, r24
     20a:	8f 91       	pop	r24
     20c:	68 27       	eor	r22, r24
     20e:	8f 91       	pop	r24
     210:	78 27       	eor	r23, r24
     212:	8f 91       	pop	r24
     214:	08 27       	eor	r16, r24
     216:	8f 91       	pop	r24
     218:	18 27       	eor	r17, r24
     21a:	8f 91       	pop	r24
     21c:	28 27       	eor	r18, r24
     21e:	8f 91       	pop	r24
     220:	38 27       	eor	r19, r24
     222:	8f 91       	pop	r24
     224:	48 27       	eor	r20, r24
     226:	8f 91       	pop	r24
     228:	58 27       	eor	r21, r24
     22a:	8f 91       	pop	r24
     22c:	68 27       	eor	r22, r24
     22e:	8f 91       	pop	r24
     230:	78 27       	eor	r23, r24
     232:	78 97       	sbiw	r30, 0x18	; 24
     234:	8f e2       	ldi	r24, 0x2F	; 47
     236:	8d bf       	out	0x3d, r24	; 61
     238:	82 91       	ld	r24, -Z
     23a:	7f 93       	push	r23
     23c:	78 2f       	mov	r23, r24
     23e:	82 91       	ld	r24, -Z
     240:	6f 93       	push	r22
     242:	68 2f       	mov	r22, r24
     244:	82 91       	ld	r24, -Z
     246:	5f 93       	push	r21
     248:	58 2f       	mov	r21, r24
     24a:	82 91       	ld	r24, -Z
     24c:	4f 93       	push	r20
     24e:	48 2f       	mov	r20, r24
     250:	82 91       	ld	r24, -Z
     252:	3f 93       	push	r19
     254:	38 2f       	mov	r19, r24
     256:	82 91       	ld	r24, -Z
     258:	2f 93       	push	r18
     25a:	28 2f       	mov	r18, r24
     25c:	82 91       	ld	r24, -Z
     25e:	1f 93       	push	r17
     260:	18 2f       	mov	r17, r24
     262:	82 91       	ld	r24, -Z
     264:	0f 93       	push	r16
     266:	08 2f       	mov	r16, r24
     268:	e0 91 ad 01 	lds	r30, 0x01AD
     26c:	80 91 ae 01 	lds	r24, 0x01AE
     270:	f3 e0       	ldi	r31, 0x03	; 3
     272:	fd bf       	out	0x3d, r31	; 61
     274:	08 95       	ret

00000276 <threefish_finish>:
     276:	00 91 af 01 	lds	r16, 0x01AF
     27a:	e0 93 ad 01 	sts	0x01AD, r30
     27e:	f0 93 af 01 	sts	0x01AF, r31
     282:	80 93 ae 01 	sts	0x01AE, r24
     286:	f5 e0       	ldi	r31, 0x05	; 5
     288:	fd bf       	out	0x3d, r31	; 61
     28a:	ef 91       	pop	r30
     28c:	ff 91       	pop	r31
     28e:	77 96       	adiw	r30, 0x17	; 23
     290:	81 91       	ld	r24, Z+
     292:	f0 81       	ld	r31, Z
     294:	e8 2f       	mov	r30, r24
     296:	80 91 ae 01 	lds	r24, 0x01AE
     29a:	01 93       	st	Z+, r16
     29c:	11 93       	st	Z+, r17
     29e:	21 93       	st	Z+, r18
     2a0:	31 93       	st	Z+, r19
     2a2:	41 93       	st	Z+, r20
     2a4:	51 93       	st	Z+, r21
     2a6:	61 93       	st	Z+, r22
     2a8:	71 93       	st	Z+, r23
     2aa:	81 93       	st	Z+, r24
     2ac:	91 93       	st	Z+, r25
     2ae:	a1 93       	st	Z+, r26
     2b0:	b1 93       	st	Z+, r27
     2b2:	c1 93       	st	Z+, r28
     2b4:	d1 93       	st	Z+, r29
     2b6:	c0 91 ad 01 	lds	r28, 0x01AD
     2ba:	d0 91 af 01 	lds	r29, 0x01AF
     2be:	c1 93       	st	Z+, r28
     2c0:	d1 93       	st	Z+, r29
     2c2:	01 92       	st	Z+, r0
     2c4:	11 92       	st	Z+, r1
     2c6:	21 92       	st	Z+, r2
     2c8:	31 92       	st	Z+, r3
     2ca:	41 92       	st	Z+, r4
     2cc:	51 92       	st	Z+, r5
     2ce:	61 92       	st	Z+, r6
     2d0:	71 92       	st	Z+, r7
     2d2:	81 92       	st	Z+, r8
     2d4:	91 92       	st	Z+, r9
     2d6:	a1 92       	st	Z+, r10
     2d8:	b1 92       	st	Z+, r11
     2da:	c1 92       	st	Z+, r12
     2dc:	d1 92       	st	Z+, r13
     2de:	e1 92       	st	Z+, r14
     2e0:	f1 92       	st	Z+, r15
     2e2:	05 e0       	ldi	r16, 0x05	; 5
     2e4:	0d bf       	out	0x3d, r16	; 61
     2e6:	af 91       	pop	r26
     2e8:	bf 91       	pop	r27
     2ea:	ad bf       	out	0x3d, r26	; 61
     2ec:	be bf       	out	0x3e, r27	; 62
     2ee:	df 91       	pop	r29
     2f0:	cf 91       	pop	r28
     2f2:	1f 91       	pop	r17
     2f4:	0f 91       	pop	r16
     2f6:	ff 90       	pop	r15
     2f8:	ef 90       	pop	r14
     2fa:	df 90       	pop	r13
     2fc:	cf 90       	pop	r12
     2fe:	bf 90       	pop	r11
     300:	af 90       	pop	r10
     302:	9f 90       	pop	r9
     304:	8f 90       	pop	r8
     306:	7f 90       	pop	r7
     308:	6f 90       	pop	r6
     30a:	5f 90       	pop	r5
     30c:	4f 90       	pop	r4
     30e:	3f 90       	pop	r3
     310:	2f 90       	pop	r2
     312:	11 24       	eor	r1, r1
     314:	0e f4       	brtc	.+2      	; 0x318 <threefish_finish+0xa2>
     316:	78 94       	sei
     318:	08 95       	ret

0000031a <threefish_256_dec_8threefish_rounds>:
     31a:	f0 91 ae 01 	lds	r31, 0x01AE
     31e:	fd bf       	out	0x3d, r31	; 61
     320:	ff 91       	pop	r31
     322:	0f 1b       	sub	r16, r31
     324:	ff 91       	pop	r31
     326:	1f 0b       	sbc	r17, r31
     328:	ff 91       	pop	r31
     32a:	2f 0b       	sbc	r18, r31
     32c:	ff 91       	pop	r31
     32e:	3f 0b       	sbc	r19, r31
     330:	ff 91       	pop	r31
     332:	4f 0b       	sbc	r20, r31
     334:	ff 91       	pop	r31
     336:	5f 0b       	sbc	r21, r31
     338:	ff 91       	pop	r31
     33a:	6f 0b       	sbc	r22, r31
     33c:	ff 91       	pop	r31
     33e:	7f 0b       	sbc	r23, r31
     340:	f0 91 af 01 	lds	r31, 0x01AF
     344:	00 93 af 01 	sts	0x01AF, r16
     348:	0d b7       	in	r16, 0x3d	; 61
     34a:	0f 32       	cpi	r16, 0x2F	; 47
     34c:	11 f4       	brne	.+4      	; 0x352 <threefish_256_dec_8threefish_rounds+0x38>
     34e:	07 e0       	ldi	r16, 0x07	; 7
     350:	0d bf       	out	0x3d, r16	; 61
     352:	0f 91       	pop	r16
     354:	80 1b       	sub	r24, r16
     356:	0f 91       	pop	r16
     358:	90 0b       	sbc	r25, r16
     35a:	0f 91       	pop	r16
     35c:	a0 0b       	sbc	r26, r16
     35e:	0f 91       	pop	r16
     360:	b0 0b       	sbc	r27, r16
     362:	0f 91       	pop	r16
     364:	c0 0b       	sbc	r28, r16
     366:	0f 91       	pop	r16
     368:	d0 0b       	sbc	r29, r16
     36a:	0f 91       	pop	r16
     36c:	e0 0b       	sbc	r30, r16
     36e:	0f 91       	pop	r16
     370:	f0 0b       	sbc	r31, r16
     372:	0d b7       	in	r16, 0x3d	; 61
     374:	0f 32       	cpi	r16, 0x2F	; 47
     376:	11 f4       	brne	.+4      	; 0x37c <threefish_256_dec_8threefish_rounds+0x62>
     378:	07 e0       	ldi	r16, 0x07	; 7
     37a:	0d bf       	out	0x3d, r16	; 61
     37c:	0f 91       	pop	r16
     37e:	00 1a       	sub	r0, r16
     380:	0f 91       	pop	r16
     382:	10 0a       	sbc	r1, r16
     384:	0f 91       	pop	r16
     386:	20 0a       	sbc	r2, r16
     388:	0f 91       	pop	r16
     38a:	30 0a       	sbc	r3, r16
     38c:	0f 91       	pop	r16
     38e:	40 0a       	sbc	r4, r16
     390:	0f 91       	pop	r16
     392:	50 0a       	sbc	r5, r16
     394:	0f 91       	pop	r16
     396:	60 0a       	sbc	r6, r16
     398:	0f 91       	pop	r16
     39a:	70 0a       	sbc	r7, r16
     39c:	0d b7       	in	r16, 0x3d	; 61
     39e:	0f 32       	cpi	r16, 0x2F	; 47
     3a0:	11 f4       	brne	.+4      	; 0x3a6 <threefish_256_dec_8threefish_rounds+0x8c>
     3a2:	07 e0       	ldi	r16, 0x07	; 7
     3a4:	0d bf       	out	0x3d, r16	; 61
     3a6:	0f 91       	pop	r16
     3a8:	80 1a       	sub	r8, r16
     3aa:	0f 91       	pop	r16
     3ac:	90 0a       	sbc	r9, r16
     3ae:	0f 91       	pop	r16
     3b0:	a0 0a       	sbc	r10, r16
     3b2:	0f 91       	pop	r16
     3b4:	b0 0a       	sbc	r11, r16
     3b6:	0f 91       	pop	r16
     3b8:	c0 0a       	sbc	r12, r16
     3ba:	0f 91       	pop	r16
     3bc:	d0 0a       	sbc	r13, r16
     3be:	0f 91       	pop	r16
     3c0:	e0 0a       	sbc	r14, r16
     3c2:	0f 91       	pop	r16
     3c4:	f0 0a       	sbc	r15, r16
     3c6:	0d b7       	in	r16, 0x3d	; 61
     3c8:	0f 32       	cpi	r16, 0x2F	; 47
     3ca:	09 f4       	brne	.+2      	; 0x3ce <threefish_256_dec_8threefish_rounds+0xb4>
     3cc:	07 e0       	ldi	r16, 0x07	; 7
     3ce:	00 93 ae 01 	sts	0x01AE, r16
     3d2:	00 91 b0 01 	lds	r16, 0x01B0
     3d6:	0d bf       	out	0x3d, r16	; 61
     3d8:	0f 91       	pop	r16
     3da:	80 1b       	sub	r24, r16
     3dc:	0f 91       	pop	r16
     3de:	90 0b       	sbc	r25, r16
     3e0:	0f 91       	pop	r16
     3e2:	a0 0b       	sbc	r26, r16
     3e4:	0f 91       	pop	r16
     3e6:	b0 0b       	sbc	r27, r16
     3e8:	0f 91       	pop	r16
     3ea:	c0 0b       	sbc	r28, r16
     3ec:	0f 91       	pop	r16
     3ee:	d0 0b       	sbc	r29, r16
     3f0:	0f 91       	pop	r16
     3f2:	e0 0b       	sbc	r30, r16
     3f4:	0f 91       	pop	r16
     3f6:	f0 0b       	sbc	r31, r16
     3f8:	0d b7       	in	r16, 0x3d	; 61
     3fa:	07 34       	cpi	r16, 0x47	; 71
     3fc:	11 f4       	brne	.+4      	; 0x402 <threefish_256_dec_8threefish_rounds+0xe8>
     3fe:	0f e2       	ldi	r16, 0x2F	; 47
     400:	0d bf       	out	0x3d, r16	; 61
     402:	0f 91       	pop	r16
     404:	00 1a       	sub	r0, r16
     406:	0f 91       	pop	r16
     408:	10 0a       	sbc	r1, r16
     40a:	0f 91       	pop	r16
     40c:	20 0a       	sbc	r2, r16
     40e:	0f 91       	pop	r16
     410:	30 0a       	sbc	r3, r16
     412:	0f 91       	pop	r16
     414:	40 0a       	sbc	r4, r16
     416:	0f 91       	pop	r16
     418:	50 0a       	sbc	r5, r16
     41a:	0f 91       	pop	r16
     41c:	60 0a       	sbc	r6, r16
     41e:	0f 91       	pop	r16
     420:	70 0a       	sbc	r7, r16
     422:	0d b7       	in	r16, 0x3d	; 61
     424:	07 34       	cpi	r16, 0x47	; 71
     426:	09 f4       	brne	.+2      	; 0x42a <threefish_256_dec_8threefish_rounds+0x110>
     428:	0f e2       	ldi	r16, 0x2F	; 47
     42a:	00 93 b0 01 	sts	0x01B0, r16
     42e:	00 91 ad 01 	lds	r16, 0x01AD
     432:	0a 95       	dec	r16
     434:	00 93 ad 01 	sts	0x01AD, r16
     438:	80 1a       	sub	r8, r16
     43a:	00 27       	eor	r16, r16
     43c:	90 0a       	sbc	r9, r16
     43e:	a0 0a       	sbc	r10, r16
     440:	b0 0a       	sbc	r11, r16
     442:	c0 0a       	sbc	r12, r16
     444:	d0 0a       	sbc	r13, r16
     446:	e0 0a       	sbc	r14, r16
     448:	f0 0a       	sbc	r15, r16
     44a:	00 91 af 01 	lds	r16, 0x01AF
     44e:	0e f4       	brtc	.+2      	; 0x452 <threefish_256_dec_8threefish_rounds+0x138>
     450:	78 94       	sei
     452:	80 26       	eor	r8, r16
     454:	91 26       	eor	r9, r17
     456:	a2 26       	eor	r10, r18
     458:	b3 26       	eor	r11, r19
     45a:	c4 26       	eor	r12, r20
     45c:	d5 26       	eor	r13, r21
     45e:	e6 26       	eor	r14, r22
     460:	f7 26       	eor	r15, r23
     462:	0c 19       	sub	r16, r12
     464:	1d 09       	sbc	r17, r13
     466:	2e 09       	sbc	r18, r14
     468:	3f 09       	sbc	r19, r15
     46a:	48 09       	sbc	r20, r8
     46c:	59 09       	sbc	r21, r9
     46e:	6a 09       	sbc	r22, r10
     470:	7b 09       	sbc	r23, r11
     472:	80 25       	eor	r24, r0
     474:	91 25       	eor	r25, r1
     476:	a2 25       	eor	r26, r2
     478:	b3 25       	eor	r27, r3
     47a:	c4 25       	eor	r28, r4
     47c:	d5 25       	eor	r29, r5
     47e:	e6 25       	eor	r30, r6
     480:	f7 25       	eor	r31, r7
     482:	0c 1a       	sub	r0, r28
     484:	1d 0a       	sbc	r1, r29
     486:	2e 0a       	sbc	r2, r30
     488:	3f 0a       	sbc	r3, r31
     48a:	48 0a       	sbc	r4, r24
     48c:	59 0a       	sbc	r5, r25
     48e:	6a 0a       	sbc	r6, r26
     490:	7b 0a       	sbc	r7, r27
     492:	c0 27       	eor	r28, r16
     494:	d1 27       	eor	r29, r17
     496:	e2 27       	eor	r30, r18
     498:	f3 27       	eor	r31, r19
     49a:	84 27       	eor	r24, r20
     49c:	95 27       	eor	r25, r21
     49e:	a6 27       	eor	r26, r22
     4a0:	b7 27       	eor	r27, r23
     4a2:	b0 fb       	bst	r27, 0
     4a4:	a6 95       	lsr	r26
     4a6:	97 95       	ror	r25
     4a8:	87 95       	ror	r24
     4aa:	f7 95       	ror	r31
     4ac:	e7 95       	ror	r30
     4ae:	d7 95       	ror	r29
     4b0:	c7 95       	ror	r28
     4b2:	b7 95       	ror	r27
     4b4:	a7 f9       	bld	r26, 7
     4b6:	b0 fb       	bst	r27, 0
     4b8:	a6 95       	lsr	r26
     4ba:	97 95       	ror	r25
     4bc:	87 95       	ror	r24
     4be:	f7 95       	ror	r31
     4c0:	e7 95       	ror	r30
     4c2:	d7 95       	ror	r29
     4c4:	c7 95       	ror	r28
     4c6:	b7 95       	ror	r27
     4c8:	a7 f9       	bld	r26, 7
     4ca:	0b 1b       	sub	r16, r27
     4cc:	1c 0b       	sbc	r17, r28
     4ce:	2d 0b       	sbc	r18, r29
     4d0:	3e 0b       	sbc	r19, r30
     4d2:	4f 0b       	sbc	r20, r31
     4d4:	58 0b       	sbc	r21, r24
     4d6:	69 0b       	sbc	r22, r25
     4d8:	7a 0b       	sbc	r23, r26
     4da:	c0 24       	eor	r12, r0
     4dc:	d1 24       	eor	r13, r1
     4de:	e2 24       	eor	r14, r2
     4e0:	f3 24       	eor	r15, r3
     4e2:	84 24       	eor	r8, r4
     4e4:	95 24       	eor	r9, r5
     4e6:	a6 24       	eor	r10, r6
     4e8:	b7 24       	eor	r11, r7
     4ea:	e7 fa       	bst	r14, 7
     4ec:	ff 0c       	add	r15, r15
     4ee:	88 1c       	adc	r8, r8
     4f0:	99 1c       	adc	r9, r9
     4f2:	aa 1c       	adc	r10, r10
     4f4:	bb 1c       	adc	r11, r11
     4f6:	cc 1c       	adc	r12, r12
     4f8:	dd 1c       	adc	r13, r13
     4fa:	ee 1c       	adc	r14, r14
     4fc:	f0 f8       	bld	r15, 0
     4fe:	e7 fa       	bst	r14, 7
     500:	ff 0c       	add	r15, r15
     502:	88 1c       	adc	r8, r8
     504:	99 1c       	adc	r9, r9
     506:	aa 1c       	adc	r10, r10
     508:	bb 1c       	adc	r11, r11
     50a:	cc 1c       	adc	r12, r12
     50c:	dd 1c       	adc	r13, r13
     50e:	ee 1c       	adc	r14, r14
     510:	f0 f8       	bld	r15, 0
     512:	0f 18       	sub	r0, r15
     514:	18 08       	sbc	r1, r8
     516:	29 08       	sbc	r2, r9
     518:	3a 08       	sbc	r3, r10
     51a:	4b 08       	sbc	r4, r11
     51c:	5c 08       	sbc	r5, r12
     51e:	6d 08       	sbc	r6, r13
     520:	7e 08       	sbc	r7, r14
     522:	f0 26       	eor	r15, r16
     524:	81 26       	eor	r8, r17
     526:	92 26       	eor	r9, r18
     528:	a3 26       	eor	r10, r19
     52a:	b4 26       	eor	r11, r20
     52c:	c5 26       	eor	r12, r21
     52e:	d6 26       	eor	r13, r22
     530:	e7 26       	eor	r14, r23
     532:	c7 fa       	bst	r12, 7
     534:	dd 0c       	add	r13, r13
     536:	ee 1c       	adc	r14, r14
     538:	ff 1c       	adc	r15, r15
     53a:	88 1c       	adc	r8, r8
     53c:	99 1c       	adc	r9, r9
     53e:	aa 1c       	adc	r10, r10
     540:	bb 1c       	adc	r11, r11
     542:	cc 1c       	adc	r12, r12
     544:	d0 f8       	bld	r13, 0
     546:	c7 fa       	bst	r12, 7
     548:	dd 0c       	add	r13, r13
     54a:	ee 1c       	adc	r14, r14
     54c:	ff 1c       	adc	r15, r15
     54e:	88 1c       	adc	r8, r8
     550:	99 1c       	adc	r9, r9
     552:	aa 1c       	adc	r10, r10
     554:	bb 1c       	adc	r11, r11
     556:	cc 1c       	adc	r12, r12
     558:	d0 f8       	bld	r13, 0
     55a:	0d 19       	sub	r16, r13
     55c:	1e 09       	sbc	r17, r14
     55e:	2f 09       	sbc	r18, r15
     560:	38 09       	sbc	r19, r8
     562:	49 09       	sbc	r20, r9
     564:	5a 09       	sbc	r21, r10
     566:	6b 09       	sbc	r22, r11
     568:	7c 09       	sbc	r23, r12
     56a:	b0 25       	eor	r27, r0
     56c:	c1 25       	eor	r28, r1
     56e:	d2 25       	eor	r29, r2
     570:	e3 25       	eor	r30, r3
     572:	f4 25       	eor	r31, r4
     574:	85 25       	eor	r24, r5
     576:	96 25       	eor	r25, r6
     578:	a7 25       	eor	r26, r7
     57a:	c0 fb       	bst	r28, 0
     57c:	b6 95       	lsr	r27
     57e:	a7 95       	ror	r26
     580:	97 95       	ror	r25
     582:	87 95       	ror	r24
     584:	f7 95       	ror	r31
     586:	e7 95       	ror	r30
     588:	d7 95       	ror	r29
     58a:	c7 95       	ror	r28
     58c:	b7 f9       	bld	r27, 7
     58e:	c0 fb       	bst	r28, 0
     590:	b6 95       	lsr	r27
     592:	a7 95       	ror	r26
     594:	97 95       	ror	r25
     596:	87 95       	ror	r24
     598:	f7 95       	ror	r31
     59a:	e7 95       	ror	r30
     59c:	d7 95       	ror	r29
     59e:	c7 95       	ror	r28
     5a0:	b7 f9       	bld	r27, 7
     5a2:	c0 fb       	bst	r28, 0
     5a4:	b6 95       	lsr	r27
     5a6:	a7 95       	ror	r26
     5a8:	97 95       	ror	r25
     5aa:	87 95       	ror	r24
     5ac:	f7 95       	ror	r31
     5ae:	e7 95       	ror	r30
     5b0:	d7 95       	ror	r29
     5b2:	c7 95       	ror	r28
     5b4:	b7 f9       	bld	r27, 7
     5b6:	c0 fb       	bst	r28, 0
     5b8:	b6 95       	lsr	r27
     5ba:	a7 95       	ror	r26
     5bc:	97 95       	ror	r25
     5be:	87 95       	ror	r24
     5c0:	f7 95       	ror	r31
     5c2:	e7 95       	ror	r30
     5c4:	d7 95       	ror	r29
     5c6:	c7 95       	ror	r28
     5c8:	b7 f9       	bld	r27, 7
     5ca:	0c 1a       	sub	r0, r28
     5cc:	1d 0a       	sbc	r1, r29
     5ce:	2e 0a       	sbc	r2, r30
     5d0:	3f 0a       	sbc	r3, r31
     5d2:	48 0a       	sbc	r4, r24
     5d4:	59 0a       	sbc	r5, r25
     5d6:	6a 0a       	sbc	r6, r26
     5d8:	7b 0a       	sbc	r7, r27
     5da:	c0 27       	eor	r28, r16
     5dc:	d1 27       	eor	r29, r17
     5de:	e2 27       	eor	r30, r18
     5e0:	f3 27       	eor	r31, r19
     5e2:	84 27       	eor	r24, r20
     5e4:	95 27       	eor	r25, r21
     5e6:	a6 27       	eor	r26, r22
     5e8:	b7 27       	eor	r27, r23
     5ea:	f0 fb       	bst	r31, 0
     5ec:	e6 95       	lsr	r30
     5ee:	d7 95       	ror	r29
     5f0:	c7 95       	ror	r28
     5f2:	b7 95       	ror	r27
     5f4:	a7 95       	ror	r26
     5f6:	97 95       	ror	r25
     5f8:	87 95       	ror	r24
     5fa:	f7 95       	ror	r31
     5fc:	e7 f9       	bld	r30, 7
     5fe:	0f 1b       	sub	r16, r31
     600:	18 0b       	sbc	r17, r24
     602:	29 0b       	sbc	r18, r25
     604:	3a 0b       	sbc	r19, r26
     606:	4b 0b       	sbc	r20, r27
     608:	5c 0b       	sbc	r21, r28
     60a:	6d 0b       	sbc	r22, r29
     60c:	7e 0b       	sbc	r23, r30
     60e:	d0 24       	eor	r13, r0
     610:	e1 24       	eor	r14, r1
     612:	f2 24       	eor	r15, r2
     614:	83 24       	eor	r8, r3
     616:	94 24       	eor	r9, r4
     618:	a5 24       	eor	r10, r5
     61a:	b6 24       	eor	r11, r6
     61c:	c7 24       	eor	r12, r7
     61e:	90 fa       	bst	r9, 0
     620:	86 94       	lsr	r8
     622:	f7 94       	ror	r15
     624:	e7 94       	ror	r14
     626:	d7 94       	ror	r13
     628:	c7 94       	ror	r12
     62a:	b7 94       	ror	r11
     62c:	a7 94       	ror	r10
     62e:	97 94       	ror	r9
     630:	87 f8       	bld	r8, 7
     632:	09 18       	sub	r0, r9
     634:	1a 08       	sbc	r1, r10
     636:	2b 08       	sbc	r2, r11
     638:	3c 08       	sbc	r3, r12
     63a:	4d 08       	sbc	r4, r13
     63c:	5e 08       	sbc	r5, r14
     63e:	6f 08       	sbc	r6, r15
     640:	78 08       	sbc	r7, r8
     642:	f0 93 af 01 	sts	0x01AF, r31
     646:	ff b7       	in	r31, 0x3f	; 63
     648:	f7 fb       	bst	r31, 7
     64a:	f8 94       	cli
     64c:	f0 91 ae 01 	lds	r31, 0x01AE
     650:	fd bf       	out	0x3d, r31	; 61
     652:	ff 91       	pop	r31
     654:	0f 1b       	sub	r16, r31
     656:	ff 91       	pop	r31
     658:	1f 0b       	sbc	r17, r31
     65a:	ff 91       	pop	r31
     65c:	2f 0b       	sbc	r18, r31
     65e:	ff 91       	pop	r31
     660:	3f 0b       	sbc	r19, r31
     662:	ff 91       	pop	r31
     664:	4f 0b       	sbc	r20, r31
     666:	ff 91       	pop	r31
     668:	5f 0b       	sbc	r21, r31
     66a:	ff 91       	pop	r31
     66c:	6f 0b       	sbc	r22, r31
     66e:	ff 91       	pop	r31
     670:	7f 0b       	sbc	r23, r31
     672:	f0 91 af 01 	lds	r31, 0x01AF
     676:	00 93 af 01 	sts	0x01AF, r16
     67a:	0d b7       	in	r16, 0x3d	; 61
     67c:	0f 32       	cpi	r16, 0x2F	; 47
     67e:	11 f4       	brne	.+4      	; 0x684 <threefish_256_dec_8threefish_rounds+0x36a>
     680:	07 e0       	ldi	r16, 0x07	; 7
     682:	0d bf       	out	0x3d, r16	; 61
     684:	0f 91       	pop	r16
     686:	f0 1b       	sub	r31, r16
     688:	0f 91       	pop	r16
     68a:	80 0b       	sbc	r24, r16
     68c:	0f 91       	pop	r16
     68e:	90 0b       	sbc	r25, r16
     690:	0f 91       	pop	r16
     692:	a0 0b       	sbc	r26, r16
     694:	0f 91       	pop	r16
     696:	b0 0b       	sbc	r27, r16
     698:	0f 91       	pop	r16
     69a:	c0 0b       	sbc	r28, r16
     69c:	0f 91       	pop	r16
     69e:	d0 0b       	sbc	r29, r16
     6a0:	0f 91       	pop	r16
     6a2:	e0 0b       	sbc	r30, r16
     6a4:	0d b7       	in	r16, 0x3d	; 61
     6a6:	0f 32       	cpi	r16, 0x2F	; 47
     6a8:	11 f4       	brne	.+4      	; 0x6ae <threefish_256_dec_8threefish_rounds+0x394>
     6aa:	07 e0       	ldi	r16, 0x07	; 7
     6ac:	0d bf       	out	0x3d, r16	; 61
     6ae:	0f 91       	pop	r16
     6b0:	00 1a       	sub	r0, r16
     6b2:	0f 91       	pop	r16
     6b4:	10 0a       	sbc	r1, r16
     6b6:	0f 91       	pop	r16
     6b8:	20 0a       	sbc	r2, r16
     6ba:	0f 91       	pop	r16
     6bc:	30 0a       	sbc	r3, r16
     6be:	0f 91       	pop	r16
     6c0:	40 0a       	sbc	r4, r16
     6c2:	0f 91       	pop	r16
     6c4:	50 0a       	sbc	r5, r16
     6c6:	0f 91       	pop	r16
     6c8:	60 0a       	sbc	r6, r16
     6ca:	0f 91       	pop	r16
     6cc:	70 0a       	sbc	r7, r16
     6ce:	0d b7       	in	r16, 0x3d	; 61
     6d0:	0f 32       	cpi	r16, 0x2F	; 47
     6d2:	11 f4       	brne	.+4      	; 0x6d8 <threefish_256_dec_8threefish_rounds+0x3be>
     6d4:	07 e0       	ldi	r16, 0x07	; 7
     6d6:	0d bf       	out	0x3d, r16	; 61
     6d8:	0f 91       	pop	r16
     6da:	90 1a       	sub	r9, r16
     6dc:	0f 91       	pop	r16
     6de:	a0 0a       	sbc	r10, r16
     6e0:	0f 91       	pop	r16
     6e2:	b0 0a       	sbc	r11, r16
     6e4:	0f 91       	pop	r16
     6e6:	c0 0a       	sbc	r12, r16
     6e8:	0f 91       	pop	r16
     6ea:	d0 0a       	sbc	r13, r16
     6ec:	0f 91       	pop	r16
     6ee:	e0 0a       	sbc	r14, r16
     6f0:	0f 91       	pop	r16
     6f2:	f0 0a       	sbc	r15, r16
     6f4:	0f 91       	pop	r16
     6f6:	80 0a       	sbc	r8, r16
     6f8:	0d b7       	in	r16, 0x3d	; 61
     6fa:	0f 32       	cpi	r16, 0x2F	; 47
     6fc:	09 f4       	brne	.+2      	; 0x700 <threefish_256_dec_8threefish_rounds+0x3e6>
     6fe:	07 e0       	ldi	r16, 0x07	; 7
     700:	00 93 ae 01 	sts	0x01AE, r16
     704:	00 91 b0 01 	lds	r16, 0x01B0
     708:	0d bf       	out	0x3d, r16	; 61
     70a:	0f 91       	pop	r16
     70c:	f0 1b       	sub	r31, r16
     70e:	0f 91       	pop	r16
     710:	80 0b       	sbc	r24, r16
     712:	0f 91       	pop	r16
     714:	90 0b       	sbc	r25, r16
     716:	0f 91       	pop	r16
     718:	a0 0b       	sbc	r26, r16
     71a:	0f 91       	pop	r16
     71c:	b0 0b       	sbc	r27, r16
     71e:	0f 91       	pop	r16
     720:	c0 0b       	sbc	r28, r16
     722:	0f 91       	pop	r16
     724:	d0 0b       	sbc	r29, r16
     726:	0f 91       	pop	r16
     728:	e0 0b       	sbc	r30, r16
     72a:	0d b7       	in	r16, 0x3d	; 61
     72c:	07 34       	cpi	r16, 0x47	; 71
     72e:	11 f4       	brne	.+4      	; 0x734 <threefish_256_dec_8threefish_rounds+0x41a>
     730:	0f e2       	ldi	r16, 0x2F	; 47
     732:	0d bf       	out	0x3d, r16	; 61
     734:	0f 91       	pop	r16
     736:	00 1a       	sub	r0, r16
     738:	0f 91       	pop	r16
     73a:	10 0a       	sbc	r1, r16
     73c:	0f 91       	pop	r16
     73e:	20 0a       	sbc	r2, r16
     740:	0f 91       	pop	r16
     742:	30 0a       	sbc	r3, r16
     744:	0f 91       	pop	r16
     746:	40 0a       	sbc	r4, r16
     748:	0f 91       	pop	r16
     74a:	50 0a       	sbc	r5, r16
     74c:	0f 91       	pop	r16
     74e:	60 0a       	sbc	r6, r16
     750:	0f 91       	pop	r16
     752:	70 0a       	sbc	r7, r16
     754:	0d b7       	in	r16, 0x3d	; 61
     756:	07 34       	cpi	r16, 0x47	; 71
     758:	09 f4       	brne	.+2      	; 0x75c <threefish_256_dec_8threefish_rounds+0x442>
     75a:	0f e2       	ldi	r16, 0x2F	; 47
     75c:	00 93 b0 01 	sts	0x01B0, r16
     760:	00 91 ad 01 	lds	r16, 0x01AD
     764:	0a 95       	dec	r16
     766:	00 93 ad 01 	sts	0x01AD, r16
     76a:	90 1a       	sub	r9, r16
     76c:	00 27       	eor	r16, r16
     76e:	a0 0a       	sbc	r10, r16
     770:	b0 0a       	sbc	r11, r16
     772:	c0 0a       	sbc	r12, r16
     774:	d0 0a       	sbc	r13, r16
     776:	e0 0a       	sbc	r14, r16
     778:	f0 0a       	sbc	r15, r16
     77a:	80 0a       	sbc	r8, r16
     77c:	00 91 af 01 	lds	r16, 0x01AF
     780:	0e f4       	brtc	.+2      	; 0x784 <threefish_256_dec_8threefish_rounds+0x46a>
     782:	78 94       	sei
     784:	90 26       	eor	r9, r16
     786:	a1 26       	eor	r10, r17
     788:	b2 26       	eor	r11, r18
     78a:	c3 26       	eor	r12, r19
     78c:	d4 26       	eor	r13, r20
     78e:	e5 26       	eor	r14, r21
     790:	f6 26       	eor	r15, r22
     792:	87 26       	eor	r8, r23
     794:	97 fa       	bst	r9, 7
     796:	aa 0c       	add	r10, r10
     798:	bb 1c       	adc	r11, r11
     79a:	cc 1c       	adc	r12, r12
     79c:	dd 1c       	adc	r13, r13
     79e:	ee 1c       	adc	r14, r14
     7a0:	ff 1c       	adc	r15, r15
     7a2:	88 1c       	adc	r8, r8
     7a4:	99 1c       	adc	r9, r9
     7a6:	a0 f8       	bld	r10, 0
     7a8:	97 fa       	bst	r9, 7
     7aa:	aa 0c       	add	r10, r10
     7ac:	bb 1c       	adc	r11, r11
     7ae:	cc 1c       	adc	r12, r12
     7b0:	dd 1c       	adc	r13, r13
     7b2:	ee 1c       	adc	r14, r14
     7b4:	ff 1c       	adc	r15, r15
     7b6:	88 1c       	adc	r8, r8
     7b8:	99 1c       	adc	r9, r9
     7ba:	a0 f8       	bld	r10, 0
     7bc:	97 fa       	bst	r9, 7
     7be:	aa 0c       	add	r10, r10
     7c0:	bb 1c       	adc	r11, r11
     7c2:	cc 1c       	adc	r12, r12
     7c4:	dd 1c       	adc	r13, r13
     7c6:	ee 1c       	adc	r14, r14
     7c8:	ff 1c       	adc	r15, r15
     7ca:	88 1c       	adc	r8, r8
     7cc:	99 1c       	adc	r9, r9
     7ce:	a0 f8       	bld	r10, 0
     7d0:	0a 19       	sub	r16, r10
     7d2:	1b 09       	sbc	r17, r11
     7d4:	2c 09       	sbc	r18, r12
     7d6:	3d 09       	sbc	r19, r13
     7d8:	4e 09       	sbc	r20, r14
     7da:	5f 09       	sbc	r21, r15
     7dc:	68 09       	sbc	r22, r8
     7de:	79 09       	sbc	r23, r9
     7e0:	f0 25       	eor	r31, r0
     7e2:	81 25       	eor	r24, r1
     7e4:	92 25       	eor	r25, r2
     7e6:	a3 25       	eor	r26, r3
     7e8:	b4 25       	eor	r27, r4
     7ea:	c5 25       	eor	r28, r5
     7ec:	d6 25       	eor	r29, r6
     7ee:	e7 25       	eor	r30, r7
     7f0:	b7 fb       	bst	r27, 7
     7f2:	cc 0f       	add	r28, r28
     7f4:	dd 1f       	adc	r29, r29
     7f6:	ee 1f       	adc	r30, r30
     7f8:	ff 1f       	adc	r31, r31
     7fa:	88 1f       	adc	r24, r24
     7fc:	99 1f       	adc	r25, r25
     7fe:	aa 1f       	adc	r26, r26
     800:	bb 1f       	adc	r27, r27
     802:	c0 f9       	bld	r28, 0
     804:	b7 fb       	bst	r27, 7
     806:	cc 0f       	add	r28, r28
     808:	dd 1f       	adc	r29, r29
     80a:	ee 1f       	adc	r30, r30
     80c:	ff 1f       	adc	r31, r31
     80e:	88 1f       	adc	r24, r24
     810:	99 1f       	adc	r25, r25
     812:	aa 1f       	adc	r26, r26
     814:	bb 1f       	adc	r27, r27
     816:	c0 f9       	bld	r28, 0
     818:	b7 fb       	bst	r27, 7
     81a:	cc 0f       	add	r28, r28
     81c:	dd 1f       	adc	r29, r29
     81e:	ee 1f       	adc	r30, r30
     820:	ff 1f       	adc	r31, r31
     822:	88 1f       	adc	r24, r24
     824:	99 1f       	adc	r25, r25
     826:	aa 1f       	adc	r26, r26
     828:	bb 1f       	adc	r27, r27
     82a:	c0 f9       	bld	r28, 0
     82c:	0c 1a       	sub	r0, r28
     82e:	1d 0a       	sbc	r1, r29
     830:	2e 0a       	sbc	r2, r30
     832:	3f 0a       	sbc	r3, r31
     834:	48 0a       	sbc	r4, r24
     836:	59 0a       	sbc	r5, r25
     838:	6a 0a       	sbc	r6, r26
     83a:	7b 0a       	sbc	r7, r27
     83c:	c0 27       	eor	r28, r16
     83e:	d1 27       	eor	r29, r17
     840:	e2 27       	eor	r30, r18
     842:	f3 27       	eor	r31, r19
     844:	84 27       	eor	r24, r20
     846:	95 27       	eor	r25, r21
     848:	a6 27       	eor	r26, r22
     84a:	b7 27       	eor	r27, r23
     84c:	e7 fb       	bst	r30, 7
     84e:	ff 0f       	add	r31, r31
     850:	88 1f       	adc	r24, r24
     852:	99 1f       	adc	r25, r25
     854:	aa 1f       	adc	r26, r26
     856:	bb 1f       	adc	r27, r27
     858:	cc 1f       	adc	r28, r28
     85a:	dd 1f       	adc	r29, r29
     85c:	ee 1f       	adc	r30, r30
     85e:	f0 f9       	bld	r31, 0
     860:	0f 1b       	sub	r16, r31
     862:	18 0b       	sbc	r17, r24
     864:	29 0b       	sbc	r18, r25
     866:	3a 0b       	sbc	r19, r26
     868:	4b 0b       	sbc	r20, r27
     86a:	5c 0b       	sbc	r21, r28
     86c:	6d 0b       	sbc	r22, r29
     86e:	7e 0b       	sbc	r23, r30
     870:	a0 24       	eor	r10, r0
     872:	b1 24       	eor	r11, r1
     874:	c2 24       	eor	r12, r2
     876:	d3 24       	eor	r13, r3
     878:	e4 24       	eor	r14, r4
     87a:	f5 24       	eor	r15, r5
     87c:	86 24       	eor	r8, r6
     87e:	97 24       	eor	r9, r7
     880:	0f 18       	sub	r0, r15
     882:	18 08       	sbc	r1, r8
     884:	29 08       	sbc	r2, r9
     886:	3a 08       	sbc	r3, r10
     888:	4b 08       	sbc	r4, r11
     88a:	5c 08       	sbc	r5, r12
     88c:	6d 08       	sbc	r6, r13
     88e:	7e 08       	sbc	r7, r14
     890:	f0 26       	eor	r15, r16
     892:	81 26       	eor	r8, r17
     894:	92 26       	eor	r9, r18
     896:	a3 26       	eor	r10, r19
     898:	b4 26       	eor	r11, r20
     89a:	c5 26       	eor	r12, r21
     89c:	d6 26       	eor	r13, r22
     89e:	e7 26       	eor	r14, r23
     8a0:	d7 fa       	bst	r13, 7
     8a2:	ee 0c       	add	r14, r14
     8a4:	ff 1c       	adc	r15, r15
     8a6:	88 1c       	adc	r8, r8
     8a8:	99 1c       	adc	r9, r9
     8aa:	aa 1c       	adc	r10, r10
     8ac:	bb 1c       	adc	r11, r11
     8ae:	cc 1c       	adc	r12, r12
     8b0:	dd 1c       	adc	r13, r13
     8b2:	e0 f8       	bld	r14, 0
     8b4:	d7 fa       	bst	r13, 7
     8b6:	ee 0c       	add	r14, r14
     8b8:	ff 1c       	adc	r15, r15
     8ba:	88 1c       	adc	r8, r8
     8bc:	99 1c       	adc	r9, r9
     8be:	aa 1c       	adc	r10, r10
     8c0:	bb 1c       	adc	r11, r11
     8c2:	cc 1c       	adc	r12, r12
     8c4:	dd 1c       	adc	r13, r13
     8c6:	e0 f8       	bld	r14, 0
     8c8:	d7 fa       	bst	r13, 7
     8ca:	ee 0c       	add	r14, r14
     8cc:	ff 1c       	adc	r15, r15
     8ce:	88 1c       	adc	r8, r8
     8d0:	99 1c       	adc	r9, r9
     8d2:	aa 1c       	adc	r10, r10
     8d4:	bb 1c       	adc	r11, r11
     8d6:	cc 1c       	adc	r12, r12
     8d8:	dd 1c       	adc	r13, r13
     8da:	e0 f8       	bld	r14, 0
     8dc:	d7 fa       	bst	r13, 7
     8de:	ee 0c       	add	r14, r14
     8e0:	ff 1c       	adc	r15, r15
     8e2:	88 1c       	adc	r8, r8
     8e4:	99 1c       	adc	r9, r9
     8e6:	aa 1c       	adc	r10, r10
     8e8:	bb 1c       	adc	r11, r11
     8ea:	cc 1c       	adc	r12, r12
     8ec:	dd 1c       	adc	r13, r13
     8ee:	e0 f8       	bld	r14, 0
     8f0:	0e 19       	sub	r16, r14
     8f2:	1f 09       	sbc	r17, r15
     8f4:	28 09       	sbc	r18, r8
     8f6:	39 09       	sbc	r19, r9
     8f8:	4a 09       	sbc	r20, r10
     8fa:	5b 09       	sbc	r21, r11
     8fc:	6c 09       	sbc	r22, r12
     8fe:	7d 09       	sbc	r23, r13
     900:	f0 25       	eor	r31, r0
     902:	81 25       	eor	r24, r1
     904:	92 25       	eor	r25, r2
     906:	a3 25       	eor	r26, r3
     908:	b4 25       	eor	r27, r4
     90a:	c5 25       	eor	r28, r5
     90c:	d6 25       	eor	r29, r6
     90e:	e7 25       	eor	r30, r7
     910:	e0 fb       	bst	r30, 0
     912:	d6 95       	lsr	r29
     914:	c7 95       	ror	r28
     916:	b7 95       	ror	r27
     918:	a7 95       	ror	r26
     91a:	97 95       	ror	r25
     91c:	87 95       	ror	r24
     91e:	f7 95       	ror	r31
     920:	e7 95       	ror	r30
     922:	d7 f9       	bld	r29, 7
     924:	0e 1a       	sub	r0, r30
     926:	1f 0a       	sbc	r1, r31
     928:	28 0a       	sbc	r2, r24
     92a:	39 0a       	sbc	r3, r25
     92c:	4a 0a       	sbc	r4, r26
     92e:	5b 0a       	sbc	r5, r27
     930:	6c 0a       	sbc	r6, r28
     932:	7d 0a       	sbc	r7, r29
     934:	e0 27       	eor	r30, r16
     936:	f1 27       	eor	r31, r17
     938:	82 27       	eor	r24, r18
     93a:	93 27       	eor	r25, r19
     93c:	a4 27       	eor	r26, r20
     93e:	b5 27       	eor	r27, r21
     940:	c6 27       	eor	r28, r22
     942:	d7 27       	eor	r29, r23
     944:	f7 fb       	bst	r31, 7
     946:	88 0f       	add	r24, r24
     948:	99 1f       	adc	r25, r25
     94a:	aa 1f       	adc	r26, r26
     94c:	bb 1f       	adc	r27, r27
     94e:	cc 1f       	adc	r28, r28
     950:	dd 1f       	adc	r29, r29
     952:	ee 1f       	adc	r30, r30
     954:	ff 1f       	adc	r31, r31
     956:	80 f9       	bld	r24, 0
     958:	f7 fb       	bst	r31, 7
     95a:	88 0f       	add	r24, r24
     95c:	99 1f       	adc	r25, r25
     95e:	aa 1f       	adc	r26, r26
     960:	bb 1f       	adc	r27, r27
     962:	cc 1f       	adc	r28, r28
     964:	dd 1f       	adc	r29, r29
     966:	ee 1f       	adc	r30, r30
     968:	ff 1f       	adc	r31, r31
     96a:	80 f9       	bld	r24, 0
     96c:	08 1b       	sub	r16, r24
     96e:	19 0b       	sbc	r17, r25
     970:	2a 0b       	sbc	r18, r26
     972:	3b 0b       	sbc	r19, r27
     974:	4c 0b       	sbc	r20, r28
     976:	5d 0b       	sbc	r21, r29
     978:	6e 0b       	sbc	r22, r30
     97a:	7f 0b       	sbc	r23, r31
     97c:	e0 24       	eor	r14, r0
     97e:	f1 24       	eor	r15, r1
     980:	82 24       	eor	r8, r2
     982:	93 24       	eor	r9, r3
     984:	a4 24       	eor	r10, r4
     986:	b5 24       	eor	r11, r5
     988:	c6 24       	eor	r12, r6
     98a:	d7 24       	eor	r13, r7
     98c:	08 18       	sub	r0, r8
     98e:	19 08       	sbc	r1, r9
     990:	2a 08       	sbc	r2, r10
     992:	3b 08       	sbc	r3, r11
     994:	4c 08       	sbc	r4, r12
     996:	5d 08       	sbc	r5, r13
     998:	6e 08       	sbc	r6, r14
     99a:	7f 08       	sbc	r7, r15
     99c:	f0 93 af 01 	sts	0x01AF, r31
     9a0:	ff b7       	in	r31, 0x3f	; 63
     9a2:	f7 fb       	bst	r31, 7
     9a4:	f8 94       	cli
     9a6:	f3 e0       	ldi	r31, 0x03	; 3
     9a8:	fd bf       	out	0x3d, r31	; 61
     9aa:	08 95       	ret

000009ac <threefish_256_dec>:
     9ac:	0e 94 67 00 	call	0xce	; 0xce <threefish_setup>
     9b0:	f3 e1       	ldi	r31, 0x13	; 19
     9b2:	f0 93 ad 01 	sts	0x01AD, r31
     9b6:	ff e1       	ldi	r31, 0x1F	; 31
     9b8:	f0 93 ae 01 	sts	0x01AE, r31
     9bc:	ff e2       	ldi	r31, 0x2F	; 47
     9be:	f0 93 b0 01 	sts	0x01B0, r31
     9c2:	0e 94 8d 01 	call	0x31a	; 0x31a <threefish_256_dec_8threefish_rounds>
     9c6:	0e 94 8d 01 	call	0x31a	; 0x31a <threefish_256_dec_8threefish_rounds>
     9ca:	0e 94 8d 01 	call	0x31a	; 0x31a <threefish_256_dec_8threefish_rounds>
     9ce:	0e 94 8d 01 	call	0x31a	; 0x31a <threefish_256_dec_8threefish_rounds>
     9d2:	0e 94 8d 01 	call	0x31a	; 0x31a <threefish_256_dec_8threefish_rounds>
     9d6:	0e 94 8d 01 	call	0x31a	; 0x31a <threefish_256_dec_8threefish_rounds>
     9da:	0e 94 8d 01 	call	0x31a	; 0x31a <threefish_256_dec_8threefish_rounds>
     9de:	0e 94 8d 01 	call	0x31a	; 0x31a <threefish_256_dec_8threefish_rounds>
     9e2:	0e 94 8d 01 	call	0x31a	; 0x31a <threefish_256_dec_8threefish_rounds>
     9e6:	f0 91 ae 01 	lds	r31, 0x01AE
     9ea:	fd bf       	out	0x3d, r31	; 61
     9ec:	ff 91       	pop	r31
     9ee:	0f 1b       	sub	r16, r31
     9f0:	ff 91       	pop	r31
     9f2:	1f 0b       	sbc	r17, r31
     9f4:	ff 91       	pop	r31
     9f6:	2f 0b       	sbc	r18, r31
     9f8:	ff 91       	pop	r31
     9fa:	3f 0b       	sbc	r19, r31
     9fc:	ff 91       	pop	r31
     9fe:	4f 0b       	sbc	r20, r31
     a00:	ff 91       	pop	r31
     a02:	5f 0b       	sbc	r21, r31
     a04:	ff 91       	pop	r31
     a06:	6f 0b       	sbc	r22, r31
     a08:	ff 91       	pop	r31
     a0a:	7f 0b       	sbc	r23, r31
     a0c:	f0 91 af 01 	lds	r31, 0x01AF
     a10:	00 93 af 01 	sts	0x01AF, r16
     a14:	0d b7       	in	r16, 0x3d	; 61
     a16:	0f 32       	cpi	r16, 0x2F	; 47
     a18:	11 f4       	brne	.+4      	; 0xa1e <threefish_256_dec+0x72>
     a1a:	07 e0       	ldi	r16, 0x07	; 7
     a1c:	0d bf       	out	0x3d, r16	; 61
     a1e:	0f 91       	pop	r16
     a20:	80 1b       	sub	r24, r16
     a22:	0f 91       	pop	r16
     a24:	90 0b       	sbc	r25, r16
     a26:	0f 91       	pop	r16
     a28:	a0 0b       	sbc	r26, r16
     a2a:	0f 91       	pop	r16
     a2c:	b0 0b       	sbc	r27, r16
     a2e:	0f 91       	pop	r16
     a30:	c0 0b       	sbc	r28, r16
     a32:	0f 91       	pop	r16
     a34:	d0 0b       	sbc	r29, r16
     a36:	0f 91       	pop	r16
     a38:	e0 0b       	sbc	r30, r16
     a3a:	0f 91       	pop	r16
     a3c:	f0 0b       	sbc	r31, r16
     a3e:	0d b7       	in	r16, 0x3d	; 61
     a40:	0f 32       	cpi	r16, 0x2F	; 47
     a42:	11 f4       	brne	.+4      	; 0xa48 <threefish_256_dec+0x9c>
     a44:	07 e0       	ldi	r16, 0x07	; 7
     a46:	0d bf       	out	0x3d, r16	; 61
     a48:	0f 91       	pop	r16
     a4a:	00 1a       	sub	r0, r16
     a4c:	0f 91       	pop	r16
     a4e:	10 0a       	sbc	r1, r16
     a50:	0f 91       	pop	r16
     a52:	20 0a       	sbc	r2, r16
     a54:	0f 91       	pop	r16
     a56:	30 0a       	sbc	r3, r16
     a58:	0f 91       	pop	r16
     a5a:	40 0a       	sbc	r4, r16
     a5c:	0f 91       	pop	r16
     a5e:	50 0a       	sbc	r5, r16
     a60:	0f 91       	pop	r16
     a62:	60 0a       	sbc	r6, r16
     a64:	0f 91       	pop	r16
     a66:	70 0a       	sbc	r7, r16
     a68:	0d b7       	in	r16, 0x3d	; 61
     a6a:	0f 32       	cpi	r16, 0x2F	; 47
     a6c:	11 f4       	brne	.+4      	; 0xa72 <threefish_256_dec+0xc6>
     a6e:	07 e0       	ldi	r16, 0x07	; 7
     a70:	0d bf       	out	0x3d, r16	; 61
     a72:	0f 91       	pop	r16
     a74:	80 1a       	sub	r8, r16
     a76:	0f 91       	pop	r16
     a78:	90 0a       	sbc	r9, r16
     a7a:	0f 91       	pop	r16
     a7c:	a0 0a       	sbc	r10, r16
     a7e:	0f 91       	pop	r16
     a80:	b0 0a       	sbc	r11, r16
     a82:	0f 91       	pop	r16
     a84:	c0 0a       	sbc	r12, r16
     a86:	0f 91       	pop	r16
     a88:	d0 0a       	sbc	r13, r16
     a8a:	0f 91       	pop	r16
     a8c:	e0 0a       	sbc	r14, r16
     a8e:	0f 91       	pop	r16
     a90:	f0 0a       	sbc	r15, r16
     a92:	00 91 b0 01 	lds	r16, 0x01B0
     a96:	0d bf       	out	0x3d, r16	; 61
     a98:	0f 91       	pop	r16
     a9a:	80 1b       	sub	r24, r16
     a9c:	0f 91       	pop	r16
     a9e:	90 0b       	sbc	r25, r16
     aa0:	0f 91       	pop	r16
     aa2:	a0 0b       	sbc	r26, r16
     aa4:	0f 91       	pop	r16
     aa6:	b0 0b       	sbc	r27, r16
     aa8:	0f 91       	pop	r16
     aaa:	c0 0b       	sbc	r28, r16
     aac:	0f 91       	pop	r16
     aae:	d0 0b       	sbc	r29, r16
     ab0:	0f 91       	pop	r16
     ab2:	e0 0b       	sbc	r30, r16
     ab4:	0f 91       	pop	r16
     ab6:	f0 0b       	sbc	r31, r16
     ab8:	0d b7       	in	r16, 0x3d	; 61
     aba:	07 34       	cpi	r16, 0x47	; 71
     abc:	11 f4       	brne	.+4      	; 0xac2 <threefish_256_dec+0x116>
     abe:	0f e2       	ldi	r16, 0x2F	; 47
     ac0:	0d bf       	out	0x3d, r16	; 61
     ac2:	0f 91       	pop	r16
     ac4:	00 1a       	sub	r0, r16
     ac6:	0f 91       	pop	r16
     ac8:	10 0a       	sbc	r1, r16
     aca:	0f 91       	pop	r16
     acc:	20 0a       	sbc	r2, r16
     ace:	0f 91       	pop	r16
     ad0:	30 0a       	sbc	r3, r16
     ad2:	0f 91       	pop	r16
     ad4:	40 0a       	sbc	r4, r16
     ad6:	0f 91       	pop	r16
     ad8:	50 0a       	sbc	r5, r16
     ada:	0f 91       	pop	r16
     adc:	60 0a       	sbc	r6, r16
     ade:	0f 91       	pop	r16
     ae0:	70 0a       	sbc	r7, r16
     ae2:	00 91 ad 01 	lds	r16, 0x01AD
     ae6:	0a 95       	dec	r16
     ae8:	80 1a       	sub	r8, r16
     aea:	00 27       	eor	r16, r16
     aec:	90 0a       	sbc	r9, r16
     aee:	a0 0a       	sbc	r10, r16
     af0:	b0 0a       	sbc	r11, r16
     af2:	c0 0a       	sbc	r12, r16
     af4:	d0 0a       	sbc	r13, r16
     af6:	e0 0a       	sbc	r14, r16
     af8:	f0 0a       	sbc	r15, r16
     afa:	0c 94 3b 01 	jmp	0x276	; 0x276 <threefish_finish>

00000afe <threefish_256_enc_8threefish_rounds>:
     afe:	f0 91 ae 01 	lds	r31, 0x01AE
     b02:	fd bf       	out	0x3d, r31	; 61
     b04:	ff 91       	pop	r31
     b06:	0f 0f       	add	r16, r31
     b08:	ff 91       	pop	r31
     b0a:	1f 1f       	adc	r17, r31
     b0c:	ff 91       	pop	r31
     b0e:	2f 1f       	adc	r18, r31
     b10:	ff 91       	pop	r31
     b12:	3f 1f       	adc	r19, r31
     b14:	ff 91       	pop	r31
     b16:	4f 1f       	adc	r20, r31
     b18:	ff 91       	pop	r31
     b1a:	5f 1f       	adc	r21, r31
     b1c:	ff 91       	pop	r31
     b1e:	6f 1f       	adc	r22, r31
     b20:	ff 91       	pop	r31
     b22:	7f 1f       	adc	r23, r31
     b24:	f0 91 af 01 	lds	r31, 0x01AF
     b28:	00 93 af 01 	sts	0x01AF, r16
     b2c:	0d b7       	in	r16, 0x3d	; 61
     b2e:	0f 32       	cpi	r16, 0x2F	; 47
     b30:	11 f4       	brne	.+4      	; 0xb36 <threefish_256_enc_8threefish_rounds+0x38>
     b32:	07 e0       	ldi	r16, 0x07	; 7
     b34:	0d bf       	out	0x3d, r16	; 61
     b36:	00 93 ae 01 	sts	0x01AE, r16
     b3a:	0f 91       	pop	r16
     b3c:	80 0f       	add	r24, r16
     b3e:	0f 91       	pop	r16
     b40:	90 1f       	adc	r25, r16
     b42:	0f 91       	pop	r16
     b44:	a0 1f       	adc	r26, r16
     b46:	0f 91       	pop	r16
     b48:	b0 1f       	adc	r27, r16
     b4a:	0f 91       	pop	r16
     b4c:	c0 1f       	adc	r28, r16
     b4e:	0f 91       	pop	r16
     b50:	d0 1f       	adc	r29, r16
     b52:	0f 91       	pop	r16
     b54:	e0 1f       	adc	r30, r16
     b56:	0f 91       	pop	r16
     b58:	f0 1f       	adc	r31, r16
     b5a:	0d b7       	in	r16, 0x3d	; 61
     b5c:	0f 32       	cpi	r16, 0x2F	; 47
     b5e:	11 f4       	brne	.+4      	; 0xb64 <threefish_256_enc_8threefish_rounds+0x66>
     b60:	07 e0       	ldi	r16, 0x07	; 7
     b62:	0d bf       	out	0x3d, r16	; 61
     b64:	0f 91       	pop	r16
     b66:	00 0e       	add	r0, r16
     b68:	0f 91       	pop	r16
     b6a:	10 1e       	adc	r1, r16
     b6c:	0f 91       	pop	r16
     b6e:	20 1e       	adc	r2, r16
     b70:	0f 91       	pop	r16
     b72:	30 1e       	adc	r3, r16
     b74:	0f 91       	pop	r16
     b76:	40 1e       	adc	r4, r16
     b78:	0f 91       	pop	r16
     b7a:	50 1e       	adc	r5, r16
     b7c:	0f 91       	pop	r16
     b7e:	60 1e       	adc	r6, r16
     b80:	0f 91       	pop	r16
     b82:	70 1e       	adc	r7, r16
     b84:	0d b7       	in	r16, 0x3d	; 61
     b86:	0f 32       	cpi	r16, 0x2F	; 47
     b88:	11 f4       	brne	.+4      	; 0xb8e <threefish_256_enc_8threefish_rounds+0x90>
     b8a:	07 e0       	ldi	r16, 0x07	; 7
     b8c:	0d bf       	out	0x3d, r16	; 61
     b8e:	0f 91       	pop	r16
     b90:	80 0e       	add	r8, r16
     b92:	0f 91       	pop	r16
     b94:	90 1e       	adc	r9, r16
     b96:	0f 91       	pop	r16
     b98:	a0 1e       	adc	r10, r16
     b9a:	0f 91       	pop	r16
     b9c:	b0 1e       	adc	r11, r16
     b9e:	0f 91       	pop	r16
     ba0:	c0 1e       	adc	r12, r16
     ba2:	0f 91       	pop	r16
     ba4:	d0 1e       	adc	r13, r16
     ba6:	0f 91       	pop	r16
     ba8:	e0 1e       	adc	r14, r16
     baa:	0f 91       	pop	r16
     bac:	f0 1e       	adc	r15, r16
     bae:	00 91 b0 01 	lds	r16, 0x01B0
     bb2:	0d bf       	out	0x3d, r16	; 61
     bb4:	0f 91       	pop	r16
     bb6:	80 0f       	add	r24, r16
     bb8:	0f 91       	pop	r16
     bba:	90 1f       	adc	r25, r16
     bbc:	0f 91       	pop	r16
     bbe:	a0 1f       	adc	r26, r16
     bc0:	0f 91       	pop	r16
     bc2:	b0 1f       	adc	r27, r16
     bc4:	0f 91       	pop	r16
     bc6:	c0 1f       	adc	r28, r16
     bc8:	0f 91       	pop	r16
     bca:	d0 1f       	adc	r29, r16
     bcc:	0f 91       	pop	r16
     bce:	e0 1f       	adc	r30, r16
     bd0:	0f 91       	pop	r16
     bd2:	f0 1f       	adc	r31, r16
     bd4:	0d b7       	in	r16, 0x3d	; 61
     bd6:	07 34       	cpi	r16, 0x47	; 71
     bd8:	11 f4       	brne	.+4      	; 0xbde <threefish_256_enc_8threefish_rounds+0xe0>
     bda:	0f e2       	ldi	r16, 0x2F	; 47
     bdc:	0d bf       	out	0x3d, r16	; 61
     bde:	00 93 b0 01 	sts	0x01B0, r16
     be2:	0f 91       	pop	r16
     be4:	00 0e       	add	r0, r16
     be6:	0f 91       	pop	r16
     be8:	10 1e       	adc	r1, r16
     bea:	0f 91       	pop	r16
     bec:	20 1e       	adc	r2, r16
     bee:	0f 91       	pop	r16
     bf0:	30 1e       	adc	r3, r16
     bf2:	0f 91       	pop	r16
     bf4:	40 1e       	adc	r4, r16
     bf6:	0f 91       	pop	r16
     bf8:	50 1e       	adc	r5, r16
     bfa:	0f 91       	pop	r16
     bfc:	60 1e       	adc	r6, r16
     bfe:	0f 91       	pop	r16
     c00:	70 1e       	adc	r7, r16
     c02:	00 91 ad 01 	lds	r16, 0x01AD
     c06:	03 95       	inc	r16
     c08:	00 93 ad 01 	sts	0x01AD, r16
     c0c:	80 0e       	add	r8, r16
     c0e:	00 27       	eor	r16, r16
     c10:	90 1e       	adc	r9, r16
     c12:	a0 1e       	adc	r10, r16
     c14:	b0 1e       	adc	r11, r16
     c16:	c0 1e       	adc	r12, r16
     c18:	d0 1e       	adc	r13, r16
     c1a:	e0 1e       	adc	r14, r16
     c1c:	f0 1e       	adc	r15, r16
     c1e:	03 e0       	ldi	r16, 0x03	; 3
     c20:	0d bf       	out	0x3d, r16	; 61
     c22:	00 91 af 01 	lds	r16, 0x01AF
     c26:	0e f4       	brtc	.+2      	; 0xc2a <threefish_256_enc_8threefish_rounds+0x12c>
     c28:	78 94       	sei
     c2a:	08 0f       	add	r16, r24
     c2c:	19 1f       	adc	r17, r25
     c2e:	2a 1f       	adc	r18, r26
     c30:	3b 1f       	adc	r19, r27
     c32:	4c 1f       	adc	r20, r28
     c34:	5d 1f       	adc	r21, r29
     c36:	6e 1f       	adc	r22, r30
     c38:	7f 1f       	adc	r23, r31
     c3a:	e0 fb       	bst	r30, 0
     c3c:	d6 95       	lsr	r29
     c3e:	c7 95       	ror	r28
     c40:	b7 95       	ror	r27
     c42:	a7 95       	ror	r26
     c44:	97 95       	ror	r25
     c46:	87 95       	ror	r24
     c48:	f7 95       	ror	r31
     c4a:	e7 95       	ror	r30
     c4c:	d7 f9       	bld	r29, 7
     c4e:	e0 fb       	bst	r30, 0
     c50:	d6 95       	lsr	r29
     c52:	c7 95       	ror	r28
     c54:	b7 95       	ror	r27
     c56:	a7 95       	ror	r26
     c58:	97 95       	ror	r25
     c5a:	87 95       	ror	r24
     c5c:	f7 95       	ror	r31
     c5e:	e7 95       	ror	r30
     c60:	d7 f9       	bld	r29, 7
     c62:	e0 27       	eor	r30, r16
     c64:	f1 27       	eor	r31, r17
     c66:	82 27       	eor	r24, r18
     c68:	93 27       	eor	r25, r19
     c6a:	a4 27       	eor	r26, r20
     c6c:	b5 27       	eor	r27, r21
     c6e:	c6 27       	eor	r28, r22
     c70:	d7 27       	eor	r29, r23
     c72:	08 0c       	add	r0, r8
     c74:	19 1c       	adc	r1, r9
     c76:	2a 1c       	adc	r2, r10
     c78:	3b 1c       	adc	r3, r11
     c7a:	4c 1c       	adc	r4, r12
     c7c:	5d 1c       	adc	r5, r13
     c7e:	6e 1c       	adc	r6, r14
     c80:	7f 1c       	adc	r7, r15
     c82:	e0 24       	eor	r14, r0
     c84:	f1 24       	eor	r15, r1
     c86:	82 24       	eor	r8, r2
     c88:	93 24       	eor	r9, r3
     c8a:	a4 24       	eor	r10, r4
     c8c:	b5 24       	eor	r11, r5
     c8e:	c6 24       	eor	r12, r6
     c90:	d7 24       	eor	r13, r7
     c92:	0e 0d       	add	r16, r14
     c94:	1f 1d       	adc	r17, r15
     c96:	28 1d       	adc	r18, r8
     c98:	39 1d       	adc	r19, r9
     c9a:	4a 1d       	adc	r20, r10
     c9c:	5b 1d       	adc	r21, r11
     c9e:	6c 1d       	adc	r22, r12
     ca0:	7d 1d       	adc	r23, r13
     ca2:	f0 fa       	bst	r15, 0
     ca4:	e6 94       	lsr	r14
     ca6:	d7 94       	ror	r13
     ca8:	c7 94       	ror	r12
     caa:	b7 94       	ror	r11
     cac:	a7 94       	ror	r10
     cae:	97 94       	ror	r9
     cb0:	87 94       	ror	r8
     cb2:	f7 94       	ror	r15
     cb4:	e7 f8       	bld	r14, 7
     cb6:	f0 fa       	bst	r15, 0
     cb8:	e6 94       	lsr	r14
     cba:	d7 94       	ror	r13
     cbc:	c7 94       	ror	r12
     cbe:	b7 94       	ror	r11
     cc0:	a7 94       	ror	r10
     cc2:	97 94       	ror	r9
     cc4:	87 94       	ror	r8
     cc6:	f7 94       	ror	r15
     cc8:	e7 f8       	bld	r14, 7
     cca:	f0 fa       	bst	r15, 0
     ccc:	e6 94       	lsr	r14
     cce:	d7 94       	ror	r13
     cd0:	c7 94       	ror	r12
     cd2:	b7 94       	ror	r11
     cd4:	a7 94       	ror	r10
     cd6:	97 94       	ror	r9
     cd8:	87 94       	ror	r8
     cda:	f7 94       	ror	r15
     cdc:	e7 f8       	bld	r14, 7
     cde:	f0 fa       	bst	r15, 0
     ce0:	e6 94       	lsr	r14
     ce2:	d7 94       	ror	r13
     ce4:	c7 94       	ror	r12
     ce6:	b7 94       	ror	r11
     ce8:	a7 94       	ror	r10
     cea:	97 94       	ror	r9
     cec:	87 94       	ror	r8
     cee:	f7 94       	ror	r15
     cf0:	e7 f8       	bld	r14, 7
     cf2:	f0 26       	eor	r15, r16
     cf4:	81 26       	eor	r8, r17
     cf6:	92 26       	eor	r9, r18
     cf8:	a3 26       	eor	r10, r19
     cfa:	b4 26       	eor	r11, r20
     cfc:	c5 26       	eor	r12, r21
     cfe:	d6 26       	eor	r13, r22
     d00:	e7 26       	eor	r14, r23
     d02:	0e 0e       	add	r0, r30
     d04:	1f 1e       	adc	r1, r31
     d06:	28 1e       	adc	r2, r24
     d08:	39 1e       	adc	r3, r25
     d0a:	4a 1e       	adc	r4, r26
     d0c:	5b 1e       	adc	r5, r27
     d0e:	6c 1e       	adc	r6, r28
     d10:	7d 1e       	adc	r7, r29
     d12:	e7 fb       	bst	r30, 7
     d14:	ff 0f       	add	r31, r31
     d16:	88 1f       	adc	r24, r24
     d18:	99 1f       	adc	r25, r25
     d1a:	aa 1f       	adc	r26, r26
     d1c:	bb 1f       	adc	r27, r27
     d1e:	cc 1f       	adc	r28, r28
     d20:	dd 1f       	adc	r29, r29
     d22:	ee 1f       	adc	r30, r30
     d24:	f0 f9       	bld	r31, 0
     d26:	f0 25       	eor	r31, r0
     d28:	81 25       	eor	r24, r1
     d2a:	92 25       	eor	r25, r2
     d2c:	a3 25       	eor	r26, r3
     d2e:	b4 25       	eor	r27, r4
     d30:	c5 25       	eor	r28, r5
     d32:	d6 25       	eor	r29, r6
     d34:	e7 25       	eor	r30, r7
     d36:	0f 0f       	add	r16, r31
     d38:	18 1f       	adc	r17, r24
     d3a:	29 1f       	adc	r18, r25
     d3c:	3a 1f       	adc	r19, r26
     d3e:	4b 1f       	adc	r20, r27
     d40:	5c 1f       	adc	r21, r28
     d42:	6d 1f       	adc	r22, r29
     d44:	7e 1f       	adc	r23, r30
     d46:	c0 fb       	bst	r28, 0
     d48:	b6 95       	lsr	r27
     d4a:	a7 95       	ror	r26
     d4c:	97 95       	ror	r25
     d4e:	87 95       	ror	r24
     d50:	f7 95       	ror	r31
     d52:	e7 95       	ror	r30
     d54:	d7 95       	ror	r29
     d56:	c7 95       	ror	r28
     d58:	b7 f9       	bld	r27, 7
     d5a:	c0 27       	eor	r28, r16
     d5c:	d1 27       	eor	r29, r17
     d5e:	e2 27       	eor	r30, r18
     d60:	f3 27       	eor	r31, r19
     d62:	84 27       	eor	r24, r20
     d64:	95 27       	eor	r25, r21
     d66:	a6 27       	eor	r26, r22
     d68:	b7 27       	eor	r27, r23
     d6a:	0f 0c       	add	r0, r15
     d6c:	18 1c       	adc	r1, r8
     d6e:	29 1c       	adc	r2, r9
     d70:	3a 1c       	adc	r3, r10
     d72:	4b 1c       	adc	r4, r11
     d74:	5c 1c       	adc	r5, r12
     d76:	6d 1c       	adc	r6, r13
     d78:	7e 1c       	adc	r7, r14
     d7a:	a0 24       	eor	r10, r0
     d7c:	b1 24       	eor	r11, r1
     d7e:	c2 24       	eor	r12, r2
     d80:	d3 24       	eor	r13, r3
     d82:	e4 24       	eor	r14, r4
     d84:	f5 24       	eor	r15, r5
     d86:	86 24       	eor	r8, r6
     d88:	97 24       	eor	r9, r7
     d8a:	0a 0d       	add	r16, r10
     d8c:	1b 1d       	adc	r17, r11
     d8e:	2c 1d       	adc	r18, r12
     d90:	3d 1d       	adc	r19, r13
     d92:	4e 1d       	adc	r20, r14
     d94:	5f 1d       	adc	r21, r15
     d96:	68 1d       	adc	r22, r8
     d98:	79 1d       	adc	r23, r9
     d9a:	90 fa       	bst	r9, 0
     d9c:	86 94       	lsr	r8
     d9e:	f7 94       	ror	r15
     da0:	e7 94       	ror	r14
     da2:	d7 94       	ror	r13
     da4:	c7 94       	ror	r12
     da6:	b7 94       	ror	r11
     da8:	a7 94       	ror	r10
     daa:	97 94       	ror	r9
     dac:	87 f8       	bld	r8, 7
     dae:	90 fa       	bst	r9, 0
     db0:	86 94       	lsr	r8
     db2:	f7 94       	ror	r15
     db4:	e7 94       	ror	r14
     db6:	d7 94       	ror	r13
     db8:	c7 94       	ror	r12
     dba:	b7 94       	ror	r11
     dbc:	a7 94       	ror	r10
     dbe:	97 94       	ror	r9
     dc0:	87 f8       	bld	r8, 7
     dc2:	90 fa       	bst	r9, 0
     dc4:	86 94       	lsr	r8
     dc6:	f7 94       	ror	r15
     dc8:	e7 94       	ror	r14
     dca:	d7 94       	ror	r13
     dcc:	c7 94       	ror	r12
     dce:	b7 94       	ror	r11
     dd0:	a7 94       	ror	r10
     dd2:	97 94       	ror	r9
     dd4:	87 f8       	bld	r8, 7
     dd6:	90 26       	eor	r9, r16
     dd8:	a1 26       	eor	r10, r17
     dda:	b2 26       	eor	r11, r18
     ddc:	c3 26       	eor	r12, r19
     dde:	d4 26       	eor	r13, r20
     de0:	e5 26       	eor	r14, r21
     de2:	f6 26       	eor	r15, r22
     de4:	87 26       	eor	r8, r23
     de6:	0c 0e       	add	r0, r28
     de8:	1d 1e       	adc	r1, r29
     dea:	2e 1e       	adc	r2, r30
     dec:	3f 1e       	adc	r3, r31
     dee:	48 1e       	adc	r4, r24
     df0:	59 1e       	adc	r5, r25
     df2:	6a 1e       	adc	r6, r26
     df4:	7b 1e       	adc	r7, r27
     df6:	f0 fb       	bst	r31, 0
     df8:	e6 95       	lsr	r30
     dfa:	d7 95       	ror	r29
     dfc:	c7 95       	ror	r28
     dfe:	b7 95       	ror	r27
     e00:	a7 95       	ror	r26
     e02:	97 95       	ror	r25
     e04:	87 95       	ror	r24
     e06:	f7 95       	ror	r31
     e08:	e7 f9       	bld	r30, 7
     e0a:	f0 fb       	bst	r31, 0
     e0c:	e6 95       	lsr	r30
     e0e:	d7 95       	ror	r29
     e10:	c7 95       	ror	r28
     e12:	b7 95       	ror	r27
     e14:	a7 95       	ror	r26
     e16:	97 95       	ror	r25
     e18:	87 95       	ror	r24
     e1a:	f7 95       	ror	r31
     e1c:	e7 f9       	bld	r30, 7
     e1e:	f0 fb       	bst	r31, 0
     e20:	e6 95       	lsr	r30
     e22:	d7 95       	ror	r29
     e24:	c7 95       	ror	r28
     e26:	b7 95       	ror	r27
     e28:	a7 95       	ror	r26
     e2a:	97 95       	ror	r25
     e2c:	87 95       	ror	r24
     e2e:	f7 95       	ror	r31
     e30:	e7 f9       	bld	r30, 7
     e32:	f0 25       	eor	r31, r0
     e34:	81 25       	eor	r24, r1
     e36:	92 25       	eor	r25, r2
     e38:	a3 25       	eor	r26, r3
     e3a:	b4 25       	eor	r27, r4
     e3c:	c5 25       	eor	r28, r5
     e3e:	d6 25       	eor	r29, r6
     e40:	e7 25       	eor	r30, r7
     e42:	f0 93 af 01 	sts	0x01AF, r31
     e46:	ff b7       	in	r31, 0x3f	; 63
     e48:	f7 fb       	bst	r31, 7
     e4a:	f8 94       	cli
     e4c:	f0 91 ae 01 	lds	r31, 0x01AE
     e50:	fd bf       	out	0x3d, r31	; 61
     e52:	ff 91       	pop	r31
     e54:	0f 0f       	add	r16, r31
     e56:	ff 91       	pop	r31
     e58:	1f 1f       	adc	r17, r31
     e5a:	ff 91       	pop	r31
     e5c:	2f 1f       	adc	r18, r31
     e5e:	ff 91       	pop	r31
     e60:	3f 1f       	adc	r19, r31
     e62:	ff 91       	pop	r31
     e64:	4f 1f       	adc	r20, r31
     e66:	ff 91       	pop	r31
     e68:	5f 1f       	adc	r21, r31
     e6a:	ff 91       	pop	r31
     e6c:	6f 1f       	adc	r22, r31
     e6e:	ff 91       	pop	r31
     e70:	7f 1f       	adc	r23, r31
     e72:	f0 91 af 01 	lds	r31, 0x01AF
     e76:	00 93 af 01 	sts	0x01AF, r16
     e7a:	0d b7       	in	r16, 0x3d	; 61
     e7c:	0f 32       	cpi	r16, 0x2F	; 47
     e7e:	11 f4       	brne	.+4      	; 0xe84 <threefish_256_enc_8threefish_rounds+0x386>
     e80:	07 e0       	ldi	r16, 0x07	; 7
     e82:	0d bf       	out	0x3d, r16	; 61
     e84:	00 93 ae 01 	sts	0x01AE, r16
     e88:	0f 91       	pop	r16
     e8a:	f0 0f       	add	r31, r16
     e8c:	0f 91       	pop	r16
     e8e:	80 1f       	adc	r24, r16
     e90:	0f 91       	pop	r16
     e92:	90 1f       	adc	r25, r16
     e94:	0f 91       	pop	r16
     e96:	a0 1f       	adc	r26, r16
     e98:	0f 91       	pop	r16
     e9a:	b0 1f       	adc	r27, r16
     e9c:	0f 91       	pop	r16
     e9e:	c0 1f       	adc	r28, r16
     ea0:	0f 91       	pop	r16
     ea2:	d0 1f       	adc	r29, r16
     ea4:	0f 91       	pop	r16
     ea6:	e0 1f       	adc	r30, r16
     ea8:	0d b7       	in	r16, 0x3d	; 61
     eaa:	0f 32       	cpi	r16, 0x2F	; 47
     eac:	11 f4       	brne	.+4      	; 0xeb2 <threefish_256_enc_8threefish_rounds+0x3b4>
     eae:	07 e0       	ldi	r16, 0x07	; 7
     eb0:	0d bf       	out	0x3d, r16	; 61
     eb2:	0f 91       	pop	r16
     eb4:	00 0e       	add	r0, r16
     eb6:	0f 91       	pop	r16
     eb8:	10 1e       	adc	r1, r16
     eba:	0f 91       	pop	r16
     ebc:	20 1e       	adc	r2, r16
     ebe:	0f 91       	pop	r16
     ec0:	30 1e       	adc	r3, r16
     ec2:	0f 91       	pop	r16
     ec4:	40 1e       	adc	r4, r16
     ec6:	0f 91       	pop	r16
     ec8:	50 1e       	adc	r5, r16
     eca:	0f 91       	pop	r16
     ecc:	60 1e       	adc	r6, r16
     ece:	0f 91       	pop	r16
     ed0:	70 1e       	adc	r7, r16
     ed2:	0d b7       	in	r16, 0x3d	; 61
     ed4:	0f 32       	cpi	r16, 0x2F	; 47
     ed6:	11 f4       	brne	.+4      	; 0xedc <threefish_256_enc_8threefish_rounds+0x3de>
     ed8:	07 e0       	ldi	r16, 0x07	; 7
     eda:	0d bf       	out	0x3d, r16	; 61
     edc:	0f 91       	pop	r16
     ede:	90 0e       	add	r9, r16
     ee0:	0f 91       	pop	r16
     ee2:	a0 1e       	adc	r10, r16
     ee4:	0f 91       	pop	r16
     ee6:	b0 1e       	adc	r11, r16
     ee8:	0f 91       	pop	r16
     eea:	c0 1e       	adc	r12, r16
     eec:	0f 91       	pop	r16
     eee:	d0 1e       	adc	r13, r16
     ef0:	0f 91       	pop	r16
     ef2:	e0 1e       	adc	r14, r16
     ef4:	0f 91       	pop	r16
     ef6:	f0 1e       	adc	r15, r16
     ef8:	0f 91       	pop	r16
     efa:	80 1e       	adc	r8, r16
     efc:	00 91 b0 01 	lds	r16, 0x01B0
     f00:	0d bf       	out	0x3d, r16	; 61
     f02:	0f 91       	pop	r16
     f04:	f0 0f       	add	r31, r16
     f06:	0f 91       	pop	r16
     f08:	80 1f       	adc	r24, r16
     f0a:	0f 91       	pop	r16
     f0c:	90 1f       	adc	r25, r16
     f0e:	0f 91       	pop	r16
     f10:	a0 1f       	adc	r26, r16
     f12:	0f 91       	pop	r16
     f14:	b0 1f       	adc	r27, r16
     f16:	0f 91       	pop	r16
     f18:	c0 1f       	adc	r28, r16
     f1a:	0f 91       	pop	r16
     f1c:	d0 1f       	adc	r29, r16
     f1e:	0f 91       	pop	r16
     f20:	e0 1f       	adc	r30, r16
     f22:	0d b7       	in	r16, 0x3d	; 61
     f24:	07 34       	cpi	r16, 0x47	; 71
     f26:	11 f4       	brne	.+4      	; 0xf2c <threefish_256_enc_8threefish_rounds+0x42e>
     f28:	0f e2       	ldi	r16, 0x2F	; 47
     f2a:	0d bf       	out	0x3d, r16	; 61
     f2c:	00 93 b0 01 	sts	0x01B0, r16
     f30:	0f 91       	pop	r16
     f32:	00 0e       	add	r0, r16
     f34:	0f 91       	pop	r16
     f36:	10 1e       	adc	r1, r16
     f38:	0f 91       	pop	r16
     f3a:	20 1e       	adc	r2, r16
     f3c:	0f 91       	pop	r16
     f3e:	30 1e       	adc	r3, r16
     f40:	0f 91       	pop	r16
     f42:	40 1e       	adc	r4, r16
     f44:	0f 91       	pop	r16
     f46:	50 1e       	adc	r5, r16
     f48:	0f 91       	pop	r16
     f4a:	60 1e       	adc	r6, r16
     f4c:	0f 91       	pop	r16
     f4e:	70 1e       	adc	r7, r16
     f50:	00 91 ad 01 	lds	r16, 0x01AD
     f54:	03 95       	inc	r16
     f56:	00 93 ad 01 	sts	0x01AD, r16
     f5a:	90 0e       	add	r9, r16
     f5c:	00 27       	eor	r16, r16
     f5e:	a0 1e       	adc	r10, r16
     f60:	b0 1e       	adc	r11, r16
     f62:	c0 1e       	adc	r12, r16
     f64:	d0 1e       	adc	r13, r16
     f66:	e0 1e       	adc	r14, r16
     f68:	f0 1e       	adc	r15, r16
     f6a:	80 1e       	adc	r8, r16
     f6c:	03 e0       	ldi	r16, 0x03	; 3
     f6e:	0d bf       	out	0x3d, r16	; 61
     f70:	00 91 af 01 	lds	r16, 0x01AF
     f74:	0e f4       	brtc	.+2      	; 0xf78 <threefish_256_enc_8threefish_rounds+0x47a>
     f76:	78 94       	sei
     f78:	0f 0f       	add	r16, r31
     f7a:	18 1f       	adc	r17, r24
     f7c:	29 1f       	adc	r18, r25
     f7e:	3a 1f       	adc	r19, r26
     f80:	4b 1f       	adc	r20, r27
     f82:	5c 1f       	adc	r21, r28
     f84:	6d 1f       	adc	r22, r29
     f86:	7e 1f       	adc	r23, r30
     f88:	b7 fb       	bst	r27, 7
     f8a:	cc 0f       	add	r28, r28
     f8c:	dd 1f       	adc	r29, r29
     f8e:	ee 1f       	adc	r30, r30
     f90:	ff 1f       	adc	r31, r31
     f92:	88 1f       	adc	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	aa 1f       	adc	r26, r26
     f98:	bb 1f       	adc	r27, r27
     f9a:	c0 f9       	bld	r28, 0
     f9c:	c0 27       	eor	r28, r16
     f9e:	d1 27       	eor	r29, r17
     fa0:	e2 27       	eor	r30, r18
     fa2:	f3 27       	eor	r31, r19
     fa4:	84 27       	eor	r24, r20
     fa6:	95 27       	eor	r25, r21
     fa8:	a6 27       	eor	r26, r22
     faa:	b7 27       	eor	r27, r23
     fac:	09 0c       	add	r0, r9
     fae:	1a 1c       	adc	r1, r10
     fb0:	2b 1c       	adc	r2, r11
     fb2:	3c 1c       	adc	r3, r12
     fb4:	4d 1c       	adc	r4, r13
     fb6:	5e 1c       	adc	r5, r14
     fb8:	6f 1c       	adc	r6, r15
     fba:	78 1c       	adc	r7, r8
     fbc:	c7 fa       	bst	r12, 7
     fbe:	dd 0c       	add	r13, r13
     fc0:	ee 1c       	adc	r14, r14
     fc2:	ff 1c       	adc	r15, r15
     fc4:	88 1c       	adc	r8, r8
     fc6:	99 1c       	adc	r9, r9
     fc8:	aa 1c       	adc	r10, r10
     fca:	bb 1c       	adc	r11, r11
     fcc:	cc 1c       	adc	r12, r12
     fce:	d0 f8       	bld	r13, 0
     fd0:	d0 24       	eor	r13, r0
     fd2:	e1 24       	eor	r14, r1
     fd4:	f2 24       	eor	r15, r2
     fd6:	83 24       	eor	r8, r3
     fd8:	94 24       	eor	r9, r4
     fda:	a5 24       	eor	r10, r5
     fdc:	b6 24       	eor	r11, r6
     fde:	c7 24       	eor	r12, r7
     fe0:	0d 0d       	add	r16, r13
     fe2:	1e 1d       	adc	r17, r14
     fe4:	2f 1d       	adc	r18, r15
     fe6:	38 1d       	adc	r19, r8
     fe8:	49 1d       	adc	r20, r9
     fea:	5a 1d       	adc	r21, r10
     fec:	6b 1d       	adc	r22, r11
     fee:	7c 1d       	adc	r23, r12
     ff0:	f0 fa       	bst	r15, 0
     ff2:	e6 94       	lsr	r14
     ff4:	d7 94       	ror	r13
     ff6:	c7 94       	ror	r12
     ff8:	b7 94       	ror	r11
     ffa:	a7 94       	ror	r10
     ffc:	97 94       	ror	r9
     ffe:	87 94       	ror	r8
    1000:	f7 94       	ror	r15
    1002:	e7 f8       	bld	r14, 7
    1004:	f0 fa       	bst	r15, 0
    1006:	e6 94       	lsr	r14
    1008:	d7 94       	ror	r13
    100a:	c7 94       	ror	r12
    100c:	b7 94       	ror	r11
    100e:	a7 94       	ror	r10
    1010:	97 94       	ror	r9
    1012:	87 94       	ror	r8
    1014:	f7 94       	ror	r15
    1016:	e7 f8       	bld	r14, 7
    1018:	f0 26       	eor	r15, r16
    101a:	81 26       	eor	r8, r17
    101c:	92 26       	eor	r9, r18
    101e:	a3 26       	eor	r10, r19
    1020:	b4 26       	eor	r11, r20
    1022:	c5 26       	eor	r12, r21
    1024:	d6 26       	eor	r13, r22
    1026:	e7 26       	eor	r14, r23
    1028:	0c 0e       	add	r0, r28
    102a:	1d 1e       	adc	r1, r29
    102c:	2e 1e       	adc	r2, r30
    102e:	3f 1e       	adc	r3, r31
    1030:	48 1e       	adc	r4, r24
    1032:	59 1e       	adc	r5, r25
    1034:	6a 1e       	adc	r6, r26
    1036:	7b 1e       	adc	r7, r27
    1038:	a7 fb       	bst	r26, 7
    103a:	bb 0f       	add	r27, r27
    103c:	cc 1f       	adc	r28, r28
    103e:	dd 1f       	adc	r29, r29
    1040:	ee 1f       	adc	r30, r30
    1042:	ff 1f       	adc	r31, r31
    1044:	88 1f       	adc	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	aa 1f       	adc	r26, r26
    104a:	b0 f9       	bld	r27, 0
    104c:	a7 fb       	bst	r26, 7
    104e:	bb 0f       	add	r27, r27
    1050:	cc 1f       	adc	r28, r28
    1052:	dd 1f       	adc	r29, r29
    1054:	ee 1f       	adc	r30, r30
    1056:	ff 1f       	adc	r31, r31
    1058:	88 1f       	adc	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	aa 1f       	adc	r26, r26
    105e:	b0 f9       	bld	r27, 0
    1060:	a7 fb       	bst	r26, 7
    1062:	bb 0f       	add	r27, r27
    1064:	cc 1f       	adc	r28, r28
    1066:	dd 1f       	adc	r29, r29
    1068:	ee 1f       	adc	r30, r30
    106a:	ff 1f       	adc	r31, r31
    106c:	88 1f       	adc	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	aa 1f       	adc	r26, r26
    1072:	b0 f9       	bld	r27, 0
    1074:	a7 fb       	bst	r26, 7
    1076:	bb 0f       	add	r27, r27
    1078:	cc 1f       	adc	r28, r28
    107a:	dd 1f       	adc	r29, r29
    107c:	ee 1f       	adc	r30, r30
    107e:	ff 1f       	adc	r31, r31
    1080:	88 1f       	adc	r24, r24
    1082:	99 1f       	adc	r25, r25
    1084:	aa 1f       	adc	r26, r26
    1086:	b0 f9       	bld	r27, 0
    1088:	b0 25       	eor	r27, r0
    108a:	c1 25       	eor	r28, r1
    108c:	d2 25       	eor	r29, r2
    108e:	e3 25       	eor	r30, r3
    1090:	f4 25       	eor	r31, r4
    1092:	85 25       	eor	r24, r5
    1094:	96 25       	eor	r25, r6
    1096:	a7 25       	eor	r26, r7
    1098:	0b 0f       	add	r16, r27
    109a:	1c 1f       	adc	r17, r28
    109c:	2d 1f       	adc	r18, r29
    109e:	3e 1f       	adc	r19, r30
    10a0:	4f 1f       	adc	r20, r31
    10a2:	58 1f       	adc	r21, r24
    10a4:	69 1f       	adc	r22, r25
    10a6:	7a 1f       	adc	r23, r26
    10a8:	b7 fb       	bst	r27, 7
    10aa:	cc 0f       	add	r28, r28
    10ac:	dd 1f       	adc	r29, r29
    10ae:	ee 1f       	adc	r30, r30
    10b0:	ff 1f       	adc	r31, r31
    10b2:	88 1f       	adc	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	aa 1f       	adc	r26, r26
    10b8:	bb 1f       	adc	r27, r27
    10ba:	c0 f9       	bld	r28, 0
    10bc:	b7 fb       	bst	r27, 7
    10be:	cc 0f       	add	r28, r28
    10c0:	dd 1f       	adc	r29, r29
    10c2:	ee 1f       	adc	r30, r30
    10c4:	ff 1f       	adc	r31, r31
    10c6:	88 1f       	adc	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	aa 1f       	adc	r26, r26
    10cc:	bb 1f       	adc	r27, r27
    10ce:	c0 f9       	bld	r28, 0
    10d0:	c0 27       	eor	r28, r16
    10d2:	d1 27       	eor	r29, r17
    10d4:	e2 27       	eor	r30, r18
    10d6:	f3 27       	eor	r31, r19
    10d8:	84 27       	eor	r24, r20
    10da:	95 27       	eor	r25, r21
    10dc:	a6 27       	eor	r26, r22
    10de:	b7 27       	eor	r27, r23
    10e0:	0f 0c       	add	r0, r15
    10e2:	18 1c       	adc	r1, r8
    10e4:	29 1c       	adc	r2, r9
    10e6:	3a 1c       	adc	r3, r10
    10e8:	4b 1c       	adc	r4, r11
    10ea:	5c 1c       	adc	r5, r12
    10ec:	6d 1c       	adc	r6, r13
    10ee:	7e 1c       	adc	r7, r14
    10f0:	c0 fa       	bst	r12, 0
    10f2:	b6 94       	lsr	r11
    10f4:	a7 94       	ror	r10
    10f6:	97 94       	ror	r9
    10f8:	87 94       	ror	r8
    10fa:	f7 94       	ror	r15
    10fc:	e7 94       	ror	r14
    10fe:	d7 94       	ror	r13
    1100:	c7 94       	ror	r12
    1102:	b7 f8       	bld	r11, 7
    1104:	c0 fa       	bst	r12, 0
    1106:	b6 94       	lsr	r11
    1108:	a7 94       	ror	r10
    110a:	97 94       	ror	r9
    110c:	87 94       	ror	r8
    110e:	f7 94       	ror	r15
    1110:	e7 94       	ror	r14
    1112:	d7 94       	ror	r13
    1114:	c7 94       	ror	r12
    1116:	b7 f8       	bld	r11, 7
    1118:	c0 24       	eor	r12, r0
    111a:	d1 24       	eor	r13, r1
    111c:	e2 24       	eor	r14, r2
    111e:	f3 24       	eor	r15, r3
    1120:	84 24       	eor	r8, r4
    1122:	95 24       	eor	r9, r5
    1124:	a6 24       	eor	r10, r6
    1126:	b7 24       	eor	r11, r7
    1128:	0c 0d       	add	r16, r12
    112a:	1d 1d       	adc	r17, r13
    112c:	2e 1d       	adc	r18, r14
    112e:	3f 1d       	adc	r19, r15
    1130:	48 1d       	adc	r20, r8
    1132:	59 1d       	adc	r21, r9
    1134:	6a 1d       	adc	r22, r10
    1136:	7b 1d       	adc	r23, r11
    1138:	80 26       	eor	r8, r16
    113a:	91 26       	eor	r9, r17
    113c:	a2 26       	eor	r10, r18
    113e:	b3 26       	eor	r11, r19
    1140:	c4 26       	eor	r12, r20
    1142:	d5 26       	eor	r13, r21
    1144:	e6 26       	eor	r14, r22
    1146:	f7 26       	eor	r15, r23
    1148:	0c 0e       	add	r0, r28
    114a:	1d 1e       	adc	r1, r29
    114c:	2e 1e       	adc	r2, r30
    114e:	3f 1e       	adc	r3, r31
    1150:	48 1e       	adc	r4, r24
    1152:	59 1e       	adc	r5, r25
    1154:	6a 1e       	adc	r6, r26
    1156:	7b 1e       	adc	r7, r27
    1158:	80 25       	eor	r24, r0
    115a:	91 25       	eor	r25, r1
    115c:	a2 25       	eor	r26, r2
    115e:	b3 25       	eor	r27, r3
    1160:	c4 25       	eor	r28, r4
    1162:	d5 25       	eor	r29, r5
    1164:	e6 25       	eor	r30, r6
    1166:	f7 25       	eor	r31, r7
    1168:	f0 93 af 01 	sts	0x01AF, r31
    116c:	ff b7       	in	r31, 0x3f	; 63
    116e:	f7 fb       	bst	r31, 7
    1170:	f8 94       	cli
    1172:	08 95       	ret

00001174 <threefish_256_enc>:
    1174:	0e 94 67 00 	call	0xce	; 0xce <threefish_setup>
    1178:	ff ef       	ldi	r31, 0xFF	; 255
    117a:	f0 93 ad 01 	sts	0x01AD, r31
    117e:	f7 e0       	ldi	r31, 0x07	; 7
    1180:	f0 93 ae 01 	sts	0x01AE, r31
    1184:	ff e2       	ldi	r31, 0x2F	; 47
    1186:	f0 93 b0 01 	sts	0x01B0, r31
    118a:	0e 94 7f 05 	call	0xafe	; 0xafe <threefish_256_enc_8threefish_rounds>
    118e:	0e 94 7f 05 	call	0xafe	; 0xafe <threefish_256_enc_8threefish_rounds>
    1192:	0e 94 7f 05 	call	0xafe	; 0xafe <threefish_256_enc_8threefish_rounds>
    1196:	0e 94 7f 05 	call	0xafe	; 0xafe <threefish_256_enc_8threefish_rounds>
    119a:	0e 94 7f 05 	call	0xafe	; 0xafe <threefish_256_enc_8threefish_rounds>
    119e:	0e 94 7f 05 	call	0xafe	; 0xafe <threefish_256_enc_8threefish_rounds>
    11a2:	0e 94 7f 05 	call	0xafe	; 0xafe <threefish_256_enc_8threefish_rounds>
    11a6:	0e 94 7f 05 	call	0xafe	; 0xafe <threefish_256_enc_8threefish_rounds>
    11aa:	0e 94 7f 05 	call	0xafe	; 0xafe <threefish_256_enc_8threefish_rounds>
    11ae:	f0 91 ae 01 	lds	r31, 0x01AE
    11b2:	fd bf       	out	0x3d, r31	; 61
    11b4:	ff 91       	pop	r31
    11b6:	0f 0f       	add	r16, r31
    11b8:	ff 91       	pop	r31
    11ba:	1f 1f       	adc	r17, r31
    11bc:	ff 91       	pop	r31
    11be:	2f 1f       	adc	r18, r31
    11c0:	ff 91       	pop	r31
    11c2:	3f 1f       	adc	r19, r31
    11c4:	ff 91       	pop	r31
    11c6:	4f 1f       	adc	r20, r31
    11c8:	ff 91       	pop	r31
    11ca:	5f 1f       	adc	r21, r31
    11cc:	ff 91       	pop	r31
    11ce:	6f 1f       	adc	r22, r31
    11d0:	ff 91       	pop	r31
    11d2:	7f 1f       	adc	r23, r31
    11d4:	f0 91 af 01 	lds	r31, 0x01AF
    11d8:	00 93 af 01 	sts	0x01AF, r16
    11dc:	0d b7       	in	r16, 0x3d	; 61
    11de:	0f 32       	cpi	r16, 0x2F	; 47
    11e0:	11 f4       	brne	.+4      	; 0x11e6 <threefish_256_enc+0x72>
    11e2:	07 e0       	ldi	r16, 0x07	; 7
    11e4:	0d bf       	out	0x3d, r16	; 61
    11e6:	0f 91       	pop	r16
    11e8:	80 0f       	add	r24, r16
    11ea:	0f 91       	pop	r16
    11ec:	90 1f       	adc	r25, r16
    11ee:	0f 91       	pop	r16
    11f0:	a0 1f       	adc	r26, r16
    11f2:	0f 91       	pop	r16
    11f4:	b0 1f       	adc	r27, r16
    11f6:	0f 91       	pop	r16
    11f8:	c0 1f       	adc	r28, r16
    11fa:	0f 91       	pop	r16
    11fc:	d0 1f       	adc	r29, r16
    11fe:	0f 91       	pop	r16
    1200:	e0 1f       	adc	r30, r16
    1202:	0f 91       	pop	r16
    1204:	f0 1f       	adc	r31, r16
    1206:	0d b7       	in	r16, 0x3d	; 61
    1208:	0f 32       	cpi	r16, 0x2F	; 47
    120a:	11 f4       	brne	.+4      	; 0x1210 <threefish_256_enc+0x9c>
    120c:	07 e0       	ldi	r16, 0x07	; 7
    120e:	0d bf       	out	0x3d, r16	; 61
    1210:	0f 91       	pop	r16
    1212:	00 0e       	add	r0, r16
    1214:	0f 91       	pop	r16
    1216:	10 1e       	adc	r1, r16
    1218:	0f 91       	pop	r16
    121a:	20 1e       	adc	r2, r16
    121c:	0f 91       	pop	r16
    121e:	30 1e       	adc	r3, r16
    1220:	0f 91       	pop	r16
    1222:	40 1e       	adc	r4, r16
    1224:	0f 91       	pop	r16
    1226:	50 1e       	adc	r5, r16
    1228:	0f 91       	pop	r16
    122a:	60 1e       	adc	r6, r16
    122c:	0f 91       	pop	r16
    122e:	70 1e       	adc	r7, r16
    1230:	0d b7       	in	r16, 0x3d	; 61
    1232:	0f 32       	cpi	r16, 0x2F	; 47
    1234:	11 f4       	brne	.+4      	; 0x123a <threefish_256_enc+0xc6>
    1236:	07 e0       	ldi	r16, 0x07	; 7
    1238:	0d bf       	out	0x3d, r16	; 61
    123a:	0f 91       	pop	r16
    123c:	80 0e       	add	r8, r16
    123e:	0f 91       	pop	r16
    1240:	90 1e       	adc	r9, r16
    1242:	0f 91       	pop	r16
    1244:	a0 1e       	adc	r10, r16
    1246:	0f 91       	pop	r16
    1248:	b0 1e       	adc	r11, r16
    124a:	0f 91       	pop	r16
    124c:	c0 1e       	adc	r12, r16
    124e:	0f 91       	pop	r16
    1250:	d0 1e       	adc	r13, r16
    1252:	0f 91       	pop	r16
    1254:	e0 1e       	adc	r14, r16
    1256:	0f 91       	pop	r16
    1258:	f0 1e       	adc	r15, r16
    125a:	00 91 b0 01 	lds	r16, 0x01B0
    125e:	0d bf       	out	0x3d, r16	; 61
    1260:	0f 91       	pop	r16
    1262:	80 0f       	add	r24, r16
    1264:	0f 91       	pop	r16
    1266:	90 1f       	adc	r25, r16
    1268:	0f 91       	pop	r16
    126a:	a0 1f       	adc	r26, r16
    126c:	0f 91       	pop	r16
    126e:	b0 1f       	adc	r27, r16
    1270:	0f 91       	pop	r16
    1272:	c0 1f       	adc	r28, r16
    1274:	0f 91       	pop	r16
    1276:	d0 1f       	adc	r29, r16
    1278:	0f 91       	pop	r16
    127a:	e0 1f       	adc	r30, r16
    127c:	0f 91       	pop	r16
    127e:	f0 1f       	adc	r31, r16
    1280:	0d b7       	in	r16, 0x3d	; 61
    1282:	07 34       	cpi	r16, 0x47	; 71
    1284:	11 f4       	brne	.+4      	; 0x128a <threefish_256_enc+0x116>
    1286:	0f e2       	ldi	r16, 0x2F	; 47
    1288:	0d bf       	out	0x3d, r16	; 61
    128a:	0f 91       	pop	r16
    128c:	00 0e       	add	r0, r16
    128e:	0f 91       	pop	r16
    1290:	10 1e       	adc	r1, r16
    1292:	0f 91       	pop	r16
    1294:	20 1e       	adc	r2, r16
    1296:	0f 91       	pop	r16
    1298:	30 1e       	adc	r3, r16
    129a:	0f 91       	pop	r16
    129c:	40 1e       	adc	r4, r16
    129e:	0f 91       	pop	r16
    12a0:	50 1e       	adc	r5, r16
    12a2:	0f 91       	pop	r16
    12a4:	60 1e       	adc	r6, r16
    12a6:	0f 91       	pop	r16
    12a8:	70 1e       	adc	r7, r16
    12aa:	00 91 ad 01 	lds	r16, 0x01AD
    12ae:	03 95       	inc	r16
    12b0:	80 0e       	add	r8, r16
    12b2:	00 27       	eor	r16, r16
    12b4:	90 1e       	adc	r9, r16
    12b6:	a0 1e       	adc	r10, r16
    12b8:	b0 1e       	adc	r11, r16
    12ba:	c0 1e       	adc	r12, r16
    12bc:	d0 1e       	adc	r13, r16
    12be:	e0 1e       	adc	r14, r16
    12c0:	f0 1e       	adc	r15, r16
    12c2:	03 e0       	ldi	r16, 0x03	; 3
    12c4:	0d bf       	out	0x3d, r16	; 61
    12c6:	0c 94 3b 01 	jmp	0x276	; 0x276 <threefish_finish>

000012ca <ubi_iterate.constprop.0>:
    12ca:	6f 92       	push	r6
    12cc:	7f 92       	push	r7
    12ce:	8f 92       	push	r8
    12d0:	9f 92       	push	r9
    12d2:	af 92       	push	r10
    12d4:	bf 92       	push	r11
    12d6:	cf 92       	push	r12
    12d8:	df 92       	push	r13
    12da:	ef 92       	push	r14
    12dc:	ff 92       	push	r15
    12de:	0f 93       	push	r16
    12e0:	1f 93       	push	r17
    12e2:	cf 93       	push	r28
    12e4:	df 93       	push	r29
    12e6:	eb 01       	movw	r28, r22
    12e8:	2c e3       	ldi	r18, 0x3C	; 60
    12ea:	62 2e       	mov	r6, r18
    12ec:	21 e0       	ldi	r18, 0x01	; 1
    12ee:	72 2e       	mov	r7, r18
    12f0:	d3 01       	movw	r26, r6
    12f2:	90 96       	adiw	r26, 0x20	; 32
    12f4:	2d 91       	ld	r18, X+
    12f6:	3c 91       	ld	r19, X
    12f8:	91 97       	sbiw	r26, 0x21	; 33
    12fa:	fc 01       	movw	r30, r24
    12fc:	31 a7       	std	Z+41, r19	; 0x29
    12fe:	20 a7       	std	Z+40, r18	; 0x28
    1300:	ba 96       	adiw	r30, 0x2a	; 42
    1302:	2e e1       	ldi	r18, 0x1E	; 30
    1304:	df 01       	movw	r26, r30
    1306:	1d 92       	st	X+, r1
    1308:	2a 95       	dec	r18
    130a:	e9 f7       	brne	.-6      	; 0x1306 <ubi_iterate.constprop.0+0x3c>
    130c:	df 93       	push	r29
    130e:	6f 93       	push	r22
    1310:	9c 01       	movw	r18, r24
    1312:	28 5d       	subi	r18, 0xD8	; 216
    1314:	3f 4f       	sbci	r19, 0xFF	; 255
    1316:	3f 93       	push	r19
    1318:	2f 93       	push	r18
    131a:	81 2c       	mov	r8, r1
    131c:	91 2c       	mov	r9, r1
    131e:	a1 2c       	mov	r10, r1
    1320:	b1 2c       	mov	r11, r1
    1322:	c1 2c       	mov	r12, r1
    1324:	d1 2c       	mov	r13, r1
    1326:	e1 2c       	mov	r14, r1
    1328:	f1 2c       	mov	r15, r1
    132a:	00 e0       	ldi	r16, 0x00	; 0
    132c:	10 e0       	ldi	r17, 0x00	; 0
    132e:	20 e0       	ldi	r18, 0x00	; 0
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	40 e0       	ldi	r20, 0x00	; 0
    1334:	50 e0       	ldi	r21, 0x00	; 0
    1336:	6f ef       	ldi	r22, 0xFF	; 255
    1338:	70 e0       	ldi	r23, 0x00	; 0
    133a:	0e 94 ba 08 	call	0x1174	; 0x1174 <threefish_256_enc>
    133e:	88 81       	ld	r24, Y
    1340:	d3 01       	movw	r26, r6
    1342:	90 96       	adiw	r26, 0x20	; 32
    1344:	9c 91       	ld	r25, X
    1346:	90 97       	sbiw	r26, 0x20	; 32
    1348:	89 27       	eor	r24, r25
    134a:	88 83       	st	Y, r24
    134c:	89 81       	ldd	r24, Y+1	; 0x01
    134e:	91 96       	adiw	r26, 0x21	; 33
    1350:	9c 91       	ld	r25, X
    1352:	89 27       	eor	r24, r25
    1354:	89 83       	std	Y+1, r24	; 0x01
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	8e e5       	ldi	r24, 0x5E	; 94
    1360:	91 e0       	ldi	r25, 0x01	; 1
    1362:	df 91       	pop	r29
    1364:	cf 91       	pop	r28
    1366:	1f 91       	pop	r17
    1368:	0f 91       	pop	r16
    136a:	ff 90       	pop	r15
    136c:	ef 90       	pop	r14
    136e:	df 90       	pop	r13
    1370:	cf 90       	pop	r12
    1372:	bf 90       	pop	r11
    1374:	af 90       	pop	r10
    1376:	9f 90       	pop	r9
    1378:	8f 90       	pop	r8
    137a:	7f 90       	pop	r7
    137c:	6f 90       	pop	r6
    137e:	08 95       	ret

00001380 <skein_rand_reseed>:
	skein_rand_reseed(tparam, seed);
}

void skein_rand_reseed(threefish_param_t *tparam, char seed[32])
{
	memcpy(skein_rand_data, seed, 32);
    1380:	20 e2       	ldi	r18, 0x20	; 32
    1382:	fb 01       	movw	r30, r22
    1384:	ac e6       	ldi	r26, 0x6C	; 108
    1386:	b1 e0       	ldi	r27, 0x01	; 1
    1388:	01 90       	ld	r0, Z+
    138a:	0d 92       	st	X+, r0
    138c:	2a 95       	dec	r18
    138e:	e1 f7       	brne	.-8      	; 0x1388 <skein_rand_reseed+0x8>
	skein_256_256(tparam, data.state, 64, data.state);
    1390:	2c e3       	ldi	r18, 0x3C	; 60
    1392:	31 e0       	ldi	r19, 0x01	; 1
    1394:	40 e4       	ldi	r20, 0x40	; 64
    1396:	50 e0       	ldi	r21, 0x00	; 0
    1398:	b9 01       	movw	r22, r18
    139a:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <skein_256_256>
	data.block = 255;
    139e:	8f ef       	ldi	r24, 0xFF	; 255
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	90 93 5d 01 	sts	0x015D, r25
    13a6:	80 93 5c 01 	sts	0x015C, r24
	skein_rand_len = 0;
    13aa:	10 92 8c 01 	sts	0x018C, r1
    13ae:	08 95       	ret

000013b0 <skein_rand_seed>:
unsigned char skein_rand_len;
char skein_rand_data[32];

void skein_rand_seed(threefish_param_t *tparam, char seed[32])
{
	memset(data.state, 0, sizeof(data.state));
    13b0:	20 e2       	ldi	r18, 0x20	; 32
    13b2:	ec e3       	ldi	r30, 0x3C	; 60
    13b4:	f1 e0       	ldi	r31, 0x01	; 1
    13b6:	df 01       	movw	r26, r30
    13b8:	1d 92       	st	X+, r1
    13ba:	2a 95       	dec	r18
    13bc:	e9 f7       	brne	.-6      	; 0x13b8 <skein_rand_seed+0x8>
	skein_rand_reseed(tparam, seed);
    13be:	0c 94 c0 09 	jmp	0x1380	; 0x1380 <skein_rand_reseed>

000013c2 <skein_rand_restart>:
}

void skein_rand_restart(threefish_param_t *tparam)
{
	// kopiere data.state nach tparam.key
	memcpy(tparam->key, data.state, 32);
    13c2:	20 e2       	ldi	r18, 0x20	; 32
    13c4:	ec e3       	ldi	r30, 0x3C	; 60
    13c6:	f1 e0       	ldi	r31, 0x01	; 1
    13c8:	dc 01       	movw	r26, r24
    13ca:	18 96       	adiw	r26, 0x08	; 8
    13cc:	01 90       	ld	r0, Z+
    13ce:	0d 92       	st	X+, r0
    13d0:	2a 95       	dec	r18
    13d2:	e1 f7       	brne	.-8      	; 0x13cc <skein_rand_restart+0xa>

	// setze block zurück
	data.block = 0;
    13d4:	10 92 5d 01 	sts	0x015D, r1
    13d8:	10 92 5c 01 	sts	0x015C, r1

	// hasht message [data.block(b0-b7), data.block(b8-b15), 0, 0, 0, ...],
	// also [0, 0, 0, 0, 0, ...]
	// mit dem neuem key (= vorheriger data.state)
	// und schreibe ergebnis nach data.state
	ubi_iterate(tparam, (char *)&data.block, 2, Tout|SKEIN_SINGLE, 0, data.state);
    13dc:	6c e3       	ldi	r22, 0x3C	; 60
    13de:	71 e0       	ldi	r23, 0x01	; 1
    13e0:	0e 94 65 09 	call	0x12ca	; 0x12ca <ubi_iterate.constprop.0>

	// setze buffer fill auf 0 damit skein_rand_256 benutzt wird um den buffer zu füllen
	skein_rand_len = 0;
    13e4:	10 92 8c 01 	sts	0x018C, r1
    13e8:	08 95       	ret

000013ea <skein_rand_256>:
	}
	return skein_rand_data[--skein_rand_len];
}

void skein_rand_256(threefish_param_t *tparam, char output[32])
{
    13ea:	0f 93       	push	r16
    13ec:	1f 93       	push	r17
    13ee:	cf 93       	push	r28
    13f0:	df 93       	push	r29
    13f2:	00 d0       	rcall	.+0      	; 0x13f4 <skein_rand_256+0xa>
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
    13f8:	8c 01       	movw	r16, r24
	if (data.block == 255) skein_rand_restart(tparam);
    13fa:	80 91 5c 01 	lds	r24, 0x015C
    13fe:	90 91 5d 01 	lds	r25, 0x015D
    1402:	8f 3f       	cpi	r24, 0xFF	; 255
    1404:	91 05       	cpc	r25, r1
    1406:	39 f4       	brne	.+14     	; 0x1416 <skein_rand_256+0x2c>
    1408:	c8 01       	movw	r24, r16
    140a:	69 83       	std	Y+1, r22	; 0x01
    140c:	7a 83       	std	Y+2, r23	; 0x02
    140e:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <skein_rand_restart>
    1412:	7a 81       	ldd	r23, Y+2	; 0x02
    1414:	69 81       	ldd	r22, Y+1	; 0x01
	data.block++;
    1416:	20 91 5c 01 	lds	r18, 0x015C
    141a:	30 91 5d 01 	lds	r19, 0x015D
    141e:	2f 5f       	subi	r18, 0xFF	; 255
    1420:	3f 4f       	sbci	r19, 0xFF	; 255
    1422:	30 93 5d 01 	sts	0x015D, r19
    1426:	20 93 5c 01 	sts	0x015C, r18

	// hasht message [data.block(b0-b7), data.block(b8-b15), 0, 0, 0, ...],
	// also [(1-255), 0, 0, 0, 0, ...]
	// mit dem aktuellen key (= vorheriger data.state)
	// und schreibe ergebnis nach output
	ubi_iterate(tparam, (char *)&data.block, 2, Tout|SKEIN_SINGLE, 0, output);
    142a:	c8 01       	movw	r24, r16
}
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	df 91       	pop	r29
    1432:	cf 91       	pop	r28
    1434:	1f 91       	pop	r17
    1436:	0f 91       	pop	r16

	// hasht message [data.block(b0-b7), data.block(b8-b15), 0, 0, 0, ...],
	// also [(1-255), 0, 0, 0, 0, ...]
	// mit dem aktuellen key (= vorheriger data.state)
	// und schreibe ergebnis nach output
	ubi_iterate(tparam, (char *)&data.block, 2, Tout|SKEIN_SINGLE, 0, output);
    1438:	0c 94 65 09 	jmp	0x12ca	; 0x12ca <ubi_iterate.constprop.0>

0000143c <skein_rand_full>:
	skein_rand_len = 0;
}

unsigned char skein_rand_full(threefish_param_t *tparam)
{
	if (!skein_rand_len) {
    143c:	20 91 8c 01 	lds	r18, 0x018C
    1440:	21 11       	cpse	r18, r1
    1442:	07 c0       	rjmp	.+14     	; 0x1452 <skein_rand_full+0x16>
		skein_rand_256(tparam, skein_rand_data);
    1444:	6c e6       	ldi	r22, 0x6C	; 108
    1446:	71 e0       	ldi	r23, 0x01	; 1
    1448:	0e 94 f5 09 	call	0x13ea	; 0x13ea <skein_rand_256>
		skein_rand_len = 32;
    144c:	80 e2       	ldi	r24, 0x20	; 32
    144e:	80 93 8c 01 	sts	0x018C, r24
	}
	return skein_rand_data[--skein_rand_len];
    1452:	e0 91 8c 01 	lds	r30, 0x018C
    1456:	e1 50       	subi	r30, 0x01	; 1
    1458:	e0 93 8c 01 	sts	0x018C, r30
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	e4 59       	subi	r30, 0x94	; 148
    1460:	fe 4f       	sbci	r31, 0xFE	; 254
}
    1462:	80 81       	ld	r24, Z
    1464:	08 95       	ret

00001466 <ubi_iterate>:
	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

inline static const char *ubi_iterate(threefish_param_t *tparam, const char *message, unsigned char message_len, short tweak7, unsigned long position_offset, char *out)
{
    1466:	2f 92       	push	r2
    1468:	3f 92       	push	r3
    146a:	4f 92       	push	r4
    146c:	5f 92       	push	r5
    146e:	6f 92       	push	r6
    1470:	7f 92       	push	r7
    1472:	8f 92       	push	r8
    1474:	9f 92       	push	r9
    1476:	af 92       	push	r10
    1478:	bf 92       	push	r11
    147a:	cf 92       	push	r12
    147c:	df 92       	push	r13
    147e:	ef 92       	push	r14
    1480:	ff 92       	push	r15
    1482:	0f 93       	push	r16
    1484:	1f 93       	push	r17
    1486:	cf 93       	push	r28
    1488:	df 93       	push	r29
    148a:	00 d0       	rcall	.+0      	; 0x148c <ubi_iterate+0x26>
    148c:	1f 92       	push	r1
    148e:	cd b7       	in	r28, 0x3d	; 61
    1490:	de b7       	in	r29, 0x3e	; 62
    1492:	3c 01       	movw	r6, r24
    1494:	7b 83       	std	Y+3, r23	; 0x03
    1496:	6a 83       	std	Y+2, r22	; 0x02
    1498:	34 2e       	mov	r3, r20
    149a:	29 01       	movw	r4, r18
    149c:	47 01       	movw	r8, r14
    149e:	58 01       	movw	r10, r16
    14a0:	2c 2c       	mov	r2, r12
    14a2:	d9 82       	std	Y+1, r13	; 0x01
	unsigned char i;
	const char *real_msg = message;

	if (message_len < 32) {
    14a4:	2f e1       	ldi	r18, 0x1F	; 31
    14a6:	24 17       	cp	r18, r20
    14a8:	b0 f0       	brcs	.+44     	; 0x14d6 <ubi_iterate+0x70>
		memcpy(tparam->text, message, message_len);
    14aa:	c4 2e       	mov	r12, r20
    14ac:	d1 2c       	mov	r13, r1
    14ae:	8c 01       	movw	r16, r24
    14b0:	08 5d       	subi	r16, 0xD8	; 216
    14b2:	1f 4f       	sbci	r17, 0xFF	; 255
    14b4:	a6 01       	movw	r20, r12
    14b6:	c8 01       	movw	r24, r16
    14b8:	0e 94 9e 11 	call	0x233c	; 0x233c <memcpy>
		memset(tparam->text+message_len, 0, 32-message_len);
    14bc:	40 e2       	ldi	r20, 0x20	; 32
    14be:	50 e0       	ldi	r21, 0x00	; 0
    14c0:	4c 19       	sub	r20, r12
    14c2:	5d 09       	sbc	r21, r13
    14c4:	c6 01       	movw	r24, r12
    14c6:	88 96       	adiw	r24, 0x28	; 40
    14c8:	60 e0       	ldi	r22, 0x00	; 0
    14ca:	70 e0       	ldi	r23, 0x00	; 0
    14cc:	86 0d       	add	r24, r6
    14ce:	97 1d       	adc	r25, r7
    14d0:	0e 94 a7 11 	call	0x234e	; 0x234e <memset>
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <ubi_iterate+0x74>
    14d6:	0a 81       	ldd	r16, Y+2	; 0x02
    14d8:	1b 81       	ldd	r17, Y+3	; 0x03
		message = tparam->text;
	}
	threefish_256_enc(tparam, tweak7, 0, 0, 0, 0, 0, position_offset >> 16, position_offset & 0xffff, message, out);
    14da:	c5 01       	movw	r24, r10
    14dc:	aa 27       	eor	r26, r26
    14de:	bb 27       	eor	r27, r27
    14e0:	e9 81       	ldd	r30, Y+1	; 0x01
    14e2:	ef 93       	push	r30
    14e4:	2f 92       	push	r2
    14e6:	1f 93       	push	r17
    14e8:	0f 93       	push	r16
    14ea:	5c 01       	movw	r10, r24
    14ec:	c1 2c       	mov	r12, r1
    14ee:	d1 2c       	mov	r13, r1
    14f0:	e1 2c       	mov	r14, r1
    14f2:	f1 2c       	mov	r15, r1
    14f4:	00 e0       	ldi	r16, 0x00	; 0
    14f6:	10 e0       	ldi	r17, 0x00	; 0
    14f8:	20 e0       	ldi	r18, 0x00	; 0
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	40 e0       	ldi	r20, 0x00	; 0
    14fe:	50 e0       	ldi	r21, 0x00	; 0
    1500:	b2 01       	movw	r22, r4
    1502:	c3 01       	movw	r24, r6
    1504:	0e 94 ba 08 	call	0x1174	; 0x1174 <threefish_256_enc>
    1508:	9a 81       	ldd	r25, Y+2	; 0x02
    150a:	a2 2d       	mov	r26, r2
    150c:	b9 81       	ldd	r27, Y+1	; 0x01
	for (i = 0; i < message_len; i++) out[i] ^= *real_msg++;
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	e9 2f       	mov	r30, r25
    1518:	fb 81       	ldd	r31, Y+3	; 0x03
    151a:	8e 2f       	mov	r24, r30
    151c:	89 1b       	sub	r24, r25
    151e:	83 15       	cp	r24, r3
    1520:	28 f4       	brcc	.+10     	; 0x152c <ubi_iterate+0xc6>
    1522:	21 91       	ld	r18, Z+
    1524:	8c 91       	ld	r24, X
    1526:	82 27       	eor	r24, r18
    1528:	8d 93       	st	X+, r24
    152a:	f7 cf       	rjmp	.-18     	; 0x151a <ubi_iterate+0xb4>
	return real_msg;
}
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	9b 81       	ldd	r25, Y+3	; 0x03
    1530:	83 0d       	add	r24, r3
    1532:	91 1d       	adc	r25, r1
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	df 91       	pop	r29
    153c:	cf 91       	pop	r28
    153e:	1f 91       	pop	r17
    1540:	0f 91       	pop	r16
    1542:	ff 90       	pop	r15
    1544:	ef 90       	pop	r14
    1546:	df 90       	pop	r13
    1548:	cf 90       	pop	r12
    154a:	bf 90       	pop	r11
    154c:	af 90       	pop	r10
    154e:	9f 90       	pop	r9
    1550:	8f 90       	pop	r8
    1552:	7f 90       	pop	r7
    1554:	6f 90       	pop	r6
    1556:	5f 90       	pop	r5
    1558:	4f 90       	pop	r4
    155a:	3f 90       	pop	r3
    155c:	2f 90       	pop	r2
    155e:	08 95       	ret

00001560 <skein_256_256_default_iv>:

char skein_iv[32];

void skein_256_256_default_iv()
{
	memcpy_P(skein_iv, skein_default_iv, 32);
    1560:	40 e2       	ldi	r20, 0x20	; 32
    1562:	50 e0       	ldi	r21, 0x00	; 0
    1564:	60 e7       	ldi	r22, 0x70	; 112
    1566:	70 e0       	ldi	r23, 0x00	; 0
    1568:	8d e8       	ldi	r24, 0x8D	; 141
    156a:	91 e0       	ldi	r25, 0x01	; 1
    156c:	0c 94 95 11 	jmp	0x232a	; 0x232a <memcpy_P>

00001570 <skein_256_256_personalize_M>:
}

void skein_256_256_personalize_M(threefish_param_t *tparam)
{
    1570:	cf 92       	push	r12
    1572:	df 92       	push	r13
    1574:	ef 92       	push	r14
    1576:	ff 92       	push	r15
    1578:	0f 93       	push	r16
    157a:	1f 93       	push	r17
    157c:	cf 93       	push	r28
    157e:	df 93       	push	r29
    1580:	ec 01       	movw	r28, r24
	unsigned char len = 31;
	memcpy_P(tparam->key, skein_default_iv, 32);
    1582:	40 e2       	ldi	r20, 0x20	; 32
    1584:	50 e0       	ldi	r21, 0x00	; 0
    1586:	60 e7       	ldi	r22, 0x70	; 112
    1588:	70 e0       	ldi	r23, 0x00	; 0
    158a:	08 96       	adiw	r24, 0x08	; 8
    158c:	0e 94 95 11 	call	0x232a	; 0x232a <memcpy_P>
	memcpy_P(skein_iv, skein_default_iv, 32);
}

void skein_256_256_personalize_M(threefish_param_t *tparam)
{
	unsigned char len = 31;
    1590:	8f e1       	ldi	r24, 0x1F	; 31
	memcpy_P(tparam->key, skein_default_iv, 32);
	while (len >= 0 && !tparam->text[len]) len--;
    1592:	e8 2e       	mov	r14, r24
    1594:	f1 2c       	mov	r15, r1
    1596:	fe 01       	movw	r30, r28
    1598:	ee 0d       	add	r30, r14
    159a:	ff 1d       	adc	r31, r15
    159c:	90 a5       	ldd	r25, Z+40	; 0x28
    159e:	91 11       	cpse	r25, r1
    15a0:	02 c0       	rjmp	.+4      	; 0x15a6 <skein_256_256_personalize_M+0x36>
    15a2:	81 50       	subi	r24, 0x01	; 1
    15a4:	f6 cf       	rjmp	.-20     	; 0x1592 <skein_256_256_personalize_M+0x22>
	ubi_iterate(tparam, tparam->text, 32, (SKEIN_SINGLE | Tprs) << 8, len+1, skein_iv);
    15a6:	8f ef       	ldi	r24, 0xFF	; 255
    15a8:	e8 1a       	sub	r14, r24
    15aa:	f8 0a       	sbc	r15, r24
    15ac:	00 27       	eor	r16, r16
    15ae:	f7 fc       	sbrc	r15, 7
    15b0:	00 95       	com	r16
    15b2:	10 2f       	mov	r17, r16
    15b4:	be 01       	movw	r22, r28
    15b6:	68 5d       	subi	r22, 0xD8	; 216
    15b8:	7f 4f       	sbci	r23, 0xFF	; 255
    15ba:	9d e8       	ldi	r25, 0x8D	; 141
    15bc:	c9 2e       	mov	r12, r25
    15be:	91 e0       	ldi	r25, 0x01	; 1
    15c0:	d9 2e       	mov	r13, r25
    15c2:	20 e0       	ldi	r18, 0x00	; 0
    15c4:	38 ec       	ldi	r19, 0xC8	; 200
    15c6:	40 e2       	ldi	r20, 0x20	; 32
    15c8:	ce 01       	movw	r24, r28
    15ca:	0e 94 33 0a 	call	0x1466	; 0x1466 <ubi_iterate>
}
    15ce:	df 91       	pop	r29
    15d0:	cf 91       	pop	r28
    15d2:	1f 91       	pop	r17
    15d4:	0f 91       	pop	r16
    15d6:	ff 90       	pop	r15
    15d8:	ef 90       	pop	r14
    15da:	df 90       	pop	r13
    15dc:	cf 90       	pop	r12
    15de:	08 95       	ret

000015e0 <skein_256_256>:

void skein_256_256(threefish_param_t *tparam, const char *message, short message_len, char *out)
{
    15e0:	2f 92       	push	r2
    15e2:	3f 92       	push	r3
    15e4:	4f 92       	push	r4
    15e6:	5f 92       	push	r5
    15e8:	6f 92       	push	r6
    15ea:	7f 92       	push	r7
    15ec:	8f 92       	push	r8
    15ee:	9f 92       	push	r9
    15f0:	af 92       	push	r10
    15f2:	bf 92       	push	r11
    15f4:	cf 92       	push	r12
    15f6:	df 92       	push	r13
    15f8:	ef 92       	push	r14
    15fa:	ff 92       	push	r15
    15fc:	0f 93       	push	r16
    15fe:	1f 93       	push	r17
    1600:	cf 93       	push	r28
    1602:	df 93       	push	r29
    1604:	ec 01       	movw	r28, r24
    1606:	3a 01       	movw	r6, r20
    1608:	19 01       	movw	r2, r18
	char tweak7 = SKEIN_FIRST | Tmsg;
	short position_offset = 0;
	memcpy(tparam->key, skein_iv, 32);
    160a:	80 e2       	ldi	r24, 0x20	; 32
    160c:	ed e8       	ldi	r30, 0x8D	; 141
    160e:	f1 e0       	ldi	r31, 0x01	; 1
    1610:	de 01       	movw	r26, r28
    1612:	18 96       	adiw	r26, 0x08	; 8
    1614:	01 90       	ld	r0, Z+
    1616:	0d 92       	st	X+, r0
    1618:	8a 95       	dec	r24
    161a:	e1 f7       	brne	.-8      	; 0x1614 <skein_256_256+0x34>
	DEBUG_64(tparam->key, 4);

	while (message_len > 32) {
    161c:	81 2c       	mov	r8, r1
    161e:	91 2c       	mov	r9, r1
    1620:	54 01       	movw	r10, r8
	ubi_iterate(tparam, tparam->text, 32, (SKEIN_SINGLE | Tprs) << 8, len+1, skein_iv);
}

void skein_256_256(threefish_param_t *tparam, const char *message, short message_len, char *out)
{
	char tweak7 = SKEIN_FIRST | Tmsg;
    1622:	30 e7       	ldi	r19, 0x70	; 112
    1624:	ce 01       	movw	r24, r28
    1626:	08 96       	adiw	r24, 0x08	; 8
    1628:	2c 01       	movw	r4, r24
    162a:	74 01       	movw	r14, r8
    162c:	80 e2       	ldi	r24, 0x20	; 32
    162e:	88 0e       	add	r8, r24
    1630:	91 1c       	adc	r9, r1
    1632:	a1 1c       	adc	r10, r1
    1634:	b1 1c       	adc	r11, r1
	short position_offset = 0;
	memcpy(tparam->key, skein_iv, 32);
	DEBUG_64(tparam->key, 4);

	while (message_len > 32) {
    1636:	91 e2       	ldi	r25, 0x21	; 33
    1638:	69 16       	cp	r6, r25
    163a:	71 04       	cpc	r7, r1
    163c:	74 f0       	brlt	.+28     	; 0x165a <skein_256_256+0x7a>
		position_offset += 32;
		message = ubi_iterate(tparam, message, 32, tweak7 << 8, position_offset, tparam->key);
    163e:	62 01       	movw	r12, r4
    1640:	85 01       	movw	r16, r10
    1642:	74 01       	movw	r14, r8
    1644:	20 e0       	ldi	r18, 0x00	; 0
    1646:	40 e2       	ldi	r20, 0x20	; 32
    1648:	ce 01       	movw	r24, r28
    164a:	0e 94 33 0a 	call	0x1466	; 0x1466 <ubi_iterate>
    164e:	bc 01       	movw	r22, r24
		DEBUG_64(tparam->key, 4);
		tweak7 &= ~SKEIN_FIRST;
		message_len -= 32;
    1650:	90 e2       	ldi	r25, 0x20	; 32
    1652:	69 1a       	sub	r6, r25
    1654:	71 08       	sbc	r7, r1

	while (message_len > 32) {
		position_offset += 32;
		message = ubi_iterate(tparam, message, 32, tweak7 << 8, position_offset, tparam->key);
		DEBUG_64(tparam->key, 4);
		tweak7 &= ~SKEIN_FIRST;
    1656:	30 e3       	ldi	r19, 0x30	; 48
    1658:	e8 cf       	rjmp	.-48     	; 0x162a <skein_256_256+0x4a>
		message_len -= 32;
	}

	tweak7 |= SKEIN_LAST;
	position_offset += message_len;
    165a:	e6 0c       	add	r14, r6
    165c:	f7 1c       	adc	r15, r7
	ubi_iterate(tparam, message, message_len, tweak7 << 8, position_offset, tparam->key);
    165e:	00 27       	eor	r16, r16
    1660:	f7 fc       	sbrc	r15, 7
    1662:	00 95       	com	r16
    1664:	10 2f       	mov	r17, r16
		DEBUG_64(tparam->key, 4);
		tweak7 &= ~SKEIN_FIRST;
		message_len -= 32;
	}

	tweak7 |= SKEIN_LAST;
    1666:	30 68       	ori	r19, 0x80	; 128
	position_offset += message_len;
	ubi_iterate(tparam, message, message_len, tweak7 << 8, position_offset, tparam->key);
    1668:	62 01       	movw	r12, r4
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	46 2d       	mov	r20, r6
    166e:	ce 01       	movw	r24, r28
    1670:	0e 94 33 0a 	call	0x1466	; 0x1466 <ubi_iterate>
	DEBUG_64(tparam->key, 4);

	ubi_iterate(tparam, NULL, 0, (SKEIN_SINGLE | Tout) << 8, 8, out);
    1674:	61 01       	movw	r12, r2
    1676:	18 e0       	ldi	r17, 0x08	; 8
    1678:	e1 2e       	mov	r14, r17
    167a:	f1 2c       	mov	r15, r1
    167c:	00 e0       	ldi	r16, 0x00	; 0
    167e:	10 e0       	ldi	r17, 0x00	; 0
    1680:	20 e0       	ldi	r18, 0x00	; 0
    1682:	3f ef       	ldi	r19, 0xFF	; 255
    1684:	40 e0       	ldi	r20, 0x00	; 0
    1686:	60 e0       	ldi	r22, 0x00	; 0
    1688:	70 e0       	ldi	r23, 0x00	; 0
    168a:	ce 01       	movw	r24, r28
    168c:	0e 94 33 0a 	call	0x1466	; 0x1466 <ubi_iterate>
	DEBUG_64(out, 4);
}
    1690:	df 91       	pop	r29
    1692:	cf 91       	pop	r28
    1694:	1f 91       	pop	r17
    1696:	0f 91       	pop	r16
    1698:	ff 90       	pop	r15
    169a:	ef 90       	pop	r14
    169c:	df 90       	pop	r13
    169e:	cf 90       	pop	r12
    16a0:	bf 90       	pop	r11
    16a2:	af 90       	pop	r10
    16a4:	9f 90       	pop	r9
    16a6:	8f 90       	pop	r8
    16a8:	7f 90       	pop	r7
    16aa:	6f 90       	pop	r6
    16ac:	5f 90       	pop	r5
    16ae:	4f 90       	pop	r4
    16b0:	3f 90       	pop	r3
    16b2:	2f 90       	pop	r2
    16b4:	08 95       	ret

000016b6 <skein_256_256_start>:

void skein_256_256_start(threefish_param_t *tparam)
{
    16b6:	dc 01       	movw	r26, r24
	unsigned long *offset = (unsigned long *)tparam->stack;
	*offset = 0;
    16b8:	1d 92       	st	X+, r1
    16ba:	1d 92       	st	X+, r1
    16bc:	1d 92       	st	X+, r1
    16be:	1c 92       	st	X, r1
    16c0:	13 97       	sbiw	r26, 0x03	; 3
	tparam->stack[4] = SKEIN_FIRST;
    16c2:	80 e4       	ldi	r24, 0x40	; 64
    16c4:	14 96       	adiw	r26, 0x04	; 4
    16c6:	8c 93       	st	X, r24
    16c8:	14 97       	sbiw	r26, 0x04	; 4
	memcpy(tparam->key, skein_iv, 32);
    16ca:	80 e2       	ldi	r24, 0x20	; 32
    16cc:	ed e8       	ldi	r30, 0x8D	; 141
    16ce:	f1 e0       	ldi	r31, 0x01	; 1
    16d0:	18 96       	adiw	r26, 0x08	; 8
    16d2:	01 90       	ld	r0, Z+
    16d4:	0d 92       	st	X+, r0
    16d6:	8a 95       	dec	r24
    16d8:	e1 f7       	brne	.-8      	; 0x16d2 <skein_256_256_start+0x1c>
    16da:	08 95       	ret

000016dc <skein_256_256_add>:
	DEBUG_64(tparam->key, 4);
}

void skein_256_256_add(threefish_param_t *tparam, const char *message)
{
    16dc:	cf 92       	push	r12
    16de:	df 92       	push	r13
    16e0:	ef 92       	push	r14
    16e2:	ff 92       	push	r15
    16e4:	0f 93       	push	r16
    16e6:	1f 93       	push	r17
    16e8:	cf 93       	push	r28
    16ea:	df 93       	push	r29
    16ec:	ec 01       	movw	r28, r24
	unsigned long *offset = (unsigned long *)tparam->stack;
	char flags = tparam->stack[4];
    16ee:	3c 81       	ldd	r19, Y+4	; 0x04

	ubi_iterate(tparam, message, 32, (flags | Tmsg) << 8, (*offset)+=32, tparam->key);
    16f0:	e8 80       	ld	r14, Y
    16f2:	f9 80       	ldd	r15, Y+1	; 0x01
    16f4:	0a 81       	ldd	r16, Y+2	; 0x02
    16f6:	1b 81       	ldd	r17, Y+3	; 0x03
    16f8:	80 e2       	ldi	r24, 0x20	; 32
    16fa:	e8 0e       	add	r14, r24
    16fc:	f1 1c       	adc	r15, r1
    16fe:	01 1d       	adc	r16, r1
    1700:	11 1d       	adc	r17, r1
    1702:	e8 82       	st	Y, r14
    1704:	f9 82       	std	Y+1, r15	; 0x01
    1706:	0a 83       	std	Y+2, r16	; 0x02
    1708:	1b 83       	std	Y+3, r17	; 0x03
    170a:	6e 01       	movw	r12, r28
    170c:	88 e0       	ldi	r24, 0x08	; 8
    170e:	c8 0e       	add	r12, r24
    1710:	d1 1c       	adc	r13, r1
    1712:	30 63       	ori	r19, 0x30	; 48
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	40 e2       	ldi	r20, 0x20	; 32
    1718:	ce 01       	movw	r24, r28
    171a:	0e 94 33 0a 	call	0x1466	; 0x1466 <ubi_iterate>
	tparam->stack[4] = 0;
    171e:	1c 82       	std	Y+4, r1	; 0x04
	DEBUG_64(tparam->key, 4);
}
    1720:	df 91       	pop	r29
    1722:	cf 91       	pop	r28
    1724:	1f 91       	pop	r17
    1726:	0f 91       	pop	r16
    1728:	ff 90       	pop	r15
    172a:	ef 90       	pop	r14
    172c:	df 90       	pop	r13
    172e:	cf 90       	pop	r12
    1730:	08 95       	ret

00001732 <skein_256_256_finish>:

void skein_256_256_finish(threefish_param_t *tparam, const char *message, char message_len, char *out)
{
    1732:	af 92       	push	r10
    1734:	bf 92       	push	r11
    1736:	cf 92       	push	r12
    1738:	df 92       	push	r13
    173a:	ef 92       	push	r14
    173c:	ff 92       	push	r15
    173e:	0f 93       	push	r16
    1740:	1f 93       	push	r17
    1742:	cf 93       	push	r28
    1744:	df 93       	push	r29
    1746:	5c 01       	movw	r10, r24
    1748:	e9 01       	movw	r28, r18
	unsigned long *offset = (unsigned long *)tparam->stack;
	char flags = tparam->stack[4] | SKEIN_LAST;
    174a:	fc 01       	movw	r30, r24
    174c:	34 81       	ldd	r19, Z+4	; 0x04

	ubi_iterate(tparam, message, message_len, (flags | Tmsg) << 8, (*offset)+=message_len, tparam->key);
    174e:	e0 80       	ld	r14, Z
    1750:	f1 80       	ldd	r15, Z+1	; 0x01
    1752:	02 81       	ldd	r16, Z+2	; 0x02
    1754:	13 81       	ldd	r17, Z+3	; 0x03
    1756:	e4 0e       	add	r14, r20
    1758:	f1 1c       	adc	r15, r1
    175a:	01 1d       	adc	r16, r1
    175c:	11 1d       	adc	r17, r1
    175e:	e0 82       	st	Z, r14
    1760:	f1 82       	std	Z+1, r15	; 0x01
    1762:	02 83       	std	Z+2, r16	; 0x02
    1764:	13 83       	std	Z+3, r17	; 0x03
    1766:	6c 01       	movw	r12, r24
    1768:	f8 e0       	ldi	r31, 0x08	; 8
    176a:	cf 0e       	add	r12, r31
    176c:	d1 1c       	adc	r13, r1
    176e:	30 6b       	ori	r19, 0xB0	; 176
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	0e 94 33 0a 	call	0x1466	; 0x1466 <ubi_iterate>
	DEBUG_64(tparam->key, 4);
	ubi_iterate(tparam, NULL, 0, (SKEIN_SINGLE | Tout) << 8, 8, out);
    1776:	6e 01       	movw	r12, r28
    1778:	18 e0       	ldi	r17, 0x08	; 8
    177a:	e1 2e       	mov	r14, r17
    177c:	f1 2c       	mov	r15, r1
    177e:	00 e0       	ldi	r16, 0x00	; 0
    1780:	10 e0       	ldi	r17, 0x00	; 0
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	3f ef       	ldi	r19, 0xFF	; 255
    1786:	40 e0       	ldi	r20, 0x00	; 0
    1788:	60 e0       	ldi	r22, 0x00	; 0
    178a:	70 e0       	ldi	r23, 0x00	; 0
    178c:	c5 01       	movw	r24, r10
    178e:	0e 94 33 0a 	call	0x1466	; 0x1466 <ubi_iterate>
	DEBUG_64(out, 4);
}
    1792:	df 91       	pop	r29
    1794:	cf 91       	pop	r28
    1796:	1f 91       	pop	r17
    1798:	0f 91       	pop	r16
    179a:	ff 90       	pop	r15
    179c:	ef 90       	pop	r14
    179e:	df 90       	pop	r13
    17a0:	cf 90       	pop	r12
    17a2:	bf 90       	pop	r11
    17a4:	af 90       	pop	r10
    17a6:	08 95       	ret

000017a8 <__vector_5>:
volatile bool bit_is_sent = true; // init true so we can send immediately


// Pin Change Interrupt Request 1
ISR(PCINT1_vect)
{
    17a8:	1f 92       	push	r1
    17aa:	0f 92       	push	r0
    17ac:	0f b6       	in	r0, 0x3f	; 63
    17ae:	0f 92       	push	r0
    17b0:	11 24       	eor	r1, r1
    17b2:	8f 93       	push	r24
    17b4:	9f 93       	push	r25
	if(bit_nr_being_received != 0)
    17b6:	80 91 61 01 	lds	r24, 0x0161
    17ba:	81 11       	cpse	r24, r1
    17bc:	23 c0       	rjmp	.+70     	; 0x1804 <__vector_5+0x5c>
	{
		// this should not happen: a start bit coming in, even though we did not receive all bits
		return;
	}

	if(GetBit(PINB, PB6) != 0)
    17be:	1e 99       	sbic	0x03, 6	; 3
    17c0:	21 c0       	rjmp	.+66     	; 0x1804 <__vector_5+0x5c>
		// this can mean that we are done with receiving of a byte and notice the trailing edge of the parity bit.
		// or it is bad, in case we missed a byte.
		return;
	}

	if(mode == RECEIVING)
    17c2:	80 91 62 01 	lds	r24, 0x0162
    17c6:	81 11       	cpse	r24, r1
    17c8:	1d c0       	rjmp	.+58     	; 0x1804 <__vector_5+0x5c>
	{
		// this is the startbit (low). the next 8 bits are data, then 1 even parity. we'll get them in the following timer interrupts
		SetBit(TCCR1B, CS10); // Set clock source to CPU/1 = enable timer
    17ca:	80 91 81 00 	lds	r24, 0x0081
    17ce:	81 60       	ori	r24, 0x01	; 1
    17d0:	80 93 81 00 	sts	0x0081, r24
		TCNT1 = 0;
    17d4:	10 92 85 00 	sts	0x0085, r1
    17d8:	10 92 84 00 	sts	0x0084, r1

		bit_nr_being_received = 0;
    17dc:	10 92 61 01 	sts	0x0161, r1
		byte_being_received = 0x00;
    17e0:	10 92 60 01 	sts	0x0160, r1

		OCR1A = 372*1.50-120; // wait 1.5 ETU to sample in the middle of bit 0. subtract about 120 cycles for interrupt setup things
    17e4:	86 eb       	ldi	r24, 0xB6	; 182
    17e6:	91 e0       	ldi	r25, 0x01	; 1
    17e8:	90 93 89 00 	sts	0x0089, r25
    17ec:	80 93 88 00 	sts	0x0088, r24

		// don't come here again before we completely received this byte
		ClrBit(PCICR,PCIE1); // disable pin change interrupt
    17f0:	80 91 68 00 	lds	r24, 0x0068
    17f4:	8d 7f       	andi	r24, 0xFD	; 253
    17f6:	80 93 68 00 	sts	0x0068, r24
		ClrBit(PCMSK1,PCINT14); // disable pin change interrupt for PDI_DATA pin
    17fa:	80 91 6c 00 	lds	r24, 0x006C
    17fe:	8f 7b       	andi	r24, 0xBF	; 191
    1800:	80 93 6c 00 	sts	0x006C, r24
	}
}
    1804:	9f 91       	pop	r25
    1806:	8f 91       	pop	r24
    1808:	0f 90       	pop	r0
    180a:	0f be       	out	0x3f, r0	; 63
    180c:	0f 90       	pop	r0
    180e:	1f 90       	pop	r1
    1810:	18 95       	reti

00001812 <__vector_13>:


ISR(TIMER1_COMPA_vect)
{
    1812:	1f 92       	push	r1
    1814:	0f 92       	push	r0
    1816:	0f b6       	in	r0, 0x3f	; 63
    1818:	0f 92       	push	r0
    181a:	11 24       	eor	r1, r1
    181c:	2f 93       	push	r18
    181e:	3f 93       	push	r19
    1820:	4f 93       	push	r20
    1822:	5f 93       	push	r21
    1824:	6f 93       	push	r22
    1826:	7f 93       	push	r23
    1828:	8f 93       	push	r24
    182a:	9f 93       	push	r25
    182c:	af 93       	push	r26
    182e:	bf 93       	push	r27
    1830:	ef 93       	push	r30
    1832:	ff 93       	push	r31
	switch(mode)
    1834:	80 91 62 01 	lds	r24, 0x0162
    1838:	88 23       	and	r24, r24
    183a:	21 f0       	breq	.+8      	; 0x1844 <__vector_13+0x32>
    183c:	81 30       	cpi	r24, 0x01	; 1
    183e:	09 f4       	brne	.+2      	; 0x1842 <__vector_13+0x30>
    1840:	8e c0       	rjmp	.+284    	; 0x195e <__vector_13+0x14c>
    1842:	98 c0       	rjmp	.+304    	; 0x1974 <__vector_13+0x162>
	{

	case RECEIVING:
		if(bit_nr_being_received == 0)
    1844:	80 91 61 01 	lds	r24, 0x0161
    1848:	81 11       	cpse	r24, r1
    184a:	06 c0       	rjmp	.+12     	; 0x1858 <__vector_13+0x46>
		{
			OCR1A = 372; // this will happen in the middle of bit 0. from now on, sample every 1 ETU.
    184c:	84 e7       	ldi	r24, 0x74	; 116
    184e:	91 e0       	ldi	r25, 0x01	; 1
    1850:	90 93 89 00 	sts	0x0089, r25
    1854:	80 93 88 00 	sts	0x0088, r24
		}

		if(bit_nr_being_received < 8) // data bit
    1858:	80 91 61 01 	lds	r24, 0x0161
    185c:	88 30       	cpi	r24, 0x08	; 8
    185e:	a8 f5       	brcc	.+106    	; 0x18ca <__vector_13+0xb8>
		{
			// sample 5 times and do a majority decision
			int8_t r = 0;
			r += (GetBit(PINB, PB6))?1:-1;
    1860:	1e 9b       	sbis	0x03, 6	; 3
    1862:	02 c0       	rjmp	.+4      	; 0x1868 <__vector_13+0x56>
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	01 c0       	rjmp	.+2      	; 0x186a <__vector_13+0x58>
    1868:	8f ef       	ldi	r24, 0xFF	; 255
			r += (GetBit(PINB, PB6))?1:-1;
    186a:	1e 9b       	sbis	0x03, 6	; 3
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <__vector_13+0x60>
    186e:	21 e0       	ldi	r18, 0x01	; 1
    1870:	01 c0       	rjmp	.+2      	; 0x1874 <__vector_13+0x62>
    1872:	2f ef       	ldi	r18, 0xFF	; 255
    1874:	82 0f       	add	r24, r18
			r += (GetBit(PINB, PB6))?1:-1;
    1876:	1e 9b       	sbis	0x03, 6	; 3
    1878:	02 c0       	rjmp	.+4      	; 0x187e <__vector_13+0x6c>
    187a:	21 e0       	ldi	r18, 0x01	; 1
    187c:	01 c0       	rjmp	.+2      	; 0x1880 <__vector_13+0x6e>
    187e:	2f ef       	ldi	r18, 0xFF	; 255
    1880:	28 0f       	add	r18, r24
			r += (GetBit(PINB, PB6))?1:-1;
    1882:	1e 9b       	sbis	0x03, 6	; 3
    1884:	02 c0       	rjmp	.+4      	; 0x188a <__vector_13+0x78>
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	01 c0       	rjmp	.+2      	; 0x188c <__vector_13+0x7a>
    188a:	8f ef       	ldi	r24, 0xFF	; 255
    188c:	82 0f       	add	r24, r18
			r += (GetBit(PINB, PB6))?1:-1;
    188e:	1e 9b       	sbis	0x03, 6	; 3
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <__vector_13+0x84>
    1892:	91 e0       	ldi	r25, 0x01	; 1
    1894:	01 c0       	rjmp	.+2      	; 0x1898 <__vector_13+0x86>
    1896:	9f ef       	ldi	r25, 0xFF	; 255
			r = (r>0)?1:0;

			// save the bit
			byte_being_received |= (r<<(bit_nr_being_received++));
    1898:	30 91 60 01 	lds	r19, 0x0160
    189c:	20 91 61 01 	lds	r18, 0x0161
    18a0:	41 e0       	ldi	r20, 0x01	; 1
    18a2:	42 0f       	add	r20, r18
    18a4:	40 93 61 01 	sts	0x0161, r20
			int8_t r = 0;
			r += (GetBit(PINB, PB6))?1:-1;
			r += (GetBit(PINB, PB6))?1:-1;
			r += (GetBit(PINB, PB6))?1:-1;
			r += (GetBit(PINB, PB6))?1:-1;
			r += (GetBit(PINB, PB6))?1:-1;
    18a8:	48 2f       	mov	r20, r24
    18aa:	49 0f       	add	r20, r25
			r = (r>0)?1:0;
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	14 16       	cp	r1, r20
    18b2:	14 f0       	brlt	.+4      	; 0x18b8 <__vector_13+0xa6>
    18b4:	80 e0       	ldi	r24, 0x00	; 0
    18b6:	90 e0       	ldi	r25, 0x00	; 0

			// save the bit
			byte_being_received |= (r<<(bit_nr_being_received++));
    18b8:	02 2e       	mov	r0, r18
    18ba:	01 c0       	rjmp	.+2      	; 0x18be <__vector_13+0xac>
    18bc:	88 0f       	add	r24, r24
    18be:	0a 94       	dec	r0
    18c0:	ea f7       	brpl	.-6      	; 0x18bc <__vector_13+0xaa>
    18c2:	83 2b       	or	r24, r19
    18c4:	80 93 60 01 	sts	0x0160, r24
    18c8:	55 c0       	rjmp	.+170    	; 0x1974 <__vector_13+0x162>
		}
		else if (bit_nr_being_received == 8) // parity bit
    18ca:	80 91 61 01 	lds	r24, 0x0161
    18ce:	88 30       	cpi	r24, 0x08	; 8
    18d0:	09 f0       	breq	.+2      	; 0x18d4 <__vector_13+0xc2>
    18d2:	50 c0       	rjmp	.+160    	; 0x1974 <__vector_13+0x162>
		{
			// sample 5 times and do a majority decision
			int8_t r = 0;
			r += (GetBit(PINB, PB6))?1:-1;
    18d4:	1e 9b       	sbis	0x03, 6	; 3
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <__vector_13+0xca>
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	01 c0       	rjmp	.+2      	; 0x18de <__vector_13+0xcc>
    18dc:	8f ef       	ldi	r24, 0xFF	; 255
			r += (GetBit(PINB, PB6))?1:-1;
    18de:	1e 9b       	sbis	0x03, 6	; 3
    18e0:	02 c0       	rjmp	.+4      	; 0x18e6 <__vector_13+0xd4>
    18e2:	41 e0       	ldi	r20, 0x01	; 1
    18e4:	01 c0       	rjmp	.+2      	; 0x18e8 <__vector_13+0xd6>
    18e6:	4f ef       	ldi	r20, 0xFF	; 255
    18e8:	84 0f       	add	r24, r20
			r += (GetBit(PINB, PB6))?1:-1;
    18ea:	1e 9b       	sbis	0x03, 6	; 3
    18ec:	02 c0       	rjmp	.+4      	; 0x18f2 <__vector_13+0xe0>
    18ee:	41 e0       	ldi	r20, 0x01	; 1
    18f0:	01 c0       	rjmp	.+2      	; 0x18f4 <__vector_13+0xe2>
    18f2:	4f ef       	ldi	r20, 0xFF	; 255
    18f4:	48 0f       	add	r20, r24
			r += (GetBit(PINB, PB6))?1:-1;
    18f6:	1e 9b       	sbis	0x03, 6	; 3
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <__vector_13+0xec>
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	01 c0       	rjmp	.+2      	; 0x1900 <__vector_13+0xee>
    18fe:	8f ef       	ldi	r24, 0xFF	; 255
    1900:	48 0f       	add	r20, r24
			r += (GetBit(PINB, PB6))?1:-1;
    1902:	1e 9b       	sbis	0x03, 6	; 3
    1904:	02 c0       	rjmp	.+4      	; 0x190a <__vector_13+0xf8>
    1906:	91 e0       	ldi	r25, 0x01	; 1
    1908:	01 c0       	rjmp	.+2      	; 0x190c <__vector_13+0xfa>
    190a:	9f ef       	ldi	r25, 0xFF	; 255
			r = (r>0)?1:0;

			assert(r == parity_even_bit(byte_being_received), "WP"); // Wrong Parity
    190c:	80 91 60 01 	lds	r24, 0x0160
    1910:	08 2e       	mov	r0, r24
    1912:	82 95       	swap	r24
    1914:	80 25       	eor	r24, r0
    1916:	08 2e       	mov	r0, r24
    1918:	86 95       	lsr	r24
    191a:	86 95       	lsr	r24
    191c:	80 25       	eor	r24, r0
			int8_t r = 0;
			r += (GetBit(PINB, PB6))?1:-1;
			r += (GetBit(PINB, PB6))?1:-1;
			r += (GetBit(PINB, PB6))?1:-1;
			r += (GetBit(PINB, PB6))?1:-1;
			r += (GetBit(PINB, PB6))?1:-1;
    191e:	94 0f       	add	r25, r20
			r = (r>0)?1:0;
    1920:	41 e0       	ldi	r20, 0x01	; 1
    1922:	50 e0       	ldi	r21, 0x00	; 0
    1924:	19 16       	cp	r1, r25
    1926:	14 f0       	brlt	.+4      	; 0x192c <__vector_13+0x11a>
    1928:	40 e0       	ldi	r20, 0x00	; 0
    192a:	50 e0       	ldi	r21, 0x00	; 0

			assert(r == parity_even_bit(byte_being_received), "WP"); // Wrong Parity
    192c:	8f 5f       	subi	r24, 0xFF	; 255
    192e:	81 fb       	bst	r24, 1
    1930:	22 27       	eor	r18, r18
    1932:	20 f9       	bld	r18, 0
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	42 17       	cp	r20, r18
    193a:	53 07       	cpc	r21, r19
    193c:	09 f0       	breq	.+2      	; 0x1940 <__vector_13+0x12e>
    193e:	80 e0       	ldi	r24, 0x00	; 0
    1940:	6f e0       	ldi	r22, 0x0F	; 15
    1942:	71 e0       	ldi	r23, 0x01	; 1
    1944:	0e 94 03 11 	call	0x2206	; 0x2206 <assert>

			// we are done with this byte
			byte_is_received = true;
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	80 93 5f 01 	sts	0x015F, r24
			bit_nr_being_received = 0;
    194e:	10 92 61 01 	sts	0x0161, r1
			ClrBit(TCCR1B, CS10); // Set clock source to none = disable timer
    1952:	80 91 81 00 	lds	r24, 0x0081
    1956:	8e 7f       	andi	r24, 0xFE	; 254
    1958:	80 93 81 00 	sts	0x0081, r24
    195c:	0b c0       	rjmp	.+22     	; 0x1974 <__vector_13+0x162>
		}
		break;


	case TRANSMITTING:
		if(next_bit_to_send)
    195e:	80 91 5e 01 	lds	r24, 0x015E
    1962:	88 23       	and	r24, r24
    1964:	11 f0       	breq	.+4      	; 0x196a <__vector_13+0x158>
		{
			// Send 1 / idle / high / high-Z bit by changing pin to input (and maybe activating internal pullup)
			ClrBit(DDRB, PB6);
    1966:	26 98       	cbi	0x04, 6	; 4
    1968:	02 c0       	rjmp	.+4      	; 0x196e <__vector_13+0x15c>
		} else {
			// Send 0 / active / low / pull-down by changing pin to output and driving low
			SetBit(DDRB, PB6);
    196a:	26 9a       	sbi	0x04, 6	; 4
			ClrBit(PORTB, PB6);
    196c:	2e 98       	cbi	0x05, 6	; 5
		}
		bit_is_sent = true;
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	80 93 04 01 	sts	0x0104, r24
		break;

	}
}
    1974:	ff 91       	pop	r31
    1976:	ef 91       	pop	r30
    1978:	bf 91       	pop	r27
    197a:	af 91       	pop	r26
    197c:	9f 91       	pop	r25
    197e:	8f 91       	pop	r24
    1980:	7f 91       	pop	r23
    1982:	6f 91       	pop	r22
    1984:	5f 91       	pop	r21
    1986:	4f 91       	pop	r20
    1988:	3f 91       	pop	r19
    198a:	2f 91       	pop	r18
    198c:	0f 90       	pop	r0
    198e:	0f be       	out	0x3f, r0	; 63
    1990:	0f 90       	pop	r0
    1992:	1f 90       	pop	r1
    1994:	18 95       	reti

00001996 <set_mode_receive>:

void set_mode_receive()
{
	// In Empfangsmodus gehen
	mode = RECEIVING;
    1996:	10 92 62 01 	sts	0x0162, r1
	byte_is_received = false;
    199a:	10 92 5f 01 	sts	0x015F, r1
	ClrBit(DDRB, PB6); // set PDI_DATA as input
    199e:	26 98       	cbi	0x04, 6	; 4
	SetBit(PORTB, PB6); // interne Pullups aktivieren
    19a0:	2e 9a       	sbi	0x05, 6	; 5
	SetBit(PCICR,PCIE1); // enable pin change interrupt
    19a2:	e8 e6       	ldi	r30, 0x68	; 104
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	82 60       	ori	r24, 0x02	; 2
    19aa:	80 83       	st	Z, r24
	SetBit(PCMSK1,PCINT14); // enable pin change interrupt for PDI_DATA pin
    19ac:	ec e6       	ldi	r30, 0x6C	; 108
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	80 64       	ori	r24, 0x40	; 64
    19b4:	80 83       	st	Z, r24
    19b6:	08 95       	ret

000019b8 <set_mode_transmit>:
}

void set_mode_transmit()
{
	// Empfangsmodus verlassen
	mode = TRANSMITTING;
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	80 93 62 01 	sts	0x0162, r24
	ClrBit(PCICR,PCIE1); // disable pin change interrupt
    19be:	e8 e6       	ldi	r30, 0x68	; 104
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	8d 7f       	andi	r24, 0xFD	; 253
    19c6:	80 83       	st	Z, r24
	ClrBit(PCMSK1,PCINT14); // disable pin change interrupt for PDI_DATA pin
    19c8:	ec e6       	ldi	r30, 0x6C	; 108
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	8f 7b       	andi	r24, 0xBF	; 191
    19d0:	80 83       	st	Z, r24
	SetBit(DDRB, PB6); // set PDI_DATA as output
    19d2:	26 9a       	sbi	0x04, 6	; 4
    19d4:	08 95       	ret

000019d6 <comm_init>:
}

void comm_init()
{
	// In Empfangsmodus gehen
	ClrBit(DDRB, PB6); // set PDI_DATA as input
    19d6:	26 98       	cbi	0x04, 6	; 4
	SetBit(PORTB, PB6); // interne Pullups aktivieren
    19d8:	2e 9a       	sbi	0x05, 6	; 5
	PCICR |= (1<<PCIE1); // enable pin change interrupt
    19da:	e8 e6       	ldi	r30, 0x68	; 104
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	82 60       	ori	r24, 0x02	; 2
    19e2:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT14); // enable pin change interrupt for PDI_DATA pin
    19e4:	ec e6       	ldi	r30, 0x6C	; 108
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	80 64       	ori	r24, 0x40	; 64
    19ec:	80 83       	st	Z, r24

	// Initialize Timer1, which counts to 372 CPU cycles for correct timing
	SetBit(TCCR1B, WGM12); // Set CTC Mode
    19ee:	e1 e8       	ldi	r30, 0x81	; 129
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	80 81       	ld	r24, Z
    19f4:	88 60       	ori	r24, 0x08	; 8
    19f6:	80 83       	st	Z, r24
	OCR1A = 372;
    19f8:	84 e7       	ldi	r24, 0x74	; 116
    19fa:	91 e0       	ldi	r25, 0x01	; 1
    19fc:	90 93 89 00 	sts	0x0089, r25
    1a00:	80 93 88 00 	sts	0x0088, r24
	SetBit(TIMSK1, OCIE1A); // interrupt when timer reaches OCR1A
    1a04:	ef e6       	ldi	r30, 0x6F	; 111
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	82 60       	ori	r24, 0x02	; 2
    1a0c:	80 83       	st	Z, r24
    1a0e:	08 95       	ret

00001a10 <send_bit>:


// sends a bit via the PDI line. waits until 372 clock (1 ETU) have passed.
void send_bit(bool bit)
{
	while(!bit_is_sent); // wait until last bit was sent
    1a10:	90 91 04 01 	lds	r25, 0x0104
    1a14:	99 23       	and	r25, r25
    1a16:	e1 f3       	breq	.-8      	; 0x1a10 <send_bit>
	bit_is_sent = false; // we are "blocking" the pin
    1a18:	10 92 04 01 	sts	0x0104, r1
	next_bit_to_send = bit; // this bit will be sent in about 372 cycles
    1a1c:	80 93 5e 01 	sts	0x015E, r24
    1a20:	08 95       	ret

00001a22 <comm_transmit_byte>:
{
	while(length--) comm_transmit_byte(*(bytes++));
}

void comm_transmit_byte(uint8_t byte)
{
    1a22:	df 92       	push	r13
    1a24:	ef 92       	push	r14
    1a26:	ff 92       	push	r15
    1a28:	0f 93       	push	r16
    1a2a:	1f 93       	push	r17
    1a2c:	cf 93       	push	r28
    1a2e:	df 93       	push	r29
    1a30:	e8 2e       	mov	r14, r24
	uint8_t parity = 0;

	set_mode_transmit();
    1a32:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <set_mode_transmit>
	TCNT1 = 0;
    1a36:	10 92 85 00 	sts	0x0085, r1
    1a3a:	10 92 84 00 	sts	0x0084, r1
	SetBit(TCCR1B, CS10); // Set clock source to CPU/1 = enable timer
    1a3e:	90 91 81 00 	lds	r25, 0x0081
    1a42:	91 60       	ori	r25, 0x01	; 1
    1a44:	90 93 81 00 	sts	0x0081, r25

	// wait for at least 2.5 ETU so we don't violate the minimum time of 12 ETU between the leading edges of two start bits.
	for(int i = 0; i < 3; i++)
	{
		send_bit(true);
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <send_bit>
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <send_bit>
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <send_bit>
	}

	// send start bit (low)
	send_bit(false);
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <send_bit>
    1a60:	c8 e0       	ldi	r28, 0x08	; 8
    1a62:	d0 e0       	ldi	r29, 0x00	; 0

	// Shift masking bit 8 times
	for(uint8_t i = 0x01; i != 0; i <<= 1)
    1a64:	01 e0       	ldi	r16, 0x01	; 1
	while(length--) comm_transmit_byte(*(bytes++));
}

void comm_transmit_byte(uint8_t byte)
{
	uint8_t parity = 0;
    1a66:	10 e0       	ldi	r17, 0x00	; 0
	send_bit(false);

	// Shift masking bit 8 times
	for(uint8_t i = 0x01; i != 0; i <<= 1)
	{
		send_bit (byte & i);
    1a68:	dd 24       	eor	r13, r13
    1a6a:	d3 94       	inc	r13
    1a6c:	ff 24       	eor	r15, r15
    1a6e:	f3 94       	inc	r15
    1a70:	80 2f       	mov	r24, r16
    1a72:	8e 21       	and	r24, r14
    1a74:	09 f4       	brne	.+2      	; 0x1a78 <comm_transmit_byte+0x56>
    1a76:	f1 2c       	mov	r15, r1
    1a78:	8f 2d       	mov	r24, r15
    1a7a:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <send_bit>
		if(byte & i) parity = !parity;
    1a7e:	f1 10       	cpse	r15, r1
    1a80:	1d 25       	eor	r17, r13

	// send start bit (low)
	send_bit(false);

	// Shift masking bit 8 times
	for(uint8_t i = 0x01; i != 0; i <<= 1)
    1a82:	00 0f       	add	r16, r16
    1a84:	21 97       	sbiw	r28, 0x01	; 1
    1a86:	20 97       	sbiw	r28, 0x00	; 0
    1a88:	89 f7       	brne	.-30     	; 0x1a6c <comm_transmit_byte+0x4a>
		send_bit (byte & i);
		if(byte & i) parity = !parity;
	}

	// Sende Even Parity Bit
	send_bit(parity);
    1a8a:	81 2f       	mov	r24, r17
    1a8c:	81 70       	andi	r24, 0x01	; 1
    1a8e:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <send_bit>
	// make sure the parity bit gets its full hold time
	while(!bit_is_sent); // wait until last bit was sent
    1a92:	80 91 04 01 	lds	r24, 0x0104
    1a96:	88 23       	and	r24, r24
    1a98:	e1 f3       	breq	.-8      	; 0x1a92 <comm_transmit_byte+0x70>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a9a:	8d e5       	ldi	r24, 0x5D	; 93
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	01 97       	sbiw	r24, 0x01	; 1
    1aa0:	f1 f7       	brne	.-4      	; 0x1a9e <comm_transmit_byte+0x7c>
	_delay_loop_2(372/4); // 1 ETU

	ClrBit(TCCR1B, CS10); // Set clock source to none = disable timer
    1aa2:	80 91 81 00 	lds	r24, 0x0081
    1aa6:	8e 7f       	andi	r24, 0xFE	; 254
    1aa8:	80 93 81 00 	sts	0x0081, r24

	// In Empfangsmodus gehen
	set_mode_receive();
}
    1aac:	df 91       	pop	r29
    1aae:	cf 91       	pop	r28
    1ab0:	1f 91       	pop	r17
    1ab2:	0f 91       	pop	r16
    1ab4:	ff 90       	pop	r15
    1ab6:	ef 90       	pop	r14
    1ab8:	df 90       	pop	r13
	_delay_loop_2(372/4); // 1 ETU

	ClrBit(TCCR1B, CS10); // Set clock source to none = disable timer

	// In Empfangsmodus gehen
	set_mode_receive();
    1aba:	0c 94 cb 0c 	jmp	0x1996	; 0x1996 <set_mode_receive>

00001abe <comm_transmit_bytes>:
	bit_is_sent = false; // we are "blocking" the pin
	next_bit_to_send = bit; // this bit will be sent in about 372 cycles
}

void comm_transmit_bytes(uint8_t* bytes, uint8_t length)
{
    1abe:	0f 93       	push	r16
    1ac0:	1f 93       	push	r17
    1ac2:	cf 93       	push	r28
    1ac4:	df 93       	push	r29
    1ac6:	1f 92       	push	r1
    1ac8:	cd b7       	in	r28, 0x3d	; 61
    1aca:	de b7       	in	r29, 0x3e	; 62
	while(length--) comm_transmit_byte(*(bytes++));
    1acc:	8c 01       	movw	r16, r24
    1ace:	68 0f       	add	r22, r24
    1ad0:	60 17       	cp	r22, r16
    1ad2:	41 f0       	breq	.+16     	; 0x1ae4 <comm_transmit_bytes+0x26>
    1ad4:	f8 01       	movw	r30, r16
    1ad6:	81 91       	ld	r24, Z+
    1ad8:	8f 01       	movw	r16, r30
    1ada:	69 83       	std	Y+1, r22	; 0x01
    1adc:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <comm_transmit_byte>
    1ae0:	69 81       	ldd	r22, Y+1	; 0x01
    1ae2:	f6 cf       	rjmp	.-20     	; 0x1ad0 <comm_transmit_bytes+0x12>
}
    1ae4:	0f 90       	pop	r0
    1ae6:	df 91       	pop	r29
    1ae8:	cf 91       	pop	r28
    1aea:	1f 91       	pop	r17
    1aec:	0f 91       	pop	r16
    1aee:	08 95       	ret

00001af0 <comm_receive_byte>:
	set_mode_receive();
}

uint8_t comm_receive_byte()
{
	set_mode_receive();
    1af0:	0e 94 cb 0c 	call	0x1996	; 0x1996 <set_mode_receive>
	while(!byte_is_received);
    1af4:	80 91 5f 01 	lds	r24, 0x015F
    1af8:	88 23       	and	r24, r24
    1afa:	e1 f3       	breq	.-8      	; 0x1af4 <comm_receive_byte+0x4>
	return byte_being_received;
    1afc:	80 91 60 01 	lds	r24, 0x0160
}
    1b00:	08 95       	ret

00001b02 <__vector_8>:
// approximately two 32-bit integer values every second.
//
// The pool is implemented as an 8 value circular buffer
volatile bool wdt_tcnt_buffer_ready = false;

ISR(WDT_vect) {
    1b02:	1f 92       	push	r1
    1b04:	0f 92       	push	r0
    1b06:	0f b6       	in	r0, 0x3f	; 63
    1b08:	0f 92       	push	r0
    1b0a:	11 24       	eor	r1, r1
    1b0c:	8f 93       	push	r24
    1b0e:	9f 93       	push	r25
    1b10:	ef 93       	push	r30
    1b12:	ff 93       	push	r31
	if(!wdt_tcnt_buffer_ready)
    1b14:	80 91 63 01 	lds	r24, 0x0163
    1b18:	81 11       	cpse	r24, r1
    1b1a:	12 c0       	rjmp	.+36     	; 0x1b40 <__vector_8+0x3e>
	{
		WDT_buffer[WDT_buffer_position] = TCNT0;
    1b1c:	80 91 d6 01 	lds	r24, 0x01D6
    1b20:	96 b5       	in	r25, 0x26	; 38
    1b22:	e8 2f       	mov	r30, r24
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	ee 54       	subi	r30, 0x4E	; 78
    1b28:	fe 4f       	sbci	r31, 0xFE	; 254
    1b2a:	90 83       	st	Z, r25
		WDT_buffer_position++;// = (WDT_buffer_position+1) % WDT_BUFFER_SIZE; // every time the WDT interrupt is triggered
    1b2c:	8f 5f       	subi	r24, 0xFF	; 255
    1b2e:	80 93 d6 01 	sts	0x01D6, r24

		if (WDT_buffer_position >= WDT_BUFFER_SIZE)
    1b32:	80 32       	cpi	r24, 0x20	; 32
    1b34:	28 f0       	brcs	.+10     	; 0x1b40 <__vector_8+0x3e>
		{
			wdt_tcnt_buffer_ready = true;
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	80 93 63 01 	sts	0x0163, r24
			WDT_buffer_position = 0; // Start collecting the next 32 bytes of Timer 1 counts
    1b3c:	10 92 d6 01 	sts	0x01D6, r1
		}
	}

	// don't go to system reset mode on the next wdt interrupt
	_WD_CONTROL_REG = _BV(WDIE);
    1b40:	80 e4       	ldi	r24, 0x40	; 64
    1b42:	80 93 60 00 	sts	0x0060, r24


}
    1b46:	ff 91       	pop	r31
    1b48:	ef 91       	pop	r30
    1b4a:	9f 91       	pop	r25
    1b4c:	8f 91       	pop	r24
    1b4e:	0f 90       	pop	r0
    1b50:	0f be       	out	0x3f, r0	; 63
    1b52:	0f 90       	pop	r0
    1b54:	1f 90       	pop	r1
    1b56:	18 95       	reti

00001b58 <entropy_do_jenkins>:

void entropy_do_jenkins()
{
	if (wdt_tcnt_buffer_ready && entropy_pool_count < 4)
    1b58:	80 91 63 01 	lds	r24, 0x0163
    1b5c:	88 23       	and	r24, r24
    1b5e:	09 f4       	brne	.+2      	; 0x1b62 <entropy_do_jenkins+0xa>
    1b60:	55 c0       	rjmp	.+170    	; 0x1c0c <entropy_do_jenkins+0xb4>
    1b62:	80 91 d7 01 	lds	r24, 0x01D7
    1b66:	84 30       	cpi	r24, 0x04	; 4
    1b68:	08 f0       	brcs	.+2      	; 0x1b6c <entropy_do_jenkins+0x14>
    1b6a:	50 c0       	rjmp	.+160    	; 0x1c0c <entropy_do_jenkins+0xb4>
	{
		uint32_t hash = entropy_pool[entropy_pool_count];
    1b6c:	e0 91 d7 01 	lds	r30, 0x01D7
    1b70:	24 e0       	ldi	r18, 0x04	; 4
    1b72:	e2 9f       	mul	r30, r18
    1b74:	f0 01       	movw	r30, r0
    1b76:	11 24       	eor	r1, r1
    1b78:	e8 52       	subi	r30, 0x28	; 40
    1b7a:	fe 4f       	sbci	r31, 0xFE	; 254
    1b7c:	20 81       	ld	r18, Z
    1b7e:	31 81       	ldd	r19, Z+1	; 0x01
    1b80:	42 81       	ldd	r20, Z+2	; 0x02
    1b82:	53 81       	ldd	r21, Z+3	; 0x03
    1b84:	e2 eb       	ldi	r30, 0xB2	; 178
    1b86:	f1 e0       	ldi	r31, 0x01	; 1

		for (uint8_t i = 0; i < WDT_BUFFER_SIZE; ++i) {
			hash += WDT_buffer[i];
    1b88:	81 91       	ld	r24, Z+
    1b8a:	28 0f       	add	r18, r24
    1b8c:	31 1d       	adc	r19, r1
    1b8e:	41 1d       	adc	r20, r1
    1b90:	51 1d       	adc	r21, r1
			hash +=	(hash << 10);
    1b92:	a1 e0       	ldi	r26, 0x01	; 1
    1b94:	b4 e0       	ldi	r27, 0x04	; 4
    1b96:	0e 94 09 11 	call	0x2212	; 0x2212 <__muluhisi3>
			hash ^=	(hash >> 6);
    1b9a:	9b 01       	movw	r18, r22
    1b9c:	ac 01       	movw	r20, r24
    1b9e:	a6 e0       	ldi	r26, 0x06	; 6
    1ba0:	56 95       	lsr	r21
    1ba2:	47 95       	ror	r20
    1ba4:	37 95       	ror	r19
    1ba6:	27 95       	ror	r18
    1ba8:	aa 95       	dec	r26
    1baa:	d1 f7       	brne	.-12     	; 0x1ba0 <entropy_do_jenkins+0x48>
    1bac:	26 27       	eor	r18, r22
    1bae:	37 27       	eor	r19, r23
    1bb0:	48 27       	eor	r20, r24
    1bb2:	59 27       	eor	r21, r25
{
	if (wdt_tcnt_buffer_ready && entropy_pool_count < 4)
	{
		uint32_t hash = entropy_pool[entropy_pool_count];

		for (uint8_t i = 0; i < WDT_BUFFER_SIZE; ++i) {
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	e2 3d       	cpi	r30, 0xD2	; 210
    1bb8:	f8 07       	cpc	r31, r24
    1bba:	31 f7       	brne	.-52     	; 0x1b88 <entropy_do_jenkins+0x30>
			hash += WDT_buffer[i];
			hash +=	(hash << 10);
			hash ^=	(hash >> 6);
		}

		hash += (hash << 3);
    1bbc:	a9 e0       	ldi	r26, 0x09	; 9
    1bbe:	b0 e0       	ldi	r27, 0x00	; 0
    1bc0:	0e 94 09 11 	call	0x2212	; 0x2212 <__muluhisi3>
		hash ^= (hash >> 11);
    1bc4:	9b 01       	movw	r18, r22
    1bc6:	ac 01       	movw	r20, r24
    1bc8:	eb e0       	ldi	r30, 0x0B	; 11
    1bca:	56 95       	lsr	r21
    1bcc:	47 95       	ror	r20
    1bce:	37 95       	ror	r19
    1bd0:	27 95       	ror	r18
    1bd2:	ea 95       	dec	r30
    1bd4:	d1 f7       	brne	.-12     	; 0x1bca <entropy_do_jenkins+0x72>
    1bd6:	26 27       	eor	r18, r22
    1bd8:	37 27       	eor	r19, r23
    1bda:	48 27       	eor	r20, r24
    1bdc:	59 27       	eor	r21, r25
		hash += (hash << 15);
    1bde:	a1 e0       	ldi	r26, 0x01	; 1
    1be0:	b0 e8       	ldi	r27, 0x80	; 128
    1be2:	0e 94 09 11 	call	0x2212	; 0x2212 <__muluhisi3>

		entropy_pool[entropy_pool_count] = hash;
    1be6:	e0 91 d7 01 	lds	r30, 0x01D7
    1bea:	24 e0       	ldi	r18, 0x04	; 4
    1bec:	e2 9f       	mul	r30, r18
    1bee:	f0 01       	movw	r30, r0
    1bf0:	11 24       	eor	r1, r1
    1bf2:	e8 52       	subi	r30, 0x28	; 40
    1bf4:	fe 4f       	sbci	r31, 0xFE	; 254
    1bf6:	60 83       	st	Z, r22
    1bf8:	71 83       	std	Z+1, r23	; 0x01
    1bfa:	82 83       	std	Z+2, r24	; 0x02
    1bfc:	93 83       	std	Z+3, r25	; 0x03

		wdt_tcnt_buffer_ready = false;
    1bfe:	10 92 63 01 	sts	0x0163, r1
		entropy_pool_count++;
    1c02:	80 91 d7 01 	lds	r24, 0x01D7
    1c06:	8f 5f       	subi	r24, 0xFF	; 255
    1c08:	80 93 d7 01 	sts	0x01D7, r24
    1c0c:	08 95       	ret

00001c0e <entropy_init>:
// This function initializes the global variables needed to implement the circular entropy pool and
// the buffer that holds the raw Timer 1 values that are used to create the entropy pool.  It then
// Initializes the Watch Dog Timer (WDT) to perform an interrupt every 2048 clock cycles, (about
// 16 ms) which is as fast as it can be set.
void entropy_init() {
	WDT_buffer_position = 0;
    1c0e:	10 92 d6 01 	sts	0x01D6, r1
	entropy_pool_start = 0;
    1c12:	10 92 b1 01 	sts	0x01B1, r1
	entropy_pool_count = 0;
    1c16:	10 92 d7 01 	sts	0x01D7, r1

	MCUSR = 0; // Use the MCU status register to reset flags for WDR, BOR, EXTR, and POWR
    1c1a:	14 be       	out	0x34, r1	; 52
	// WDT control register, This sets the Watchdog Change Enable (WDCE) flag, which is
	// needed to set the Watchdog system reset (WDE) enable and the Watchdog interrupt enable (WDIE)
	_WD_CONTROL_REG |= _BV(_WD_CHANGE_BIT) | _BV(WDE);
    1c1c:	e0 e6       	ldi	r30, 0x60	; 96
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	88 61       	ori	r24, 0x18	; 24
    1c24:	80 83       	st	Z, r24
	_WD_CONTROL_REG = _BV(WDIE);
    1c26:	80 e4       	ldi	r24, 0x40	; 64
    1c28:	80 83       	st	Z, r24

	TCNT0 = 0;
    1c2a:	16 bc       	out	0x26, r1	; 38
	SetBit(TCCR0B, CS00);
    1c2c:	85 b5       	in	r24, 0x25	; 37
    1c2e:	81 60       	ori	r24, 0x01	; 1
    1c30:	85 bd       	out	0x25, r24	; 37
    1c32:	08 95       	ret

00001c34 <entropy_deinit>:
}

void entropy_deinit()
{
	// Stop Timer0
	ClrBit(TCCR0B, CS00);
    1c34:	85 b5       	in	r24, 0x25	; 37
    1c36:	8e 7f       	andi	r24, 0xFE	; 254
    1c38:	85 bd       	out	0x25, r24	; 37

	// Stop WDT
	MCUSR = 0; // Use the MCU status register to reset flags for WDR, BOR, EXTR, and POWR
    1c3a:	14 be       	out	0x34, r1	; 52
	// WDT control register, This sets the Watchdog Change Enable (WDCE) flag, which is
	// needed to set the Watchdog system reset (WDE) enable and the Watchdog interrupt enable (WDIE)
	_WD_CONTROL_REG |= _BV(_WD_CHANGE_BIT) & ~_BV(WDE);
    1c3c:	e0 e6       	ldi	r30, 0x60	; 96
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	80 61       	ori	r24, 0x10	; 16
    1c44:	80 83       	st	Z, r24
	_WD_CONTROL_REG = 0x00;//_BV(WDIE);
    1c46:	10 82       	st	Z, r1
    1c48:	08 95       	ret

00001c4a <entropy_eeprom_renew>:
	}
}


void entropy_eeprom_renew()
{
    1c4a:	af 92       	push	r10
    1c4c:	bf 92       	push	r11
    1c4e:	cf 92       	push	r12
    1c50:	df 92       	push	r13
    1c52:	ef 92       	push	r14
    1c54:	ff 92       	push	r15
    1c56:	0f 93       	push	r16
    1c58:	1f 93       	push	r17
    1c5a:	cf 93       	push	r28
    1c5c:	df 93       	push	r29

	if(entropy_already_renewed_in_session)
    1c5e:	80 91 64 01 	lds	r24, 0x0164
    1c62:	81 11       	cpse	r24, r1
    1c64:	41 c0       	rjmp	.+130    	; 0x1ce8 <entropy_eeprom_renew+0x9e>
		return;

	// create random from cached watchdog-timer-jitters (if now already done)
	entropy_do_jenkins();
    1c66:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <entropy_do_jenkins>

	// do we already have 4*32bits?
	if(entropy_pool_count >= 4) // number of unsigned long values in the entropy pool
    1c6a:	80 91 d7 01 	lds	r24, 0x01D7
    1c6e:	84 30       	cpi	r24, 0x04	; 4
    1c70:	d8 f1       	brcs	.+118    	; 0x1ce8 <entropy_eeprom_renew+0x9e>
    1c72:	00 e0       	ldi	r16, 0x00	; 0
    1c74:	10 e0       	ldi	r17, 0x00	; 0
    1c76:	c0 e0       	ldi	r28, 0x00	; 0
    1c78:	d0 e0       	ldi	r29, 0x00	; 0
	{
		uint8_t* addr = 0;

		for(uint8_t i = 0; i <4 ; i++)
		{
			uint32_t hash = entropy_pool[i];
    1c7a:	f8 01       	movw	r30, r16
    1c7c:	ee 0f       	add	r30, r30
    1c7e:	ff 1f       	adc	r31, r31
    1c80:	ee 0f       	add	r30, r30
    1c82:	ff 1f       	adc	r31, r31
    1c84:	e8 52       	subi	r30, 0x28	; 40
    1c86:	fe 4f       	sbci	r31, 0xFE	; 254
    1c88:	c0 80       	ld	r12, Z
    1c8a:	d1 80       	ldd	r13, Z+1	; 0x01
    1c8c:	e2 80       	ldd	r14, Z+2	; 0x02
    1c8e:	f3 80       	ldd	r15, Z+3	; 0x03
			eeprom_write_byte(addr++, (hash & 0xFF000000)>>24);
    1c90:	6f 2d       	mov	r22, r15
    1c92:	77 27       	eor	r23, r23
    1c94:	88 27       	eor	r24, r24
    1c96:	99 27       	eor	r25, r25
    1c98:	ce 01       	movw	r24, r28
    1c9a:	0e 94 aa 13 	call	0x2754	; 0x2754 <__eewr_byte_m644>
    1c9e:	5e 01       	movw	r10, r28
			eeprom_write_byte(addr++, (hash & 0x00FF0000)>>16);
    1ca0:	6e 2d       	mov	r22, r14
    1ca2:	ce 01       	movw	r24, r28
    1ca4:	01 96       	adiw	r24, 0x01	; 1
    1ca6:	0e 94 aa 13 	call	0x2754	; 0x2754 <__eewr_byte_m644>
			eeprom_write_byte(addr++, (hash & 0x0000FF00)>> 8);
    1caa:	6d 2d       	mov	r22, r13
    1cac:	ce 01       	movw	r24, r28
    1cae:	02 96       	adiw	r24, 0x02	; 2
    1cb0:	0e 94 aa 13 	call	0x2754	; 0x2754 <__eewr_byte_m644>
    1cb4:	24 96       	adiw	r28, 0x04	; 4
			eeprom_write_byte(addr++, (hash & 0x000000FF)    );
    1cb6:	6c 2d       	mov	r22, r12
    1cb8:	c5 01       	movw	r24, r10
    1cba:	03 96       	adiw	r24, 0x03	; 3
    1cbc:	0e 94 aa 13 	call	0x2754	; 0x2754 <__eewr_byte_m644>
    1cc0:	0f 5f       	subi	r16, 0xFF	; 255
    1cc2:	1f 4f       	sbci	r17, 0xFF	; 255
	// do we already have 4*32bits?
	if(entropy_pool_count >= 4) // number of unsigned long values in the entropy pool
	{
		uint8_t* addr = 0;

		for(uint8_t i = 0; i <4 ; i++)
    1cc4:	c0 31       	cpi	r28, 0x10	; 16
    1cc6:	d1 05       	cpc	r29, r1
    1cc8:	c1 f6       	brne	.-80     	; 0x1c7a <entropy_eeprom_renew+0x30>
			eeprom_write_byte(addr++, (hash & 0x00FF0000)>>16);
			eeprom_write_byte(addr++, (hash & 0x0000FF00)>> 8);
			eeprom_write_byte(addr++, (hash & 0x000000FF)    );
		}

		entropy_already_renewed_in_session = true;
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	80 93 64 01 	sts	0x0164, r24

		entropy_deinit();
	}
}
    1cd0:	df 91       	pop	r29
    1cd2:	cf 91       	pop	r28
    1cd4:	1f 91       	pop	r17
    1cd6:	0f 91       	pop	r16
    1cd8:	ff 90       	pop	r15
    1cda:	ef 90       	pop	r14
    1cdc:	df 90       	pop	r13
    1cde:	cf 90       	pop	r12
    1ce0:	bf 90       	pop	r11
    1ce2:	af 90       	pop	r10
			eeprom_write_byte(addr++, (hash & 0x000000FF)    );
		}

		entropy_already_renewed_in_session = true;

		entropy_deinit();
    1ce4:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <entropy_deinit>
	}
}
    1ce8:	df 91       	pop	r29
    1cea:	cf 91       	pop	r28
    1cec:	1f 91       	pop	r17
    1cee:	0f 91       	pop	r16
    1cf0:	ff 90       	pop	r15
    1cf2:	ef 90       	pop	r14
    1cf4:	df 90       	pop	r13
    1cf6:	cf 90       	pop	r12
    1cf8:	bf 90       	pop	r11
    1cfa:	af 90       	pop	r10
    1cfc:	08 95       	ret

00001cfe <__vector_16>:
#include "uart.h"

bool eeprom_rewritten = false;

ISR(TIMER0_COMPA_vect)
{
    1cfe:	1f 92       	push	r1
    1d00:	0f 92       	push	r0
    1d02:	0f b6       	in	r0, 0x3f	; 63
    1d04:	0f 92       	push	r0
    1d06:	11 24       	eor	r1, r1
    1d08:	2f 93       	push	r18
    1d0a:	3f 93       	push	r19
    1d0c:	4f 93       	push	r20
    1d0e:	5f 93       	push	r21
    1d10:	6f 93       	push	r22
    1d12:	7f 93       	push	r23
    1d14:	8f 93       	push	r24
    1d16:	9f 93       	push	r25
    1d18:	af 93       	push	r26
    1d1a:	bf 93       	push	r27
    1d1c:	ef 93       	push	r30
    1d1e:	ff 93       	push	r31
	SetBit(PORTD, PD0);
    1d20:	58 9a       	sbi	0x0b, 0	; 11

	uint8_t r = rand() & 0xFF;
    1d22:	0e 94 85 11 	call	0x230a	; 0x230a <rand>
//	_delay_loop_1(r); //% (MAX_DELAY_IN_HIDING_INT/3)
	OCR0A = r; //random() & 0xFF; //MIN_DELAY_BETWEEN_HIDING_INT + (random() % (MAX_DELAY_BETWEEN_HIDING_INT-MIN_DELAY_BETWEEN_HIDING_INT));
    1d26:	87 bd       	out	0x27, r24	; 39

	ClrBit(PORTD, PD0);
    1d28:	58 98       	cbi	0x0b, 0	; 11
}
    1d2a:	ff 91       	pop	r31
    1d2c:	ef 91       	pop	r30
    1d2e:	bf 91       	pop	r27
    1d30:	af 91       	pop	r26
    1d32:	9f 91       	pop	r25
    1d34:	8f 91       	pop	r24
    1d36:	7f 91       	pop	r23
    1d38:	6f 91       	pop	r22
    1d3a:	5f 91       	pop	r21
    1d3c:	4f 91       	pop	r20
    1d3e:	3f 91       	pop	r19
    1d40:	2f 91       	pop	r18
    1d42:	0f 90       	pop	r0
    1d44:	0f be       	out	0x3f, r0	; 63
    1d46:	0f 90       	pop	r0
    1d48:	1f 90       	pop	r1
    1d4a:	18 95       	reti

00001d4c <hiding_start_timer>:

	ClrBit(PORTD, PD0);
}
*/
void hiding_start_timer()
{
    1d4c:	08 95       	ret

00001d4e <hiding_stop_timer>:
}

void hiding_stop_timer()
{
	ClrBit(TCCR0B, CS00);
    1d4e:	85 b5       	in	r24, 0x25	; 37
    1d50:	8e 7f       	andi	r24, 0xFE	; 254
    1d52:	85 bd       	out	0x25, r24	; 37
    1d54:	08 95       	ret

00001d56 <main>:
#include "rng.h"


int main()
{
	tparam = (void*) &tparam_asm;
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	91 e0       	ldi	r25, 0x01	; 1
    1d5a:	90 93 ed 01 	sts	0x01ED, r25
    1d5e:	80 93 ec 01 	sts	0x01EC, r24
	// Setup
	led_init();
    1d62:	8f ef       	ldi	r24, 0xFF	; 255
    1d64:	81 b9       	out	0x01, r24	; 1
	trigger_init();
    1d66:	24 9a       	sbi	0x04, 4	; 4
    1d68:	2c 98       	cbi	0x05, 4	; 5
	entropy_init();
    1d6a:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <entropy_init>
	uart_init();
    1d6e:	0e 94 dd 10 	call	0x21ba	; 0x21ba <uart_init>
	rng_init();
    1d72:	0e 94 38 10 	call	0x2070	; 0x2070 <rng_init>

	// Globally enable interrupts
	sei();
    1d76:	78 94       	sei

	led_set(MCUSR);
    1d78:	84 b7       	in	r24, 0x34	; 52
    1d7a:	82 b9       	out	0x02, r24	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1d7c:	2f ef       	ldi	r18, 0xFF	; 255
    1d7e:	3d ee       	ldi	r19, 0xED	; 237
    1d80:	42 e0       	ldi	r20, 0x02	; 2
    1d82:	21 50       	subi	r18, 0x01	; 1
    1d84:	30 40       	sbci	r19, 0x00	; 0
    1d86:	40 40       	sbci	r20, 0x00	; 0
    1d88:	e1 f7       	brne	.-8      	; 0x1d82 <main+0x2c>
    1d8a:	00 c0       	rjmp	.+0      	; 0x1d8c <main+0x36>
    1d8c:	00 00       	nop
	_delay_ms(200);
	led_set(0);
    1d8e:	12 b8       	out	0x02, r1	; 2
    1d90:	5f ef       	ldi	r21, 0xFF	; 255
    1d92:	8d ee       	ldi	r24, 0xED	; 237
    1d94:	92 e0       	ldi	r25, 0x02	; 2
    1d96:	51 50       	subi	r21, 0x01	; 1
    1d98:	80 40       	sbci	r24, 0x00	; 0
    1d9a:	90 40       	sbci	r25, 0x00	; 0
    1d9c:	e1 f7       	brne	.-8      	; 0x1d96 <main+0x40>
    1d9e:	00 c0       	rjmp	.+0      	; 0x1da0 <main+0x4a>
    1da0:	00 00       	nop
    1da2:	88 e0       	ldi	r24, 0x08	; 8
    1da4:	90 e0       	ldi	r25, 0x00	; 0
	_delay_ms(200);

	for (uint8_t i = 1; i != 0; i*=2) {
    1da6:	21 e0       	ldi	r18, 0x01	; 1
		led_set(i);
    1da8:	22 b9       	out	0x02, r18	; 2
    1daa:	3f ef       	ldi	r19, 0xFF	; 255
    1dac:	46 e7       	ldi	r20, 0x76	; 118
    1dae:	51 e0       	ldi	r21, 0x01	; 1
    1db0:	31 50       	subi	r19, 0x01	; 1
    1db2:	40 40       	sbci	r20, 0x00	; 0
    1db4:	50 40       	sbci	r21, 0x00	; 0
    1db6:	e1 f7       	brne	.-8      	; 0x1db0 <main+0x5a>
    1db8:	00 c0       	rjmp	.+0      	; 0x1dba <main+0x64>
    1dba:	00 00       	nop
	led_set(MCUSR);
	_delay_ms(200);
	led_set(0);
	_delay_ms(200);

	for (uint8_t i = 1; i != 0; i*=2) {
    1dbc:	22 0f       	add	r18, r18
    1dbe:	01 97       	sbiw	r24, 0x01	; 1
    1dc0:	00 97       	sbiw	r24, 0x00	; 0
    1dc2:	91 f7       	brne	.-28     	; 0x1da8 <main+0x52>
	}


	for(;;)
	{
		entropy_eeprom_renew();
    1dc4:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <entropy_eeprom_renew>


		uint8_t r = skein_rand(tparam);
    1dc8:	e0 91 8c 01 	lds	r30, 0x018C
    1dcc:	ee 23       	and	r30, r30
    1dce:	41 f0       	breq	.+16     	; 0x1de0 <main+0x8a>
    1dd0:	e1 50       	subi	r30, 0x01	; 1
    1dd2:	e0 93 8c 01 	sts	0x018C, r30
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	e4 59       	subi	r30, 0x94	; 148
    1dda:	fe 4f       	sbci	r31, 0xFE	; 254
    1ddc:	80 81       	ld	r24, Z
    1dde:	06 c0       	rjmp	.+12     	; 0x1dec <main+0x96>
    1de0:	80 91 ec 01 	lds	r24, 0x01EC
    1de4:	90 91 ed 01 	lds	r25, 0x01ED
    1de8:	0e 94 1e 0a 	call	0x143c	; 0x143c <skein_rand_full>
		led_set(r);
    1dec:	82 b9       	out	0x02, r24	; 2
		uart_putc(r);//(r%('~'-'0'))+'0');
    1dee:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <uart_putc>

	}
    1df2:	e8 cf       	rjmp	.-48     	; 0x1dc4 <main+0x6e>

00001df4 <protocol_receive_expected_data>:
	const uint8_t response[] = {0x90, 0x00};
	comm_transmit_bytes((uint8_t*) response, SIZE(response));
}

void protocol_receive_expected_data(const uint8_t* data, const uint8_t data_length)
{
    1df4:	7f 92       	push	r7
    1df6:	8f 92       	push	r8
    1df8:	9f 92       	push	r9
    1dfa:	af 92       	push	r10
    1dfc:	bf 92       	push	r11
    1dfe:	cf 92       	push	r12
    1e00:	df 92       	push	r13
    1e02:	ef 92       	push	r14
    1e04:	ff 92       	push	r15
    1e06:	0f 93       	push	r16
    1e08:	1f 93       	push	r17
    1e0a:	cf 93       	push	r28
    1e0c:	df 93       	push	r29
    1e0e:	cd b7       	in	r28, 0x3d	; 61
    1e10:	de b7       	in	r29, 0x3e	; 62
    1e12:	e2 97       	sbiw	r28, 0x32	; 50
    1e14:	0f b6       	in	r0, 0x3f	; 63
    1e16:	f8 94       	cli
    1e18:	de bf       	out	0x3e, r29	; 62
    1e1a:	0f be       	out	0x3f, r0	; 63
    1e1c:	cd bf       	out	0x3d, r28	; 61
    1e1e:	6c 01       	movw	r12, r24
	for(int i = 0; i < data_length; i++)
    1e20:	00 e0       	ldi	r16, 0x00	; 0
    1e22:	10 e0       	ldi	r17, 0x00	; 0
    1e24:	86 2e       	mov	r8, r22
    1e26:	91 2c       	mov	r9, r1
	{
		uint8_t byte_expected = data[i];
		uint8_t byte_received = comm_receive_byte();
		if(byte_expected != byte_received){
			char buf[50];
			sprintf(buf, "Received %02X instead of %02X at byte %d", byte_received, byte_expected, i);
    1e28:	82 e1       	ldi	r24, 0x12	; 18
    1e2a:	a8 2e       	mov	r10, r24
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	b8 2e       	mov	r11, r24
    1e30:	ce 01       	movw	r24, r28
    1e32:	01 96       	adiw	r24, 0x01	; 1
    1e34:	7c 01       	movw	r14, r24
	comm_transmit_bytes((uint8_t*) response, SIZE(response));
}

void protocol_receive_expected_data(const uint8_t* data, const uint8_t data_length)
{
	for(int i = 0; i < data_length; i++)
    1e36:	08 15       	cp	r16, r8
    1e38:	19 05       	cpc	r17, r9
    1e3a:	fc f4       	brge	.+62     	; 0x1e7a <protocol_receive_expected_data+0x86>
	{
		uint8_t byte_expected = data[i];
    1e3c:	f6 01       	movw	r30, r12
    1e3e:	71 90       	ld	r7, Z+
    1e40:	6f 01       	movw	r12, r30
		uint8_t byte_received = comm_receive_byte();
    1e42:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <comm_receive_byte>
		if(byte_expected != byte_received){
    1e46:	78 16       	cp	r7, r24
    1e48:	a9 f0       	breq	.+42     	; 0x1e74 <protocol_receive_expected_data+0x80>
			char buf[50];
			sprintf(buf, "Received %02X instead of %02X at byte %d", byte_received, byte_expected, i);
    1e4a:	1f 93       	push	r17
    1e4c:	0f 93       	push	r16
    1e4e:	1f 92       	push	r1
    1e50:	7f 92       	push	r7
    1e52:	1f 92       	push	r1
    1e54:	8f 93       	push	r24
    1e56:	bf 92       	push	r11
    1e58:	af 92       	push	r10
    1e5a:	ff 92       	push	r15
    1e5c:	ef 92       	push	r14
    1e5e:	0e 94 ae 11 	call	0x235c	; 0x235c <sprintf>
			assert(false, buf); // Receive Unexpected Data
    1e62:	b7 01       	movw	r22, r14
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	0e 94 03 11 	call	0x2206	; 0x2206 <assert>
    1e6a:	0f b6       	in	r0, 0x3f	; 63
    1e6c:	f8 94       	cli
    1e6e:	de bf       	out	0x3e, r29	; 62
    1e70:	0f be       	out	0x3f, r0	; 63
    1e72:	cd bf       	out	0x3d, r28	; 61
	comm_transmit_bytes((uint8_t*) response, SIZE(response));
}

void protocol_receive_expected_data(const uint8_t* data, const uint8_t data_length)
{
	for(int i = 0; i < data_length; i++)
    1e74:	0f 5f       	subi	r16, 0xFF	; 255
    1e76:	1f 4f       	sbci	r17, 0xFF	; 255
    1e78:	de cf       	rjmp	.-68     	; 0x1e36 <protocol_receive_expected_data+0x42>
			char buf[50];
			sprintf(buf, "Received %02X instead of %02X at byte %d", byte_received, byte_expected, i);
			assert(false, buf); // Receive Unexpected Data
		}
	}
}
    1e7a:	e2 96       	adiw	r28, 0x32	; 50
    1e7c:	0f b6       	in	r0, 0x3f	; 63
    1e7e:	f8 94       	cli
    1e80:	de bf       	out	0x3e, r29	; 62
    1e82:	0f be       	out	0x3f, r0	; 63
    1e84:	cd bf       	out	0x3d, r28	; 61
    1e86:	df 91       	pop	r29
    1e88:	cf 91       	pop	r28
    1e8a:	1f 91       	pop	r17
    1e8c:	0f 91       	pop	r16
    1e8e:	ff 90       	pop	r15
    1e90:	ef 90       	pop	r14
    1e92:	df 90       	pop	r13
    1e94:	cf 90       	pop	r12
    1e96:	bf 90       	pop	r11
    1e98:	af 90       	pop	r10
    1e9a:	9f 90       	pop	r9
    1e9c:	8f 90       	pop	r8
    1e9e:	7f 90       	pop	r7
    1ea0:	08 95       	ret

00001ea2 <protocol_get_auth_challenge>:
	protocol_send_auth_response(auth_response);
}


void protocol_get_auth_challenge(uint8_t* auth_challenge)
{
    1ea2:	ef 92       	push	r14
    1ea4:	ff 92       	push	r15
    1ea6:	0f 93       	push	r16
    1ea8:	1f 93       	push	r17
    1eaa:	cf 93       	push	r28
    1eac:	df 93       	push	r29
    1eae:	00 d0       	rcall	.+0      	; 0x1eb0 <protocol_get_auth_challenge+0xe>
    1eb0:	00 d0       	rcall	.+0      	; 0x1eb2 <protocol_get_auth_challenge+0x10>
    1eb2:	1f 92       	push	r1
    1eb4:	cd b7       	in	r28, 0x3d	; 61
    1eb6:	de b7       	in	r29, 0x3e	; 62
    1eb8:	7c 01       	movw	r14, r24
	const uint8_t expected_request[] = {0x88, 0x10, 0x00, 0x00, 0x10};
    1eba:	25 e0       	ldi	r18, 0x05	; 5
    1ebc:	e5 e0       	ldi	r30, 0x05	; 5
    1ebe:	f1 e0       	ldi	r31, 0x01	; 1
    1ec0:	de 01       	movw	r26, r28
    1ec2:	11 96       	adiw	r26, 0x01	; 1
    1ec4:	01 90       	ld	r0, Z+
    1ec6:	0d 92       	st	X+, r0
    1ec8:	2a 95       	dec	r18
    1eca:	e1 f7       	brne	.-8      	; 0x1ec4 <protocol_get_auth_challenge+0x22>
	protocol_receive_expected_data(expected_request, SIZE(expected_request));
    1ecc:	65 e0       	ldi	r22, 0x05	; 5
    1ece:	ce 01       	movw	r24, r28
    1ed0:	01 96       	adiw	r24, 0x01	; 1
    1ed2:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <protocol_receive_expected_data>
    1ed6:	87 01       	movw	r16, r14

	for(int i = 0; i < 16; i++)
    1ed8:	e1 2c       	mov	r14, r1
    1eda:	f1 2c       	mov	r15, r1
	{
		comm_transmit_byte(0xEF);
    1edc:	8f ee       	ldi	r24, 0xEF	; 239
    1ede:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <comm_transmit_byte>
		auth_challenge[i] = comm_receive_byte();
    1ee2:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <comm_receive_byte>
    1ee6:	f8 01       	movw	r30, r16
    1ee8:	81 93       	st	Z+, r24
    1eea:	8f 01       	movw	r16, r30
void protocol_get_auth_challenge(uint8_t* auth_challenge)
{
	const uint8_t expected_request[] = {0x88, 0x10, 0x00, 0x00, 0x10};
	protocol_receive_expected_data(expected_request, SIZE(expected_request));

	for(int i = 0; i < 16; i++)
    1eec:	ff ef       	ldi	r31, 0xFF	; 255
    1eee:	ef 1a       	sub	r14, r31
    1ef0:	ff 0a       	sbc	r15, r31
    1ef2:	80 e1       	ldi	r24, 0x10	; 16
    1ef4:	e8 16       	cp	r14, r24
    1ef6:	f1 04       	cpc	r15, r1
    1ef8:	89 f7       	brne	.-30     	; 0x1edc <protocol_get_auth_challenge+0x3a>
	{
		comm_transmit_byte(0xEF);
		auth_challenge[i] = comm_receive_byte();
	}

}
    1efa:	0f 90       	pop	r0
    1efc:	0f 90       	pop	r0
    1efe:	0f 90       	pop	r0
    1f00:	0f 90       	pop	r0
    1f02:	0f 90       	pop	r0
    1f04:	df 91       	pop	r29
    1f06:	cf 91       	pop	r28
    1f08:	1f 91       	pop	r17
    1f0a:	0f 91       	pop	r16
    1f0c:	ff 90       	pop	r15
    1f0e:	ef 90       	pop	r14
    1f10:	08 95       	ret

00001f12 <protocol_send_auth_response>:

void protocol_send_auth_response(uint8_t* auth_response)
{
    1f12:	0f 93       	push	r16
    1f14:	1f 93       	push	r17
    1f16:	cf 93       	push	r28
    1f18:	df 93       	push	r29
    1f1a:	cd b7       	in	r28, 0x3d	; 61
    1f1c:	de b7       	in	r29, 0x3e	; 62
    1f1e:	27 97       	sbiw	r28, 0x07	; 7
    1f20:	0f b6       	in	r0, 0x3f	; 63
    1f22:	f8 94       	cli
    1f24:	de bf       	out	0x3e, r29	; 62
    1f26:	0f be       	out	0x3f, r0	; 63
    1f28:	cd bf       	out	0x3d, r28	; 61
    1f2a:	8c 01       	movw	r16, r24
	uint8_t expected_request[] = {0x88, 0xC0, 0x00, 0x00, 0x10};
    1f2c:	85 e0       	ldi	r24, 0x05	; 5
    1f2e:	ea e0       	ldi	r30, 0x0A	; 10
    1f30:	f1 e0       	ldi	r31, 0x01	; 1
    1f32:	de 01       	movw	r26, r28
    1f34:	11 96       	adiw	r26, 0x01	; 1
    1f36:	01 90       	ld	r0, Z+
    1f38:	0d 92       	st	X+, r0
    1f3a:	8a 95       	dec	r24
    1f3c:	e1 f7       	brne	.-8      	; 0x1f36 <protocol_send_auth_response+0x24>
	protocol_receive_expected_data(expected_request, SIZE(expected_request));
    1f3e:	65 e0       	ldi	r22, 0x05	; 5
    1f40:	ce 01       	movw	r24, r28
    1f42:	01 96       	adiw	r24, 0x01	; 1
    1f44:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <protocol_receive_expected_data>

	comm_transmit_byte(0xC0);
    1f48:	80 ec       	ldi	r24, 0xC0	; 192
    1f4a:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <comm_transmit_byte>
	comm_transmit_bytes(auth_response, 16); // we know that auth_response will always be 16bytes long.
    1f4e:	60 e1       	ldi	r22, 0x10	; 16
    1f50:	c8 01       	movw	r24, r16
    1f52:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <comm_transmit_bytes>

	const uint8_t response[] = {0x90, 0x00};
    1f56:	80 e9       	ldi	r24, 0x90	; 144
    1f58:	8e 83       	std	Y+6, r24	; 0x06
    1f5a:	1f 82       	std	Y+7, r1	; 0x07
	comm_transmit_bytes((uint8_t*) response, SIZE(response));
    1f5c:	62 e0       	ldi	r22, 0x02	; 2
    1f5e:	ce 01       	movw	r24, r28
    1f60:	06 96       	adiw	r24, 0x06	; 6
    1f62:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <comm_transmit_bytes>
}
    1f66:	27 96       	adiw	r28, 0x07	; 7
    1f68:	0f b6       	in	r0, 0x3f	; 63
    1f6a:	f8 94       	cli
    1f6c:	de bf       	out	0x3e, r29	; 62
    1f6e:	0f be       	out	0x3f, r0	; 63
    1f70:	cd bf       	out	0x3d, r28	; 61
    1f72:	df 91       	pop	r29
    1f74:	cf 91       	pop	r28
    1f76:	1f 91       	pop	r17
    1f78:	0f 91       	pop	r16
    1f7a:	08 95       	ret

00001f7c <protocol_challenge_response>:
#include "entropy.h"
#include "rng.h"


void protocol_challenge_response()
{
    1f7c:	cf 93       	push	r28
    1f7e:	df 93       	push	r29
    1f80:	cd b7       	in	r28, 0x3d	; 61
    1f82:	de b7       	in	r29, 0x3e	; 62
    1f84:	62 97       	sbiw	r28, 0x12	; 18
    1f86:	0f b6       	in	r0, 0x3f	; 63
    1f88:	f8 94       	cli
    1f8a:	de bf       	out	0x3e, r29	; 62
    1f8c:	0f be       	out	0x3f, r0	; 63
    1f8e:	cd bf       	out	0x3d, r28	; 61
	uint8_t auth_challenge[16];

	protocol_get_auth_challenge(auth_challenge);
    1f90:	ce 01       	movw	r24, r28
    1f92:	01 96       	adiw	r24, 0x01	; 1
    1f94:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <protocol_get_auth_challenge>

	uint8_t* auth_response = auth_challenge;

	// Decrypt, and help attackers by pulling the trigger line high during aes.
	trigger_set();
    1f98:	2c 9a       	sbi	0x05, 4	; 5

	trigger_clr();
    1f9a:	2c 98       	cbi	0x05, 4	; 5

	// We are done with our AES here, but this is the only time where are guaranteed some "idle" time because we can decie when we are ready to continue. this is why we do some "heavy" computations here, that would otherwise block our communication ISRs sometimes.
	entropy_eeprom_renew();
    1f9c:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <entropy_eeprom_renew>
	rng_entropy_ring_fill(1024);
    1fa0:	80 e0       	ldi	r24, 0x00	; 0
    1fa2:	94 e0       	ldi	r25, 0x04	; 4
    1fa4:	0e 94 75 10 	call	0x20ea	; 0x20ea <rng_entropy_ring_fill>

	uint8_t response[] = {0x61, 0x10};
    1fa8:	81 e6       	ldi	r24, 0x61	; 97
    1faa:	89 8b       	std	Y+17, r24	; 0x11
    1fac:	80 e1       	ldi	r24, 0x10	; 16
    1fae:	8a 8b       	std	Y+18, r24	; 0x12
	comm_transmit_bytes(response, SIZE(response));
    1fb0:	62 e0       	ldi	r22, 0x02	; 2
    1fb2:	ce 01       	movw	r24, r28
    1fb4:	41 96       	adiw	r24, 0x11	; 17
    1fb6:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <comm_transmit_bytes>

	protocol_send_auth_response(auth_response);
    1fba:	ce 01       	movw	r24, r28
    1fbc:	01 96       	adiw	r24, 0x01	; 1
    1fbe:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <protocol_send_auth_response>
}
    1fc2:	62 96       	adiw	r28, 0x12	; 18
    1fc4:	0f b6       	in	r0, 0x3f	; 63
    1fc6:	f8 94       	cli
    1fc8:	de bf       	out	0x3e, r29	; 62
    1fca:	0f be       	out	0x3f, r0	; 63
    1fcc:	cd bf       	out	0x3d, r28	; 61
    1fce:	df 91       	pop	r29
    1fd0:	cf 91       	pop	r28
    1fd2:	08 95       	ret

00001fd4 <protocol_send_ATR>:
		}
	}
}

void protocol_send_ATR()
{
    1fd4:	cf 93       	push	r28
    1fd6:	df 93       	push	r29
    1fd8:	00 d0       	rcall	.+0      	; 0x1fda <protocol_send_ATR+0x6>
    1fda:	00 d0       	rcall	.+0      	; 0x1fdc <protocol_send_ATR+0x8>
    1fdc:	cd b7       	in	r28, 0x3d	; 61
    1fde:	de b7       	in	r29, 0x3e	; 62
	const uint8_t atr[] = {0x3B, 0x90, 0x11, 0x00}; // Standard ATR Code
    1fe0:	8b e3       	ldi	r24, 0x3B	; 59
    1fe2:	89 83       	std	Y+1, r24	; 0x01
    1fe4:	80 e9       	ldi	r24, 0x90	; 144
    1fe6:	8a 83       	std	Y+2, r24	; 0x02
    1fe8:	81 e1       	ldi	r24, 0x11	; 17
    1fea:	8b 83       	std	Y+3, r24	; 0x03
    1fec:	1c 82       	std	Y+4, r1	; 0x04
	comm_transmit_bytes((uint8_t*) atr, SIZE(atr));
    1fee:	64 e0       	ldi	r22, 0x04	; 4
    1ff0:	ce 01       	movw	r24, r28
    1ff2:	01 96       	adiw	r24, 0x01	; 1
    1ff4:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <comm_transmit_bytes>
}
    1ff8:	0f 90       	pop	r0
    1ffa:	0f 90       	pop	r0
    1ffc:	0f 90       	pop	r0
    1ffe:	0f 90       	pop	r0
    2000:	df 91       	pop	r29
    2002:	cf 91       	pop	r28
    2004:	08 95       	ret

00002006 <rng_wrapper>:
////			newseed[i] = skein_rand(tparam);
////		}
////		skein_rand_reseed(tparam, newseed);
//		rng_counter = 0;
//	}
	uint8_t out = skein_rand(tparam);
    2006:	e0 91 8c 01 	lds	r30, 0x018C
    200a:	ee 23       	and	r30, r30
    200c:	41 f0       	breq	.+16     	; 0x201e <rng_wrapper+0x18>
    200e:	e1 50       	subi	r30, 0x01	; 1
    2010:	e0 93 8c 01 	sts	0x018C, r30
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	e4 59       	subi	r30, 0x94	; 148
    2018:	fe 4f       	sbci	r31, 0xFE	; 254
    201a:	80 81       	ld	r24, Z
    201c:	08 95       	ret
    201e:	80 91 ec 01 	lds	r24, 0x01EC
    2022:	90 91 ed 01 	lds	r25, 0x01ED
    2026:	0c 94 1e 0a 	jmp	0x143c	; 0x143c <skein_rand_full>

0000202a <rng_get_seed_from_eeprom>:
//	uart_putc(out);
	return out;
}

void rng_get_seed_from_eeprom(uint8_t* seed)
{
    202a:	ef 92       	push	r14
    202c:	ff 92       	push	r15
    202e:	0f 93       	push	r16
    2030:	1f 93       	push	r17
    2032:	cf 93       	push	r28
    2034:	df 93       	push	r29
    2036:	ec 01       	movw	r28, r24
    2038:	8c 01       	movw	r16, r24
    203a:	00 5f       	subi	r16, 0xF0	; 240
    203c:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t* baseaddr = 0;
    203e:	80 e0       	ldi	r24, 0x00	; 0
    2040:	90 e0       	ldi	r25, 0x00	; 0

	for(uint8_t i = 0; i < 16; i++)
	{
		seed[i] = eeprom_read_byte((uint8_t*) baseaddr++);
    2042:	7c 01       	movw	r14, r24
    2044:	2f ef       	ldi	r18, 0xFF	; 255
    2046:	e2 1a       	sub	r14, r18
    2048:	f2 0a       	sbc	r15, r18
    204a:	0e 94 a2 13 	call	0x2744	; 0x2744 <__eerd_byte_m644>
    204e:	89 93       	st	Y+, r24
		seed[i+16] = seed[i];
    2050:	f8 01       	movw	r30, r16
    2052:	81 93       	st	Z+, r24
    2054:	8f 01       	movw	r16, r30

void rng_get_seed_from_eeprom(uint8_t* seed)
{
	uint8_t* baseaddr = 0;

	for(uint8_t i = 0; i < 16; i++)
    2056:	f0 e1       	ldi	r31, 0x10	; 16
    2058:	ef 16       	cp	r14, r31
    205a:	f1 04       	cpc	r15, r1
    205c:	11 f0       	breq	.+4      	; 0x2062 <rng_get_seed_from_eeprom+0x38>
	{
		seed[i] = eeprom_read_byte((uint8_t*) baseaddr++);
    205e:	c7 01       	movw	r24, r14
    2060:	f0 cf       	rjmp	.-32     	; 0x2042 <rng_get_seed_from_eeprom+0x18>
		seed[i+16] = seed[i];
//		uart_putc(seed[i]);
	}
}
    2062:	df 91       	pop	r29
    2064:	cf 91       	pop	r28
    2066:	1f 91       	pop	r17
    2068:	0f 91       	pop	r16
    206a:	ff 90       	pop	r15
    206c:	ef 90       	pop	r14
    206e:	08 95       	ret

00002070 <rng_init>:
uint16_t random_ring_start = 0;
uint16_t random_ring_end = 0;
uint8_t rng_counter = 0;

void rng_init()
{
    2070:	1f 93       	push	r17
    2072:	cf 93       	push	r28
    2074:	df 93       	push	r29
    2076:	cd b7       	in	r28, 0x3d	; 61
    2078:	de b7       	in	r29, 0x3e	; 62
    207a:	a0 97       	sbiw	r28, 0x20	; 32
    207c:	0f b6       	in	r0, 0x3f	; 63
    207e:	f8 94       	cli
    2080:	de bf       	out	0x3e, r29	; 62
    2082:	0f be       	out	0x3f, r0	; 63
    2084:	cd bf       	out	0x3d, r28	; 61
	random_ring_start = 0;
    2086:	10 92 6b 01 	sts	0x016B, r1
    208a:	10 92 6a 01 	sts	0x016A, r1
	random_ring_end = 0;
    208e:	10 92 69 01 	sts	0x0169, r1
    2092:	10 92 68 01 	sts	0x0168, r1

	uint8_t seed[32];

	rng_get_seed_from_eeprom(seed);
    2096:	ce 01       	movw	r24, r28
    2098:	01 96       	adiw	r24, 0x01	; 1
    209a:	0e 94 15 10 	call	0x202a	; 0x202a <rng_get_seed_from_eeprom>


	skein_256_256_default_iv();
    209e:	0e 94 b0 0a 	call	0x1560	; 0x1560 <skein_256_256_default_iv>
	skein_rand_seed(tparam, (char*) seed);
    20a2:	be 01       	movw	r22, r28
    20a4:	6f 5f       	subi	r22, 0xFF	; 255
    20a6:	7f 4f       	sbci	r23, 0xFF	; 255
    20a8:	80 91 ec 01 	lds	r24, 0x01EC
    20ac:	90 91 ed 01 	lds	r25, 0x01ED
    20b0:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <skein_rand_seed>

	uint8_t position = rng_wrapper() % 16;
    20b4:	0e 94 03 10 	call	0x2006	; 0x2006 <rng_wrapper>
    20b8:	18 2f       	mov	r17, r24
	uint8_t newseedbyte = rng_wrapper();
    20ba:	0e 94 03 10 	call	0x2006	; 0x2006 <rng_wrapper>


	skein_256_256_default_iv();
	skein_rand_seed(tparam, (char*) seed);

	uint8_t position = rng_wrapper() % 16;
    20be:	1f 70       	andi	r17, 0x0F	; 15
}

void rng_write_seed_to_eeprom_singlebyte(uint8_t seed_index, uint8_t seed)
{
	uint8_t* baseaddr = 0 + seed_index;
	eeprom_write_byte(baseaddr, seed);
    20c0:	68 2f       	mov	r22, r24
    20c2:	81 2f       	mov	r24, r17
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	0e 94 aa 13 	call	0x2754	; 0x2754 <__eewr_byte_m644>

	uint8_t position = rng_wrapper() % 16;
	uint8_t newseedbyte = rng_wrapper();

	rng_write_seed_to_eeprom_singlebyte(position, newseedbyte);
}
    20ca:	a0 96       	adiw	r28, 0x20	; 32
    20cc:	0f b6       	in	r0, 0x3f	; 63
    20ce:	f8 94       	cli
    20d0:	de bf       	out	0x3e, r29	; 62
    20d2:	0f be       	out	0x3f, r0	; 63
    20d4:	cd bf       	out	0x3d, r28	; 61
    20d6:	df 91       	pop	r29
    20d8:	cf 91       	pop	r28
    20da:	1f 91       	pop	r17
    20dc:	08 95       	ret

000020de <rng_get_seed_from_eeprom_singlebyte>:

uint8_t rng_get_seed_from_eeprom_singlebyte(uint8_t seed_index)
{
	uint8_t* baseaddr = 0 + seed_index;

	return eeprom_read_byte(baseaddr);
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	0c 94 a2 13 	jmp	0x2744	; 0x2744 <__eerd_byte_m644>

000020e4 <rng_write_seed_to_eeprom_singlebyte>:
}

void rng_write_seed_to_eeprom_singlebyte(uint8_t seed_index, uint8_t seed)
{
	uint8_t* baseaddr = 0 + seed_index;
	eeprom_write_byte(baseaddr, seed);
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	0c 94 aa 13 	jmp	0x2754	; 0x2754 <__eewr_byte_m644>

000020ea <rng_entropy_ring_fill>:
}

void rng_entropy_ring_fill(uint16_t n)
{
    20ea:	ef 92       	push	r14
    20ec:	ff 92       	push	r15
    20ee:	0f 93       	push	r16
    20f0:	1f 93       	push	r17
    20f2:	cf 93       	push	r28
    20f4:	df 93       	push	r29
	cli();
    20f6:	f8 94       	cli
	while (n--)
    20f8:	ec 01       	movw	r28, r24
	{
		if((random_ring_end+1) % RANDOM_MEMORY_POOL_SIZE == random_ring_start)
    20fa:	01 e0       	ldi	r16, 0x01	; 1
    20fc:	14 e0       	ldi	r17, 0x04	; 4
}

void rng_entropy_ring_fill(uint16_t n)
{
	cli();
	while (n--)
    20fe:	20 97       	sbiw	r28, 0x00	; 0
    2100:	41 f1       	breq	.+80     	; 0x2152 <rng_entropy_ring_fill+0x68>
	{
		if((random_ring_end+1) % RANDOM_MEMORY_POOL_SIZE == random_ring_start)
    2102:	e0 90 68 01 	lds	r14, 0x0168
    2106:	f0 90 69 01 	lds	r15, 0x0169
    210a:	21 97       	sbiw	r28, 0x01	; 1
    210c:	c7 01       	movw	r24, r14
    210e:	01 96       	adiw	r24, 0x01	; 1
    2110:	b8 01       	movw	r22, r16
    2112:	0e 94 14 11 	call	0x2228	; 0x2228 <__udivmodhi4>
    2116:	20 91 6a 01 	lds	r18, 0x016A
    211a:	30 91 6b 01 	lds	r19, 0x016B
    211e:	82 17       	cp	r24, r18
    2120:	93 07       	cpc	r25, r19
    2122:	b9 f0       	breq	.+46     	; 0x2152 <rng_entropy_ring_fill+0x68>
		{
			break;
		}

		random_ring[random_ring_end] = rng_wrapper(tparam);
    2124:	80 91 ec 01 	lds	r24, 0x01EC
    2128:	90 91 ed 01 	lds	r25, 0x01ED
    212c:	0e 94 03 10 	call	0x2006	; 0x2006 <rng_wrapper>
    2130:	f7 01       	movw	r30, r14
    2132:	e2 51       	subi	r30, 0x12	; 18
    2134:	fe 4f       	sbci	r31, 0xFE	; 254
    2136:	80 83       	st	Z, r24
		random_ring_end = (random_ring_end+1) % RANDOM_MEMORY_POOL_SIZE;
    2138:	80 91 68 01 	lds	r24, 0x0168
    213c:	90 91 69 01 	lds	r25, 0x0169
    2140:	01 96       	adiw	r24, 0x01	; 1
    2142:	b8 01       	movw	r22, r16
    2144:	0e 94 14 11 	call	0x2228	; 0x2228 <__udivmodhi4>
    2148:	90 93 69 01 	sts	0x0169, r25
    214c:	80 93 68 01 	sts	0x0168, r24
    2150:	d6 cf       	rjmp	.-84     	; 0x20fe <rng_entropy_ring_fill+0x14>
	}
	sei();
    2152:	78 94       	sei
}
    2154:	df 91       	pop	r29
    2156:	cf 91       	pop	r28
    2158:	1f 91       	pop	r17
    215a:	0f 91       	pop	r16
    215c:	ff 90       	pop	r15
    215e:	ef 90       	pop	r14
    2160:	08 95       	ret

00002162 <rng_get_random_byte>:

uint8_t rng_get_random_byte()
{
	if(random_ring_start != random_ring_end)
    2162:	80 91 6a 01 	lds	r24, 0x016A
    2166:	90 91 6b 01 	lds	r25, 0x016B
    216a:	20 91 68 01 	lds	r18, 0x0168
    216e:	30 91 69 01 	lds	r19, 0x0169
    2172:	82 17       	cp	r24, r18
    2174:	93 07       	cpc	r25, r19
    2176:	79 f0       	breq	.+30     	; 0x2196 <rng_get_random_byte+0x34>
	{
		uint8_t entropy_val = random_ring[random_ring_start];
    2178:	fc 01       	movw	r30, r24
    217a:	e2 51       	subi	r30, 0x12	; 18
    217c:	fe 4f       	sbci	r31, 0xFE	; 254
    217e:	20 81       	ld	r18, Z
		random_ring_start = (random_ring_start+1) % RANDOM_MEMORY_POOL_SIZE;
    2180:	01 96       	adiw	r24, 0x01	; 1
    2182:	61 e0       	ldi	r22, 0x01	; 1
    2184:	74 e0       	ldi	r23, 0x04	; 4
    2186:	0e 94 14 11 	call	0x2228	; 0x2228 <__udivmodhi4>
    218a:	90 93 6b 01 	sts	0x016B, r25
    218e:	80 93 6a 01 	sts	0x016A, r24
		return entropy_val;
    2192:	82 2f       	mov	r24, r18
    2194:	08 95       	ret
	}
	else
	{
//		assert(true, "random buffer underflow");
		return 0;
    2196:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    2198:	08 95       	ret

0000219a <rng_buffer_fill_state>:

uint16_t rng_buffer_fill_state()
{
	if(random_ring_end >= random_ring_start)
    219a:	80 91 68 01 	lds	r24, 0x0168
    219e:	90 91 69 01 	lds	r25, 0x0169
    21a2:	20 91 6a 01 	lds	r18, 0x016A
    21a6:	30 91 6b 01 	lds	r19, 0x016B
    21aa:	82 17       	cp	r24, r18
    21ac:	93 07       	cpc	r25, r19
    21ae:	10 f4       	brcc	.+4      	; 0x21b4 <rng_buffer_fill_state+0x1a>
		return random_ring_end-random_ring_start;
	}
	else
	{
		// RANDOM_MEMORY_POOL_SIZE - (random_ring_start - random_ring_end);
		return random_ring_end-random_ring_start + RANDOM_MEMORY_POOL_SIZE;
    21b0:	8f 5f       	subi	r24, 0xFF	; 255
    21b2:	9b 4f       	sbci	r25, 0xFB	; 251
    21b4:	82 1b       	sub	r24, r18
    21b6:	93 0b       	sbc	r25, r19
	}
}
    21b8:	08 95       	ret

000021ba <uart_init>:


void uart_init()
{
	// 38k4bd
	UBRR0 = 25;
    21ba:	89 e1       	ldi	r24, 0x19	; 25
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	90 93 c5 00 	sts	0x00C5, r25
    21c2:	80 93 c4 00 	sts	0x00C4, r24
	SetBit(UCSR0A, U2X0);
    21c6:	e0 ec       	ldi	r30, 0xC0	; 192
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	80 81       	ld	r24, Z
    21cc:	82 60       	ori	r24, 0x02	; 2
    21ce:	80 83       	st	Z, r24

	SetBit(UCSR0B, TXEN0); // enable transmit
    21d0:	e1 ec       	ldi	r30, 0xC1	; 193
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	80 81       	ld	r24, Z
    21d6:	88 60       	ori	r24, 0x08	; 8
    21d8:	80 83       	st	Z, r24

	// use receive pin as debug pin instead
	SetBit(DDRD, PD0);
    21da:	50 9a       	sbi	0x0a, 0	; 10
	ClrBit(PORTD, PD0);
    21dc:	58 98       	cbi	0x0b, 0	; 11
    21de:	08 95       	ret

000021e0 <uart_putc>:
}

void uart_putc(const char c)
{
	while (!GetBit(UCSR0A, UDRE0))
    21e0:	90 91 c0 00 	lds	r25, 0x00C0
    21e4:	95 ff       	sbrs	r25, 5
    21e6:	fc cf       	rjmp	.-8      	; 0x21e0 <uart_putc>
		; // wait until buffer free
	UDR0 = c;
    21e8:	80 93 c6 00 	sts	0x00C6, r24
    21ec:	08 95       	ret

000021ee <uart_puts>:
}

void uart_puts(const char* s)
{
    21ee:	cf 93       	push	r28
    21f0:	df 93       	push	r29
    21f2:	ec 01       	movw	r28, r24
	while(*s) {
    21f4:	89 91       	ld	r24, Y+
    21f6:	88 23       	and	r24, r24
    21f8:	19 f0       	breq	.+6      	; 0x2200 <uart_puts+0x12>
		uart_putc(*s++);
    21fa:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <uart_putc>
    21fe:	fa cf       	rjmp	.-12     	; 0x21f4 <uart_puts+0x6>
	}
}
    2200:	df 91       	pop	r29
    2202:	cf 91       	pop	r28
    2204:	08 95       	ret

00002206 <assert>:

void assert(bool cond, const char* error_string)
{
	if(!cond)
    2206:	81 11       	cpse	r24, r1
    2208:	03 c0       	rjmp	.+6      	; 0x2210 <assert+0xa>
//		} else {
//			PORTA ++;
//		}

		// Print error message
		uart_puts(error_string);
    220a:	cb 01       	movw	r24, r22
    220c:	0c 94 f7 10 	jmp	0x21ee	; 0x21ee <uart_puts>
    2210:	08 95       	ret

00002212 <__muluhisi3>:
    2212:	0e 94 28 11 	call	0x2250	; 0x2250 <__umulhisi3>
    2216:	a5 9f       	mul	r26, r21
    2218:	90 0d       	add	r25, r0
    221a:	b4 9f       	mul	r27, r20
    221c:	90 0d       	add	r25, r0
    221e:	a4 9f       	mul	r26, r20
    2220:	80 0d       	add	r24, r0
    2222:	91 1d       	adc	r25, r1
    2224:	11 24       	eor	r1, r1
    2226:	08 95       	ret

00002228 <__udivmodhi4>:
    2228:	aa 1b       	sub	r26, r26
    222a:	bb 1b       	sub	r27, r27
    222c:	51 e1       	ldi	r21, 0x11	; 17
    222e:	07 c0       	rjmp	.+14     	; 0x223e <__udivmodhi4_ep>

00002230 <__udivmodhi4_loop>:
    2230:	aa 1f       	adc	r26, r26
    2232:	bb 1f       	adc	r27, r27
    2234:	a6 17       	cp	r26, r22
    2236:	b7 07       	cpc	r27, r23
    2238:	10 f0       	brcs	.+4      	; 0x223e <__udivmodhi4_ep>
    223a:	a6 1b       	sub	r26, r22
    223c:	b7 0b       	sbc	r27, r23

0000223e <__udivmodhi4_ep>:
    223e:	88 1f       	adc	r24, r24
    2240:	99 1f       	adc	r25, r25
    2242:	5a 95       	dec	r21
    2244:	a9 f7       	brne	.-22     	; 0x2230 <__udivmodhi4_loop>
    2246:	80 95       	com	r24
    2248:	90 95       	com	r25
    224a:	bc 01       	movw	r22, r24
    224c:	cd 01       	movw	r24, r26
    224e:	08 95       	ret

00002250 <__umulhisi3>:
    2250:	a2 9f       	mul	r26, r18
    2252:	b0 01       	movw	r22, r0
    2254:	b3 9f       	mul	r27, r19
    2256:	c0 01       	movw	r24, r0
    2258:	a3 9f       	mul	r26, r19
    225a:	70 0d       	add	r23, r0
    225c:	81 1d       	adc	r24, r1
    225e:	11 24       	eor	r1, r1
    2260:	91 1d       	adc	r25, r1
    2262:	b2 9f       	mul	r27, r18
    2264:	70 0d       	add	r23, r0
    2266:	81 1d       	adc	r24, r1
    2268:	11 24       	eor	r1, r1
    226a:	91 1d       	adc	r25, r1
    226c:	08 95       	ret

0000226e <do_rand>:
    226e:	8f 92       	push	r8
    2270:	9f 92       	push	r9
    2272:	af 92       	push	r10
    2274:	bf 92       	push	r11
    2276:	cf 92       	push	r12
    2278:	df 92       	push	r13
    227a:	ef 92       	push	r14
    227c:	ff 92       	push	r15
    227e:	cf 93       	push	r28
    2280:	df 93       	push	r29
    2282:	ec 01       	movw	r28, r24
    2284:	68 81       	ld	r22, Y
    2286:	79 81       	ldd	r23, Y+1	; 0x01
    2288:	8a 81       	ldd	r24, Y+2	; 0x02
    228a:	9b 81       	ldd	r25, Y+3	; 0x03
    228c:	61 15       	cp	r22, r1
    228e:	71 05       	cpc	r23, r1
    2290:	81 05       	cpc	r24, r1
    2292:	91 05       	cpc	r25, r1
    2294:	21 f4       	brne	.+8      	; 0x229e <do_rand+0x30>
    2296:	64 e2       	ldi	r22, 0x24	; 36
    2298:	79 ed       	ldi	r23, 0xD9	; 217
    229a:	8b e5       	ldi	r24, 0x5B	; 91
    229c:	97 e0       	ldi	r25, 0x07	; 7
    229e:	2d e1       	ldi	r18, 0x1D	; 29
    22a0:	33 ef       	ldi	r19, 0xF3	; 243
    22a2:	41 e0       	ldi	r20, 0x01	; 1
    22a4:	50 e0       	ldi	r21, 0x00	; 0
    22a6:	0e 94 66 14 	call	0x28cc	; 0x28cc <__divmodsi4>
    22aa:	49 01       	movw	r8, r18
    22ac:	5a 01       	movw	r10, r20
    22ae:	9b 01       	movw	r18, r22
    22b0:	ac 01       	movw	r20, r24
    22b2:	a7 ea       	ldi	r26, 0xA7	; 167
    22b4:	b1 e4       	ldi	r27, 0x41	; 65
    22b6:	0e 94 09 11 	call	0x2212	; 0x2212 <__muluhisi3>
    22ba:	6b 01       	movw	r12, r22
    22bc:	7c 01       	movw	r14, r24
    22be:	ac ee       	ldi	r26, 0xEC	; 236
    22c0:	b4 ef       	ldi	r27, 0xF4	; 244
    22c2:	a5 01       	movw	r20, r10
    22c4:	94 01       	movw	r18, r8
    22c6:	0e 94 61 14 	call	0x28c2	; 0x28c2 <__mulohisi3>
    22ca:	c6 0e       	add	r12, r22
    22cc:	d7 1e       	adc	r13, r23
    22ce:	e8 1e       	adc	r14, r24
    22d0:	f9 1e       	adc	r15, r25
    22d2:	f7 fe       	sbrs	r15, 7
    22d4:	06 c0       	rjmp	.+12     	; 0x22e2 <do_rand+0x74>
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	c8 1a       	sub	r12, r24
    22da:	d1 08       	sbc	r13, r1
    22dc:	e1 08       	sbc	r14, r1
    22de:	80 e8       	ldi	r24, 0x80	; 128
    22e0:	f8 0a       	sbc	r15, r24
    22e2:	c8 82       	st	Y, r12
    22e4:	d9 82       	std	Y+1, r13	; 0x01
    22e6:	ea 82       	std	Y+2, r14	; 0x02
    22e8:	fb 82       	std	Y+3, r15	; 0x03
    22ea:	c6 01       	movw	r24, r12
    22ec:	9f 77       	andi	r25, 0x7F	; 127
    22ee:	df 91       	pop	r29
    22f0:	cf 91       	pop	r28
    22f2:	ff 90       	pop	r15
    22f4:	ef 90       	pop	r14
    22f6:	df 90       	pop	r13
    22f8:	cf 90       	pop	r12
    22fa:	bf 90       	pop	r11
    22fc:	af 90       	pop	r10
    22fe:	9f 90       	pop	r9
    2300:	8f 90       	pop	r8
    2302:	08 95       	ret

00002304 <rand_r>:
    2304:	0e 94 37 11 	call	0x226e	; 0x226e <do_rand>
    2308:	08 95       	ret

0000230a <rand>:
    230a:	80 e0       	ldi	r24, 0x00	; 0
    230c:	91 e0       	ldi	r25, 0x01	; 1
    230e:	0e 94 37 11 	call	0x226e	; 0x226e <do_rand>
    2312:	08 95       	ret

00002314 <srand>:
    2314:	a0 e0       	ldi	r26, 0x00	; 0
    2316:	b0 e0       	ldi	r27, 0x00	; 0
    2318:	80 93 00 01 	sts	0x0100, r24
    231c:	90 93 01 01 	sts	0x0101, r25
    2320:	a0 93 02 01 	sts	0x0102, r26
    2324:	b0 93 03 01 	sts	0x0103, r27
    2328:	08 95       	ret

0000232a <memcpy_P>:
    232a:	fb 01       	movw	r30, r22
    232c:	dc 01       	movw	r26, r24
    232e:	02 c0       	rjmp	.+4      	; 0x2334 <memcpy_P+0xa>
    2330:	05 90       	lpm	r0, Z+
    2332:	0d 92       	st	X+, r0
    2334:	41 50       	subi	r20, 0x01	; 1
    2336:	50 40       	sbci	r21, 0x00	; 0
    2338:	d8 f7       	brcc	.-10     	; 0x2330 <memcpy_P+0x6>
    233a:	08 95       	ret

0000233c <memcpy>:
    233c:	fb 01       	movw	r30, r22
    233e:	dc 01       	movw	r26, r24
    2340:	02 c0       	rjmp	.+4      	; 0x2346 <memcpy+0xa>
    2342:	01 90       	ld	r0, Z+
    2344:	0d 92       	st	X+, r0
    2346:	41 50       	subi	r20, 0x01	; 1
    2348:	50 40       	sbci	r21, 0x00	; 0
    234a:	d8 f7       	brcc	.-10     	; 0x2342 <memcpy+0x6>
    234c:	08 95       	ret

0000234e <memset>:
    234e:	dc 01       	movw	r26, r24
    2350:	01 c0       	rjmp	.+2      	; 0x2354 <memset+0x6>
    2352:	6d 93       	st	X+, r22
    2354:	41 50       	subi	r20, 0x01	; 1
    2356:	50 40       	sbci	r21, 0x00	; 0
    2358:	e0 f7       	brcc	.-8      	; 0x2352 <memset+0x4>
    235a:	08 95       	ret

0000235c <sprintf>:
    235c:	ae e0       	ldi	r26, 0x0E	; 14
    235e:	b0 e0       	ldi	r27, 0x00	; 0
    2360:	e4 eb       	ldi	r30, 0xB4	; 180
    2362:	f1 e1       	ldi	r31, 0x11	; 17
    2364:	0c 94 93 14 	jmp	0x2926	; 0x2926 <__prologue_saves__+0x1c>
    2368:	0d 89       	ldd	r16, Y+21	; 0x15
    236a:	1e 89       	ldd	r17, Y+22	; 0x16
    236c:	86 e0       	ldi	r24, 0x06	; 6
    236e:	8c 83       	std	Y+4, r24	; 0x04
    2370:	1a 83       	std	Y+2, r17	; 0x02
    2372:	09 83       	std	Y+1, r16	; 0x01
    2374:	8f ef       	ldi	r24, 0xFF	; 255
    2376:	9f e7       	ldi	r25, 0x7F	; 127
    2378:	9e 83       	std	Y+6, r25	; 0x06
    237a:	8d 83       	std	Y+5, r24	; 0x05
    237c:	ae 01       	movw	r20, r28
    237e:	47 5e       	subi	r20, 0xE7	; 231
    2380:	5f 4f       	sbci	r21, 0xFF	; 255
    2382:	6f 89       	ldd	r22, Y+23	; 0x17
    2384:	78 8d       	ldd	r23, Y+24	; 0x18
    2386:	ce 01       	movw	r24, r28
    2388:	01 96       	adiw	r24, 0x01	; 1
    238a:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <vfprintf>
    238e:	ef 81       	ldd	r30, Y+7	; 0x07
    2390:	f8 85       	ldd	r31, Y+8	; 0x08
    2392:	e0 0f       	add	r30, r16
    2394:	f1 1f       	adc	r31, r17
    2396:	10 82       	st	Z, r1
    2398:	2e 96       	adiw	r28, 0x0e	; 14
    239a:	e4 e0       	ldi	r30, 0x04	; 4
    239c:	0c 94 af 14 	jmp	0x295e	; 0x295e <__epilogue_restores__+0x1c>

000023a0 <vfprintf>:
    23a0:	ac e0       	ldi	r26, 0x0C	; 12
    23a2:	b0 e0       	ldi	r27, 0x00	; 0
    23a4:	e6 ed       	ldi	r30, 0xD6	; 214
    23a6:	f1 e1       	ldi	r31, 0x11	; 17
    23a8:	0c 94 85 14 	jmp	0x290a	; 0x290a <__prologue_saves__>
    23ac:	7c 01       	movw	r14, r24
    23ae:	6b 01       	movw	r12, r22
    23b0:	8a 01       	movw	r16, r20
    23b2:	fc 01       	movw	r30, r24
    23b4:	17 82       	std	Z+7, r1	; 0x07
    23b6:	16 82       	std	Z+6, r1	; 0x06
    23b8:	83 81       	ldd	r24, Z+3	; 0x03
    23ba:	81 ff       	sbrs	r24, 1
    23bc:	bd c1       	rjmp	.+890    	; 0x2738 <vfprintf+0x398>
    23be:	ce 01       	movw	r24, r28
    23c0:	01 96       	adiw	r24, 0x01	; 1
    23c2:	4c 01       	movw	r8, r24
    23c4:	f7 01       	movw	r30, r14
    23c6:	93 81       	ldd	r25, Z+3	; 0x03
    23c8:	f6 01       	movw	r30, r12
    23ca:	93 fd       	sbrc	r25, 3
    23cc:	85 91       	lpm	r24, Z+
    23ce:	93 ff       	sbrs	r25, 3
    23d0:	81 91       	ld	r24, Z+
    23d2:	6f 01       	movw	r12, r30
    23d4:	88 23       	and	r24, r24
    23d6:	09 f4       	brne	.+2      	; 0x23da <vfprintf+0x3a>
    23d8:	ab c1       	rjmp	.+854    	; 0x2730 <vfprintf+0x390>
    23da:	85 32       	cpi	r24, 0x25	; 37
    23dc:	39 f4       	brne	.+14     	; 0x23ec <vfprintf+0x4c>
    23de:	93 fd       	sbrc	r25, 3
    23e0:	85 91       	lpm	r24, Z+
    23e2:	93 ff       	sbrs	r25, 3
    23e4:	81 91       	ld	r24, Z+
    23e6:	6f 01       	movw	r12, r30
    23e8:	85 32       	cpi	r24, 0x25	; 37
    23ea:	29 f4       	brne	.+10     	; 0x23f6 <vfprintf+0x56>
    23ec:	b7 01       	movw	r22, r14
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	0e 94 ce 13 	call	0x279c	; 0x279c <fputc>
    23f4:	e7 cf       	rjmp	.-50     	; 0x23c4 <vfprintf+0x24>
    23f6:	51 2c       	mov	r5, r1
    23f8:	31 2c       	mov	r3, r1
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	20 32       	cpi	r18, 0x20	; 32
    23fe:	a0 f4       	brcc	.+40     	; 0x2428 <vfprintf+0x88>
    2400:	8b 32       	cpi	r24, 0x2B	; 43
    2402:	69 f0       	breq	.+26     	; 0x241e <vfprintf+0x7e>
    2404:	30 f4       	brcc	.+12     	; 0x2412 <vfprintf+0x72>
    2406:	80 32       	cpi	r24, 0x20	; 32
    2408:	59 f0       	breq	.+22     	; 0x2420 <vfprintf+0x80>
    240a:	83 32       	cpi	r24, 0x23	; 35
    240c:	69 f4       	brne	.+26     	; 0x2428 <vfprintf+0x88>
    240e:	20 61       	ori	r18, 0x10	; 16
    2410:	2c c0       	rjmp	.+88     	; 0x246a <vfprintf+0xca>
    2412:	8d 32       	cpi	r24, 0x2D	; 45
    2414:	39 f0       	breq	.+14     	; 0x2424 <vfprintf+0x84>
    2416:	80 33       	cpi	r24, 0x30	; 48
    2418:	39 f4       	brne	.+14     	; 0x2428 <vfprintf+0x88>
    241a:	21 60       	ori	r18, 0x01	; 1
    241c:	26 c0       	rjmp	.+76     	; 0x246a <vfprintf+0xca>
    241e:	22 60       	ori	r18, 0x02	; 2
    2420:	24 60       	ori	r18, 0x04	; 4
    2422:	23 c0       	rjmp	.+70     	; 0x246a <vfprintf+0xca>
    2424:	28 60       	ori	r18, 0x08	; 8
    2426:	21 c0       	rjmp	.+66     	; 0x246a <vfprintf+0xca>
    2428:	27 fd       	sbrc	r18, 7
    242a:	27 c0       	rjmp	.+78     	; 0x247a <vfprintf+0xda>
    242c:	30 ed       	ldi	r19, 0xD0	; 208
    242e:	38 0f       	add	r19, r24
    2430:	3a 30       	cpi	r19, 0x0A	; 10
    2432:	78 f4       	brcc	.+30     	; 0x2452 <vfprintf+0xb2>
    2434:	26 ff       	sbrs	r18, 6
    2436:	06 c0       	rjmp	.+12     	; 0x2444 <vfprintf+0xa4>
    2438:	fa e0       	ldi	r31, 0x0A	; 10
    243a:	5f 9e       	mul	r5, r31
    243c:	30 0d       	add	r19, r0
    243e:	11 24       	eor	r1, r1
    2440:	53 2e       	mov	r5, r19
    2442:	13 c0       	rjmp	.+38     	; 0x246a <vfprintf+0xca>
    2444:	8a e0       	ldi	r24, 0x0A	; 10
    2446:	38 9e       	mul	r3, r24
    2448:	30 0d       	add	r19, r0
    244a:	11 24       	eor	r1, r1
    244c:	33 2e       	mov	r3, r19
    244e:	20 62       	ori	r18, 0x20	; 32
    2450:	0c c0       	rjmp	.+24     	; 0x246a <vfprintf+0xca>
    2452:	8e 32       	cpi	r24, 0x2E	; 46
    2454:	21 f4       	brne	.+8      	; 0x245e <vfprintf+0xbe>
    2456:	26 fd       	sbrc	r18, 6
    2458:	6b c1       	rjmp	.+726    	; 0x2730 <vfprintf+0x390>
    245a:	20 64       	ori	r18, 0x40	; 64
    245c:	06 c0       	rjmp	.+12     	; 0x246a <vfprintf+0xca>
    245e:	8c 36       	cpi	r24, 0x6C	; 108
    2460:	11 f4       	brne	.+4      	; 0x2466 <vfprintf+0xc6>
    2462:	20 68       	ori	r18, 0x80	; 128
    2464:	02 c0       	rjmp	.+4      	; 0x246a <vfprintf+0xca>
    2466:	88 36       	cpi	r24, 0x68	; 104
    2468:	41 f4       	brne	.+16     	; 0x247a <vfprintf+0xda>
    246a:	f6 01       	movw	r30, r12
    246c:	93 fd       	sbrc	r25, 3
    246e:	85 91       	lpm	r24, Z+
    2470:	93 ff       	sbrs	r25, 3
    2472:	81 91       	ld	r24, Z+
    2474:	6f 01       	movw	r12, r30
    2476:	81 11       	cpse	r24, r1
    2478:	c1 cf       	rjmp	.-126    	; 0x23fc <vfprintf+0x5c>
    247a:	98 2f       	mov	r25, r24
    247c:	9f 7d       	andi	r25, 0xDF	; 223
    247e:	95 54       	subi	r25, 0x45	; 69
    2480:	93 30       	cpi	r25, 0x03	; 3
    2482:	28 f4       	brcc	.+10     	; 0x248e <vfprintf+0xee>
    2484:	0c 5f       	subi	r16, 0xFC	; 252
    2486:	1f 4f       	sbci	r17, 0xFF	; 255
    2488:	ff e3       	ldi	r31, 0x3F	; 63
    248a:	f9 83       	std	Y+1, r31	; 0x01
    248c:	0d c0       	rjmp	.+26     	; 0x24a8 <vfprintf+0x108>
    248e:	83 36       	cpi	r24, 0x63	; 99
    2490:	31 f0       	breq	.+12     	; 0x249e <vfprintf+0xfe>
    2492:	83 37       	cpi	r24, 0x73	; 115
    2494:	71 f0       	breq	.+28     	; 0x24b2 <vfprintf+0x112>
    2496:	83 35       	cpi	r24, 0x53	; 83
    2498:	09 f0       	breq	.+2      	; 0x249c <vfprintf+0xfc>
    249a:	5b c0       	rjmp	.+182    	; 0x2552 <vfprintf+0x1b2>
    249c:	22 c0       	rjmp	.+68     	; 0x24e2 <vfprintf+0x142>
    249e:	f8 01       	movw	r30, r16
    24a0:	80 81       	ld	r24, Z
    24a2:	89 83       	std	Y+1, r24	; 0x01
    24a4:	0e 5f       	subi	r16, 0xFE	; 254
    24a6:	1f 4f       	sbci	r17, 0xFF	; 255
    24a8:	44 24       	eor	r4, r4
    24aa:	43 94       	inc	r4
    24ac:	51 2c       	mov	r5, r1
    24ae:	54 01       	movw	r10, r8
    24b0:	15 c0       	rjmp	.+42     	; 0x24dc <vfprintf+0x13c>
    24b2:	38 01       	movw	r6, r16
    24b4:	f2 e0       	ldi	r31, 0x02	; 2
    24b6:	6f 0e       	add	r6, r31
    24b8:	71 1c       	adc	r7, r1
    24ba:	f8 01       	movw	r30, r16
    24bc:	a0 80       	ld	r10, Z
    24be:	b1 80       	ldd	r11, Z+1	; 0x01
    24c0:	26 ff       	sbrs	r18, 6
    24c2:	03 c0       	rjmp	.+6      	; 0x24ca <vfprintf+0x12a>
    24c4:	65 2d       	mov	r22, r5
    24c6:	70 e0       	ldi	r23, 0x00	; 0
    24c8:	02 c0       	rjmp	.+4      	; 0x24ce <vfprintf+0x12e>
    24ca:	6f ef       	ldi	r22, 0xFF	; 255
    24cc:	7f ef       	ldi	r23, 0xFF	; 255
    24ce:	c5 01       	movw	r24, r10
    24d0:	2c 87       	std	Y+12, r18	; 0x0c
    24d2:	0e 94 c3 13 	call	0x2786	; 0x2786 <strnlen>
    24d6:	2c 01       	movw	r4, r24
    24d8:	83 01       	movw	r16, r6
    24da:	2c 85       	ldd	r18, Y+12	; 0x0c
    24dc:	2f 77       	andi	r18, 0x7F	; 127
    24de:	22 2e       	mov	r2, r18
    24e0:	17 c0       	rjmp	.+46     	; 0x2510 <vfprintf+0x170>
    24e2:	38 01       	movw	r6, r16
    24e4:	f2 e0       	ldi	r31, 0x02	; 2
    24e6:	6f 0e       	add	r6, r31
    24e8:	71 1c       	adc	r7, r1
    24ea:	f8 01       	movw	r30, r16
    24ec:	a0 80       	ld	r10, Z
    24ee:	b1 80       	ldd	r11, Z+1	; 0x01
    24f0:	26 ff       	sbrs	r18, 6
    24f2:	03 c0       	rjmp	.+6      	; 0x24fa <vfprintf+0x15a>
    24f4:	65 2d       	mov	r22, r5
    24f6:	70 e0       	ldi	r23, 0x00	; 0
    24f8:	02 c0       	rjmp	.+4      	; 0x24fe <vfprintf+0x15e>
    24fa:	6f ef       	ldi	r22, 0xFF	; 255
    24fc:	7f ef       	ldi	r23, 0xFF	; 255
    24fe:	c5 01       	movw	r24, r10
    2500:	2c 87       	std	Y+12, r18	; 0x0c
    2502:	0e 94 b8 13 	call	0x2770	; 0x2770 <strnlen_P>
    2506:	2c 01       	movw	r4, r24
    2508:	2c 85       	ldd	r18, Y+12	; 0x0c
    250a:	20 68       	ori	r18, 0x80	; 128
    250c:	22 2e       	mov	r2, r18
    250e:	83 01       	movw	r16, r6
    2510:	23 fc       	sbrc	r2, 3
    2512:	1b c0       	rjmp	.+54     	; 0x254a <vfprintf+0x1aa>
    2514:	83 2d       	mov	r24, r3
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	48 16       	cp	r4, r24
    251a:	59 06       	cpc	r5, r25
    251c:	b0 f4       	brcc	.+44     	; 0x254a <vfprintf+0x1aa>
    251e:	b7 01       	movw	r22, r14
    2520:	80 e2       	ldi	r24, 0x20	; 32
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	0e 94 ce 13 	call	0x279c	; 0x279c <fputc>
    2528:	3a 94       	dec	r3
    252a:	f4 cf       	rjmp	.-24     	; 0x2514 <vfprintf+0x174>
    252c:	f5 01       	movw	r30, r10
    252e:	27 fc       	sbrc	r2, 7
    2530:	85 91       	lpm	r24, Z+
    2532:	27 fe       	sbrs	r2, 7
    2534:	81 91       	ld	r24, Z+
    2536:	5f 01       	movw	r10, r30
    2538:	b7 01       	movw	r22, r14
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	0e 94 ce 13 	call	0x279c	; 0x279c <fputc>
    2540:	31 10       	cpse	r3, r1
    2542:	3a 94       	dec	r3
    2544:	f1 e0       	ldi	r31, 0x01	; 1
    2546:	4f 1a       	sub	r4, r31
    2548:	51 08       	sbc	r5, r1
    254a:	41 14       	cp	r4, r1
    254c:	51 04       	cpc	r5, r1
    254e:	71 f7       	brne	.-36     	; 0x252c <vfprintf+0x18c>
    2550:	e5 c0       	rjmp	.+458    	; 0x271c <vfprintf+0x37c>
    2552:	84 36       	cpi	r24, 0x64	; 100
    2554:	11 f0       	breq	.+4      	; 0x255a <vfprintf+0x1ba>
    2556:	89 36       	cpi	r24, 0x69	; 105
    2558:	39 f5       	brne	.+78     	; 0x25a8 <vfprintf+0x208>
    255a:	f8 01       	movw	r30, r16
    255c:	27 ff       	sbrs	r18, 7
    255e:	07 c0       	rjmp	.+14     	; 0x256e <vfprintf+0x1ce>
    2560:	60 81       	ld	r22, Z
    2562:	71 81       	ldd	r23, Z+1	; 0x01
    2564:	82 81       	ldd	r24, Z+2	; 0x02
    2566:	93 81       	ldd	r25, Z+3	; 0x03
    2568:	0c 5f       	subi	r16, 0xFC	; 252
    256a:	1f 4f       	sbci	r17, 0xFF	; 255
    256c:	08 c0       	rjmp	.+16     	; 0x257e <vfprintf+0x1de>
    256e:	60 81       	ld	r22, Z
    2570:	71 81       	ldd	r23, Z+1	; 0x01
    2572:	88 27       	eor	r24, r24
    2574:	77 fd       	sbrc	r23, 7
    2576:	80 95       	com	r24
    2578:	98 2f       	mov	r25, r24
    257a:	0e 5f       	subi	r16, 0xFE	; 254
    257c:	1f 4f       	sbci	r17, 0xFF	; 255
    257e:	2f 76       	andi	r18, 0x6F	; 111
    2580:	b2 2e       	mov	r11, r18
    2582:	97 ff       	sbrs	r25, 7
    2584:	09 c0       	rjmp	.+18     	; 0x2598 <vfprintf+0x1f8>
    2586:	90 95       	com	r25
    2588:	80 95       	com	r24
    258a:	70 95       	com	r23
    258c:	61 95       	neg	r22
    258e:	7f 4f       	sbci	r23, 0xFF	; 255
    2590:	8f 4f       	sbci	r24, 0xFF	; 255
    2592:	9f 4f       	sbci	r25, 0xFF	; 255
    2594:	20 68       	ori	r18, 0x80	; 128
    2596:	b2 2e       	mov	r11, r18
    2598:	2a e0       	ldi	r18, 0x0A	; 10
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	a4 01       	movw	r20, r8
    259e:	0e 94 00 14 	call	0x2800	; 0x2800 <__ultoa_invert>
    25a2:	a8 2e       	mov	r10, r24
    25a4:	a8 18       	sub	r10, r8
    25a6:	44 c0       	rjmp	.+136    	; 0x2630 <vfprintf+0x290>
    25a8:	85 37       	cpi	r24, 0x75	; 117
    25aa:	29 f4       	brne	.+10     	; 0x25b6 <vfprintf+0x216>
    25ac:	2f 7e       	andi	r18, 0xEF	; 239
    25ae:	b2 2e       	mov	r11, r18
    25b0:	2a e0       	ldi	r18, 0x0A	; 10
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	25 c0       	rjmp	.+74     	; 0x2600 <vfprintf+0x260>
    25b6:	f2 2f       	mov	r31, r18
    25b8:	f9 7f       	andi	r31, 0xF9	; 249
    25ba:	bf 2e       	mov	r11, r31
    25bc:	8f 36       	cpi	r24, 0x6F	; 111
    25be:	c1 f0       	breq	.+48     	; 0x25f0 <vfprintf+0x250>
    25c0:	18 f4       	brcc	.+6      	; 0x25c8 <vfprintf+0x228>
    25c2:	88 35       	cpi	r24, 0x58	; 88
    25c4:	79 f0       	breq	.+30     	; 0x25e4 <vfprintf+0x244>
    25c6:	b4 c0       	rjmp	.+360    	; 0x2730 <vfprintf+0x390>
    25c8:	80 37       	cpi	r24, 0x70	; 112
    25ca:	19 f0       	breq	.+6      	; 0x25d2 <vfprintf+0x232>
    25cc:	88 37       	cpi	r24, 0x78	; 120
    25ce:	21 f0       	breq	.+8      	; 0x25d8 <vfprintf+0x238>
    25d0:	af c0       	rjmp	.+350    	; 0x2730 <vfprintf+0x390>
    25d2:	2f 2f       	mov	r18, r31
    25d4:	20 61       	ori	r18, 0x10	; 16
    25d6:	b2 2e       	mov	r11, r18
    25d8:	b4 fe       	sbrs	r11, 4
    25da:	0d c0       	rjmp	.+26     	; 0x25f6 <vfprintf+0x256>
    25dc:	8b 2d       	mov	r24, r11
    25de:	84 60       	ori	r24, 0x04	; 4
    25e0:	b8 2e       	mov	r11, r24
    25e2:	09 c0       	rjmp	.+18     	; 0x25f6 <vfprintf+0x256>
    25e4:	24 ff       	sbrs	r18, 4
    25e6:	0a c0       	rjmp	.+20     	; 0x25fc <vfprintf+0x25c>
    25e8:	9f 2f       	mov	r25, r31
    25ea:	96 60       	ori	r25, 0x06	; 6
    25ec:	b9 2e       	mov	r11, r25
    25ee:	06 c0       	rjmp	.+12     	; 0x25fc <vfprintf+0x25c>
    25f0:	28 e0       	ldi	r18, 0x08	; 8
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	05 c0       	rjmp	.+10     	; 0x2600 <vfprintf+0x260>
    25f6:	20 e1       	ldi	r18, 0x10	; 16
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	02 c0       	rjmp	.+4      	; 0x2600 <vfprintf+0x260>
    25fc:	20 e1       	ldi	r18, 0x10	; 16
    25fe:	32 e0       	ldi	r19, 0x02	; 2
    2600:	f8 01       	movw	r30, r16
    2602:	b7 fe       	sbrs	r11, 7
    2604:	07 c0       	rjmp	.+14     	; 0x2614 <vfprintf+0x274>
    2606:	60 81       	ld	r22, Z
    2608:	71 81       	ldd	r23, Z+1	; 0x01
    260a:	82 81       	ldd	r24, Z+2	; 0x02
    260c:	93 81       	ldd	r25, Z+3	; 0x03
    260e:	0c 5f       	subi	r16, 0xFC	; 252
    2610:	1f 4f       	sbci	r17, 0xFF	; 255
    2612:	06 c0       	rjmp	.+12     	; 0x2620 <vfprintf+0x280>
    2614:	60 81       	ld	r22, Z
    2616:	71 81       	ldd	r23, Z+1	; 0x01
    2618:	80 e0       	ldi	r24, 0x00	; 0
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	0e 5f       	subi	r16, 0xFE	; 254
    261e:	1f 4f       	sbci	r17, 0xFF	; 255
    2620:	a4 01       	movw	r20, r8
    2622:	0e 94 00 14 	call	0x2800	; 0x2800 <__ultoa_invert>
    2626:	a8 2e       	mov	r10, r24
    2628:	a8 18       	sub	r10, r8
    262a:	fb 2d       	mov	r31, r11
    262c:	ff 77       	andi	r31, 0x7F	; 127
    262e:	bf 2e       	mov	r11, r31
    2630:	b6 fe       	sbrs	r11, 6
    2632:	0b c0       	rjmp	.+22     	; 0x264a <vfprintf+0x2aa>
    2634:	2b 2d       	mov	r18, r11
    2636:	2e 7f       	andi	r18, 0xFE	; 254
    2638:	a5 14       	cp	r10, r5
    263a:	50 f4       	brcc	.+20     	; 0x2650 <vfprintf+0x2b0>
    263c:	b4 fe       	sbrs	r11, 4
    263e:	0a c0       	rjmp	.+20     	; 0x2654 <vfprintf+0x2b4>
    2640:	b2 fc       	sbrc	r11, 2
    2642:	08 c0       	rjmp	.+16     	; 0x2654 <vfprintf+0x2b4>
    2644:	2b 2d       	mov	r18, r11
    2646:	2e 7e       	andi	r18, 0xEE	; 238
    2648:	05 c0       	rjmp	.+10     	; 0x2654 <vfprintf+0x2b4>
    264a:	7a 2c       	mov	r7, r10
    264c:	2b 2d       	mov	r18, r11
    264e:	03 c0       	rjmp	.+6      	; 0x2656 <vfprintf+0x2b6>
    2650:	7a 2c       	mov	r7, r10
    2652:	01 c0       	rjmp	.+2      	; 0x2656 <vfprintf+0x2b6>
    2654:	75 2c       	mov	r7, r5
    2656:	24 ff       	sbrs	r18, 4
    2658:	0d c0       	rjmp	.+26     	; 0x2674 <vfprintf+0x2d4>
    265a:	fe 01       	movw	r30, r28
    265c:	ea 0d       	add	r30, r10
    265e:	f1 1d       	adc	r31, r1
    2660:	80 81       	ld	r24, Z
    2662:	80 33       	cpi	r24, 0x30	; 48
    2664:	11 f4       	brne	.+4      	; 0x266a <vfprintf+0x2ca>
    2666:	29 7e       	andi	r18, 0xE9	; 233
    2668:	09 c0       	rjmp	.+18     	; 0x267c <vfprintf+0x2dc>
    266a:	22 ff       	sbrs	r18, 2
    266c:	06 c0       	rjmp	.+12     	; 0x267a <vfprintf+0x2da>
    266e:	73 94       	inc	r7
    2670:	73 94       	inc	r7
    2672:	04 c0       	rjmp	.+8      	; 0x267c <vfprintf+0x2dc>
    2674:	82 2f       	mov	r24, r18
    2676:	86 78       	andi	r24, 0x86	; 134
    2678:	09 f0       	breq	.+2      	; 0x267c <vfprintf+0x2dc>
    267a:	73 94       	inc	r7
    267c:	23 fd       	sbrc	r18, 3
    267e:	13 c0       	rjmp	.+38     	; 0x26a6 <vfprintf+0x306>
    2680:	20 ff       	sbrs	r18, 0
    2682:	06 c0       	rjmp	.+12     	; 0x2690 <vfprintf+0x2f0>
    2684:	5a 2c       	mov	r5, r10
    2686:	73 14       	cp	r7, r3
    2688:	18 f4       	brcc	.+6      	; 0x2690 <vfprintf+0x2f0>
    268a:	53 0c       	add	r5, r3
    268c:	57 18       	sub	r5, r7
    268e:	73 2c       	mov	r7, r3
    2690:	73 14       	cp	r7, r3
    2692:	68 f4       	brcc	.+26     	; 0x26ae <vfprintf+0x30e>
    2694:	b7 01       	movw	r22, r14
    2696:	80 e2       	ldi	r24, 0x20	; 32
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	2c 87       	std	Y+12, r18	; 0x0c
    269c:	0e 94 ce 13 	call	0x279c	; 0x279c <fputc>
    26a0:	73 94       	inc	r7
    26a2:	2c 85       	ldd	r18, Y+12	; 0x0c
    26a4:	f5 cf       	rjmp	.-22     	; 0x2690 <vfprintf+0x2f0>
    26a6:	73 14       	cp	r7, r3
    26a8:	10 f4       	brcc	.+4      	; 0x26ae <vfprintf+0x30e>
    26aa:	37 18       	sub	r3, r7
    26ac:	01 c0       	rjmp	.+2      	; 0x26b0 <vfprintf+0x310>
    26ae:	31 2c       	mov	r3, r1
    26b0:	24 ff       	sbrs	r18, 4
    26b2:	12 c0       	rjmp	.+36     	; 0x26d8 <vfprintf+0x338>
    26b4:	b7 01       	movw	r22, r14
    26b6:	80 e3       	ldi	r24, 0x30	; 48
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	2c 87       	std	Y+12, r18	; 0x0c
    26bc:	0e 94 ce 13 	call	0x279c	; 0x279c <fputc>
    26c0:	2c 85       	ldd	r18, Y+12	; 0x0c
    26c2:	22 ff       	sbrs	r18, 2
    26c4:	17 c0       	rjmp	.+46     	; 0x26f4 <vfprintf+0x354>
    26c6:	21 ff       	sbrs	r18, 1
    26c8:	03 c0       	rjmp	.+6      	; 0x26d0 <vfprintf+0x330>
    26ca:	88 e5       	ldi	r24, 0x58	; 88
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	02 c0       	rjmp	.+4      	; 0x26d4 <vfprintf+0x334>
    26d0:	88 e7       	ldi	r24, 0x78	; 120
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	b7 01       	movw	r22, r14
    26d6:	0c c0       	rjmp	.+24     	; 0x26f0 <vfprintf+0x350>
    26d8:	82 2f       	mov	r24, r18
    26da:	86 78       	andi	r24, 0x86	; 134
    26dc:	59 f0       	breq	.+22     	; 0x26f4 <vfprintf+0x354>
    26de:	21 fd       	sbrc	r18, 1
    26e0:	02 c0       	rjmp	.+4      	; 0x26e6 <vfprintf+0x346>
    26e2:	80 e2       	ldi	r24, 0x20	; 32
    26e4:	01 c0       	rjmp	.+2      	; 0x26e8 <vfprintf+0x348>
    26e6:	8b e2       	ldi	r24, 0x2B	; 43
    26e8:	27 fd       	sbrc	r18, 7
    26ea:	8d e2       	ldi	r24, 0x2D	; 45
    26ec:	b7 01       	movw	r22, r14
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	0e 94 ce 13 	call	0x279c	; 0x279c <fputc>
    26f4:	a5 14       	cp	r10, r5
    26f6:	38 f4       	brcc	.+14     	; 0x2706 <vfprintf+0x366>
    26f8:	b7 01       	movw	r22, r14
    26fa:	80 e3       	ldi	r24, 0x30	; 48
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	0e 94 ce 13 	call	0x279c	; 0x279c <fputc>
    2702:	5a 94       	dec	r5
    2704:	f7 cf       	rjmp	.-18     	; 0x26f4 <vfprintf+0x354>
    2706:	aa 94       	dec	r10
    2708:	f4 01       	movw	r30, r8
    270a:	ea 0d       	add	r30, r10
    270c:	f1 1d       	adc	r31, r1
    270e:	80 81       	ld	r24, Z
    2710:	b7 01       	movw	r22, r14
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	0e 94 ce 13 	call	0x279c	; 0x279c <fputc>
    2718:	a1 10       	cpse	r10, r1
    271a:	f5 cf       	rjmp	.-22     	; 0x2706 <vfprintf+0x366>
    271c:	33 20       	and	r3, r3
    271e:	09 f4       	brne	.+2      	; 0x2722 <vfprintf+0x382>
    2720:	51 ce       	rjmp	.-862    	; 0x23c4 <vfprintf+0x24>
    2722:	b7 01       	movw	r22, r14
    2724:	80 e2       	ldi	r24, 0x20	; 32
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	0e 94 ce 13 	call	0x279c	; 0x279c <fputc>
    272c:	3a 94       	dec	r3
    272e:	f6 cf       	rjmp	.-20     	; 0x271c <vfprintf+0x37c>
    2730:	f7 01       	movw	r30, r14
    2732:	86 81       	ldd	r24, Z+6	; 0x06
    2734:	97 81       	ldd	r25, Z+7	; 0x07
    2736:	02 c0       	rjmp	.+4      	; 0x273c <vfprintf+0x39c>
    2738:	8f ef       	ldi	r24, 0xFF	; 255
    273a:	9f ef       	ldi	r25, 0xFF	; 255
    273c:	2c 96       	adiw	r28, 0x0c	; 12
    273e:	e2 e1       	ldi	r30, 0x12	; 18
    2740:	0c 94 a1 14 	jmp	0x2942	; 0x2942 <__epilogue_restores__>

00002744 <__eerd_byte_m644>:
    2744:	f9 99       	sbic	0x1f, 1	; 31
    2746:	fe cf       	rjmp	.-4      	; 0x2744 <__eerd_byte_m644>
    2748:	92 bd       	out	0x22, r25	; 34
    274a:	81 bd       	out	0x21, r24	; 33
    274c:	f8 9a       	sbi	0x1f, 0	; 31
    274e:	99 27       	eor	r25, r25
    2750:	80 b5       	in	r24, 0x20	; 32
    2752:	08 95       	ret

00002754 <__eewr_byte_m644>:
    2754:	26 2f       	mov	r18, r22

00002756 <__eewr_r18_m644>:
    2756:	f9 99       	sbic	0x1f, 1	; 31
    2758:	fe cf       	rjmp	.-4      	; 0x2756 <__eewr_r18_m644>
    275a:	1f ba       	out	0x1f, r1	; 31
    275c:	92 bd       	out	0x22, r25	; 34
    275e:	81 bd       	out	0x21, r24	; 33
    2760:	20 bd       	out	0x20, r18	; 32
    2762:	0f b6       	in	r0, 0x3f	; 63
    2764:	f8 94       	cli
    2766:	fa 9a       	sbi	0x1f, 2	; 31
    2768:	f9 9a       	sbi	0x1f, 1	; 31
    276a:	0f be       	out	0x3f, r0	; 63
    276c:	01 96       	adiw	r24, 0x01	; 1
    276e:	08 95       	ret

00002770 <strnlen_P>:
    2770:	fc 01       	movw	r30, r24
    2772:	05 90       	lpm	r0, Z+
    2774:	61 50       	subi	r22, 0x01	; 1
    2776:	70 40       	sbci	r23, 0x00	; 0
    2778:	01 10       	cpse	r0, r1
    277a:	d8 f7       	brcc	.-10     	; 0x2772 <strnlen_P+0x2>
    277c:	80 95       	com	r24
    277e:	90 95       	com	r25
    2780:	8e 0f       	add	r24, r30
    2782:	9f 1f       	adc	r25, r31
    2784:	08 95       	ret

00002786 <strnlen>:
    2786:	fc 01       	movw	r30, r24
    2788:	61 50       	subi	r22, 0x01	; 1
    278a:	70 40       	sbci	r23, 0x00	; 0
    278c:	01 90       	ld	r0, Z+
    278e:	01 10       	cpse	r0, r1
    2790:	d8 f7       	brcc	.-10     	; 0x2788 <strnlen+0x2>
    2792:	80 95       	com	r24
    2794:	90 95       	com	r25
    2796:	8e 0f       	add	r24, r30
    2798:	9f 1f       	adc	r25, r31
    279a:	08 95       	ret

0000279c <fputc>:
    279c:	0f 93       	push	r16
    279e:	1f 93       	push	r17
    27a0:	cf 93       	push	r28
    27a2:	df 93       	push	r29
    27a4:	18 2f       	mov	r17, r24
    27a6:	09 2f       	mov	r16, r25
    27a8:	eb 01       	movw	r28, r22
    27aa:	8b 81       	ldd	r24, Y+3	; 0x03
    27ac:	81 fd       	sbrc	r24, 1
    27ae:	03 c0       	rjmp	.+6      	; 0x27b6 <fputc+0x1a>
    27b0:	8f ef       	ldi	r24, 0xFF	; 255
    27b2:	9f ef       	ldi	r25, 0xFF	; 255
    27b4:	20 c0       	rjmp	.+64     	; 0x27f6 <fputc+0x5a>
    27b6:	82 ff       	sbrs	r24, 2
    27b8:	10 c0       	rjmp	.+32     	; 0x27da <fputc+0x3e>
    27ba:	4e 81       	ldd	r20, Y+6	; 0x06
    27bc:	5f 81       	ldd	r21, Y+7	; 0x07
    27be:	2c 81       	ldd	r18, Y+4	; 0x04
    27c0:	3d 81       	ldd	r19, Y+5	; 0x05
    27c2:	42 17       	cp	r20, r18
    27c4:	53 07       	cpc	r21, r19
    27c6:	7c f4       	brge	.+30     	; 0x27e6 <fputc+0x4a>
    27c8:	e8 81       	ld	r30, Y
    27ca:	f9 81       	ldd	r31, Y+1	; 0x01
    27cc:	9f 01       	movw	r18, r30
    27ce:	2f 5f       	subi	r18, 0xFF	; 255
    27d0:	3f 4f       	sbci	r19, 0xFF	; 255
    27d2:	39 83       	std	Y+1, r19	; 0x01
    27d4:	28 83       	st	Y, r18
    27d6:	10 83       	st	Z, r17
    27d8:	06 c0       	rjmp	.+12     	; 0x27e6 <fputc+0x4a>
    27da:	e8 85       	ldd	r30, Y+8	; 0x08
    27dc:	f9 85       	ldd	r31, Y+9	; 0x09
    27de:	81 2f       	mov	r24, r17
    27e0:	09 95       	icall
    27e2:	89 2b       	or	r24, r25
    27e4:	29 f7       	brne	.-54     	; 0x27b0 <fputc+0x14>
    27e6:	2e 81       	ldd	r18, Y+6	; 0x06
    27e8:	3f 81       	ldd	r19, Y+7	; 0x07
    27ea:	2f 5f       	subi	r18, 0xFF	; 255
    27ec:	3f 4f       	sbci	r19, 0xFF	; 255
    27ee:	3f 83       	std	Y+7, r19	; 0x07
    27f0:	2e 83       	std	Y+6, r18	; 0x06
    27f2:	81 2f       	mov	r24, r17
    27f4:	90 2f       	mov	r25, r16
    27f6:	df 91       	pop	r29
    27f8:	cf 91       	pop	r28
    27fa:	1f 91       	pop	r17
    27fc:	0f 91       	pop	r16
    27fe:	08 95       	ret

00002800 <__ultoa_invert>:
    2800:	fa 01       	movw	r30, r20
    2802:	aa 27       	eor	r26, r26
    2804:	28 30       	cpi	r18, 0x08	; 8
    2806:	51 f1       	breq	.+84     	; 0x285c <__ultoa_invert+0x5c>
    2808:	20 31       	cpi	r18, 0x10	; 16
    280a:	81 f1       	breq	.+96     	; 0x286c <__ultoa_invert+0x6c>
    280c:	e8 94       	clt
    280e:	6f 93       	push	r22
    2810:	6e 7f       	andi	r22, 0xFE	; 254
    2812:	6e 5f       	subi	r22, 0xFE	; 254
    2814:	7f 4f       	sbci	r23, 0xFF	; 255
    2816:	8f 4f       	sbci	r24, 0xFF	; 255
    2818:	9f 4f       	sbci	r25, 0xFF	; 255
    281a:	af 4f       	sbci	r26, 0xFF	; 255
    281c:	b1 e0       	ldi	r27, 0x01	; 1
    281e:	3e d0       	rcall	.+124    	; 0x289c <__ultoa_invert+0x9c>
    2820:	b4 e0       	ldi	r27, 0x04	; 4
    2822:	3c d0       	rcall	.+120    	; 0x289c <__ultoa_invert+0x9c>
    2824:	67 0f       	add	r22, r23
    2826:	78 1f       	adc	r23, r24
    2828:	89 1f       	adc	r24, r25
    282a:	9a 1f       	adc	r25, r26
    282c:	a1 1d       	adc	r26, r1
    282e:	68 0f       	add	r22, r24
    2830:	79 1f       	adc	r23, r25
    2832:	8a 1f       	adc	r24, r26
    2834:	91 1d       	adc	r25, r1
    2836:	a1 1d       	adc	r26, r1
    2838:	6a 0f       	add	r22, r26
    283a:	71 1d       	adc	r23, r1
    283c:	81 1d       	adc	r24, r1
    283e:	91 1d       	adc	r25, r1
    2840:	a1 1d       	adc	r26, r1
    2842:	20 d0       	rcall	.+64     	; 0x2884 <__ultoa_invert+0x84>
    2844:	09 f4       	brne	.+2      	; 0x2848 <__ultoa_invert+0x48>
    2846:	68 94       	set
    2848:	3f 91       	pop	r19
    284a:	2a e0       	ldi	r18, 0x0A	; 10
    284c:	26 9f       	mul	r18, r22
    284e:	11 24       	eor	r1, r1
    2850:	30 19       	sub	r19, r0
    2852:	30 5d       	subi	r19, 0xD0	; 208
    2854:	31 93       	st	Z+, r19
    2856:	de f6       	brtc	.-74     	; 0x280e <__ultoa_invert+0xe>
    2858:	cf 01       	movw	r24, r30
    285a:	08 95       	ret
    285c:	46 2f       	mov	r20, r22
    285e:	47 70       	andi	r20, 0x07	; 7
    2860:	40 5d       	subi	r20, 0xD0	; 208
    2862:	41 93       	st	Z+, r20
    2864:	b3 e0       	ldi	r27, 0x03	; 3
    2866:	0f d0       	rcall	.+30     	; 0x2886 <__ultoa_invert+0x86>
    2868:	c9 f7       	brne	.-14     	; 0x285c <__ultoa_invert+0x5c>
    286a:	f6 cf       	rjmp	.-20     	; 0x2858 <__ultoa_invert+0x58>
    286c:	46 2f       	mov	r20, r22
    286e:	4f 70       	andi	r20, 0x0F	; 15
    2870:	40 5d       	subi	r20, 0xD0	; 208
    2872:	4a 33       	cpi	r20, 0x3A	; 58
    2874:	18 f0       	brcs	.+6      	; 0x287c <__ultoa_invert+0x7c>
    2876:	49 5d       	subi	r20, 0xD9	; 217
    2878:	31 fd       	sbrc	r19, 1
    287a:	40 52       	subi	r20, 0x20	; 32
    287c:	41 93       	st	Z+, r20
    287e:	02 d0       	rcall	.+4      	; 0x2884 <__ultoa_invert+0x84>
    2880:	a9 f7       	brne	.-22     	; 0x286c <__ultoa_invert+0x6c>
    2882:	ea cf       	rjmp	.-44     	; 0x2858 <__ultoa_invert+0x58>
    2884:	b4 e0       	ldi	r27, 0x04	; 4
    2886:	a6 95       	lsr	r26
    2888:	97 95       	ror	r25
    288a:	87 95       	ror	r24
    288c:	77 95       	ror	r23
    288e:	67 95       	ror	r22
    2890:	ba 95       	dec	r27
    2892:	c9 f7       	brne	.-14     	; 0x2886 <__ultoa_invert+0x86>
    2894:	00 97       	sbiw	r24, 0x00	; 0
    2896:	61 05       	cpc	r22, r1
    2898:	71 05       	cpc	r23, r1
    289a:	08 95       	ret
    289c:	9b 01       	movw	r18, r22
    289e:	ac 01       	movw	r20, r24
    28a0:	0a 2e       	mov	r0, r26
    28a2:	06 94       	lsr	r0
    28a4:	57 95       	ror	r21
    28a6:	47 95       	ror	r20
    28a8:	37 95       	ror	r19
    28aa:	27 95       	ror	r18
    28ac:	ba 95       	dec	r27
    28ae:	c9 f7       	brne	.-14     	; 0x28a2 <__ultoa_invert+0xa2>
    28b0:	62 0f       	add	r22, r18
    28b2:	73 1f       	adc	r23, r19
    28b4:	84 1f       	adc	r24, r20
    28b6:	95 1f       	adc	r25, r21
    28b8:	a0 1d       	adc	r26, r0
    28ba:	08 95       	ret

000028bc <__mulshisi3>:
    28bc:	b7 ff       	sbrs	r27, 7
    28be:	0c 94 09 11 	jmp	0x2212	; 0x2212 <__muluhisi3>

000028c2 <__mulohisi3>:
    28c2:	0e 94 09 11 	call	0x2212	; 0x2212 <__muluhisi3>
    28c6:	82 1b       	sub	r24, r18
    28c8:	93 0b       	sbc	r25, r19
    28ca:	08 95       	ret

000028cc <__divmodsi4>:
    28cc:	05 2e       	mov	r0, r21
    28ce:	97 fb       	bst	r25, 7
    28d0:	1e f4       	brtc	.+6      	; 0x28d8 <__divmodsi4+0xc>
    28d2:	00 94       	com	r0
    28d4:	0e 94 7d 14 	call	0x28fa	; 0x28fa <__negsi2>
    28d8:	57 fd       	sbrc	r21, 7
    28da:	07 d0       	rcall	.+14     	; 0x28ea <__divmodsi4_neg2>
    28dc:	0e 94 bc 14 	call	0x2978	; 0x2978 <__udivmodsi4>
    28e0:	07 fc       	sbrc	r0, 7
    28e2:	03 d0       	rcall	.+6      	; 0x28ea <__divmodsi4_neg2>
    28e4:	4e f4       	brtc	.+18     	; 0x28f8 <__divmodsi4_exit>
    28e6:	0c 94 7d 14 	jmp	0x28fa	; 0x28fa <__negsi2>

000028ea <__divmodsi4_neg2>:
    28ea:	50 95       	com	r21
    28ec:	40 95       	com	r20
    28ee:	30 95       	com	r19
    28f0:	21 95       	neg	r18
    28f2:	3f 4f       	sbci	r19, 0xFF	; 255
    28f4:	4f 4f       	sbci	r20, 0xFF	; 255
    28f6:	5f 4f       	sbci	r21, 0xFF	; 255

000028f8 <__divmodsi4_exit>:
    28f8:	08 95       	ret

000028fa <__negsi2>:
    28fa:	90 95       	com	r25
    28fc:	80 95       	com	r24
    28fe:	70 95       	com	r23
    2900:	61 95       	neg	r22
    2902:	7f 4f       	sbci	r23, 0xFF	; 255
    2904:	8f 4f       	sbci	r24, 0xFF	; 255
    2906:	9f 4f       	sbci	r25, 0xFF	; 255
    2908:	08 95       	ret

0000290a <__prologue_saves__>:
    290a:	2f 92       	push	r2
    290c:	3f 92       	push	r3
    290e:	4f 92       	push	r4
    2910:	5f 92       	push	r5
    2912:	6f 92       	push	r6
    2914:	7f 92       	push	r7
    2916:	8f 92       	push	r8
    2918:	9f 92       	push	r9
    291a:	af 92       	push	r10
    291c:	bf 92       	push	r11
    291e:	cf 92       	push	r12
    2920:	df 92       	push	r13
    2922:	ef 92       	push	r14
    2924:	ff 92       	push	r15
    2926:	0f 93       	push	r16
    2928:	1f 93       	push	r17
    292a:	cf 93       	push	r28
    292c:	df 93       	push	r29
    292e:	cd b7       	in	r28, 0x3d	; 61
    2930:	de b7       	in	r29, 0x3e	; 62
    2932:	ca 1b       	sub	r28, r26
    2934:	db 0b       	sbc	r29, r27
    2936:	0f b6       	in	r0, 0x3f	; 63
    2938:	f8 94       	cli
    293a:	de bf       	out	0x3e, r29	; 62
    293c:	0f be       	out	0x3f, r0	; 63
    293e:	cd bf       	out	0x3d, r28	; 61
    2940:	09 94       	ijmp

00002942 <__epilogue_restores__>:
    2942:	2a 88       	ldd	r2, Y+18	; 0x12
    2944:	39 88       	ldd	r3, Y+17	; 0x11
    2946:	48 88       	ldd	r4, Y+16	; 0x10
    2948:	5f 84       	ldd	r5, Y+15	; 0x0f
    294a:	6e 84       	ldd	r6, Y+14	; 0x0e
    294c:	7d 84       	ldd	r7, Y+13	; 0x0d
    294e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2950:	9b 84       	ldd	r9, Y+11	; 0x0b
    2952:	aa 84       	ldd	r10, Y+10	; 0x0a
    2954:	b9 84       	ldd	r11, Y+9	; 0x09
    2956:	c8 84       	ldd	r12, Y+8	; 0x08
    2958:	df 80       	ldd	r13, Y+7	; 0x07
    295a:	ee 80       	ldd	r14, Y+6	; 0x06
    295c:	fd 80       	ldd	r15, Y+5	; 0x05
    295e:	0c 81       	ldd	r16, Y+4	; 0x04
    2960:	1b 81       	ldd	r17, Y+3	; 0x03
    2962:	aa 81       	ldd	r26, Y+2	; 0x02
    2964:	b9 81       	ldd	r27, Y+1	; 0x01
    2966:	ce 0f       	add	r28, r30
    2968:	d1 1d       	adc	r29, r1
    296a:	0f b6       	in	r0, 0x3f	; 63
    296c:	f8 94       	cli
    296e:	de bf       	out	0x3e, r29	; 62
    2970:	0f be       	out	0x3f, r0	; 63
    2972:	cd bf       	out	0x3d, r28	; 61
    2974:	ed 01       	movw	r28, r26
    2976:	08 95       	ret

00002978 <__udivmodsi4>:
    2978:	a1 e2       	ldi	r26, 0x21	; 33
    297a:	1a 2e       	mov	r1, r26
    297c:	aa 1b       	sub	r26, r26
    297e:	bb 1b       	sub	r27, r27
    2980:	fd 01       	movw	r30, r26
    2982:	0d c0       	rjmp	.+26     	; 0x299e <__udivmodsi4_ep>

00002984 <__udivmodsi4_loop>:
    2984:	aa 1f       	adc	r26, r26
    2986:	bb 1f       	adc	r27, r27
    2988:	ee 1f       	adc	r30, r30
    298a:	ff 1f       	adc	r31, r31
    298c:	a2 17       	cp	r26, r18
    298e:	b3 07       	cpc	r27, r19
    2990:	e4 07       	cpc	r30, r20
    2992:	f5 07       	cpc	r31, r21
    2994:	20 f0       	brcs	.+8      	; 0x299e <__udivmodsi4_ep>
    2996:	a2 1b       	sub	r26, r18
    2998:	b3 0b       	sbc	r27, r19
    299a:	e4 0b       	sbc	r30, r20
    299c:	f5 0b       	sbc	r31, r21

0000299e <__udivmodsi4_ep>:
    299e:	66 1f       	adc	r22, r22
    29a0:	77 1f       	adc	r23, r23
    29a2:	88 1f       	adc	r24, r24
    29a4:	99 1f       	adc	r25, r25
    29a6:	1a 94       	dec	r1
    29a8:	69 f7       	brne	.-38     	; 0x2984 <__udivmodsi4_loop>
    29aa:	60 95       	com	r22
    29ac:	70 95       	com	r23
    29ae:	80 95       	com	r24
    29b0:	90 95       	com	r25
    29b2:	9b 01       	movw	r18, r22
    29b4:	ac 01       	movw	r20, r24
    29b6:	bd 01       	movw	r22, r26
    29b8:	cf 01       	movw	r24, r30
    29ba:	08 95       	ret

000029bc <_exit>:
    29bc:	f8 94       	cli

000029be <__stop_program>:
    29be:	ff cf       	rjmp	.-2      	; 0x29be <__stop_program>
